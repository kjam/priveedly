<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[Julia Evans]]></title>
  <link href="http://jvns.ca/atom.xml" rel="self"/>
  <link href="http://jvns.ca"/>
  <updated>2025-01-11T09:46:01+00:00</updated>
  <id>http://jvns.ca</id>
  <author>
      <name>Julia Evans</name>
  </author>
  <generator uri="http://gohugo.io/">Hugo</generator>

  
  <entry>
    <title type="html"><![CDATA[What's involved in getting a "modern" terminal setup?]]></title>
    <link href="https://jvns.ca/blog/2025/01/11/getting-a-modern-terminal-setup/"/>
    <updated>2025-01-11T09:46:01+00:00</updated>
    <id>https://jvns.ca/blog/2025/01/11/getting-a-modern-terminal-setup/</id>
    <content type="html"><![CDATA[<p>Hello! Recently I ran a terminal survey and I asked people what frustrated
them. One person commented:</p>
<blockquote>
<p>There are so many pieces to having a modern terminal experience. I wish it
all came out of the box.</p>
</blockquote>
<p>My immediate reaction was &ldquo;oh, getting a modern terminal experience isn&rsquo;t that
hard, you just need to&hellip;.&rdquo;, but the more I thought about it, the longer the
&ldquo;you just need to&hellip;&rdquo; list got, and I kept thinking about more and more
caveats.</p>
<p>So I thought I would write down some notes about what it means to me personally
to have a &ldquo;modern&rdquo; terminal experience and what I think can make it hard for
people to get there.</p>
<h3 id="what-is-a-modern-terminal-experience">what is a &ldquo;modern terminal experience&rdquo;?</h3>
<p>Here are a few things that are important to me, with which part of the system
is responsible for them:</p>
<ul>
<li><strong>multiline support for copy and paste</strong>: if you paste 3 commands in your shell, it should not immediatly run them all! That&rsquo;s scary! (<strong>shell</strong>, <strong>terminal emulator</strong>)</li>
<li><strong>infinite shell history</strong>: if I run a command in my shell, it should be saved forever, not deleted after 500 history entries or whatever. Also I want commands to be saved to the history immediately when I run them, not only when I exit the shell session (<strong>shell</strong>)</li>
<li><strong>a useful prompt</strong>: I can&rsquo;t live without having my <strong>current directory</strong> and <strong>current git branch</strong> in my prompt (<strong>shell</strong>)</li>
<li><strong>24-bit colour</strong>: this is important to me because I find it MUCH easier to theme neovim with 24-bit colour support than in a terminal with only 256 colours (<strong>terminal emulator</strong>)</li>
<li><strong>clipboard integration</strong> between vim and my operating system so that when I copy in Firefox, I can just press <code>p</code> in vim to paste (<strong>text editor</strong>, maybe the OS/terminal emulator too)</li>
<li><strong>good autocomplete</strong>: for example commands like git should have command-specific autocomplete (<strong>shell</strong>)</li>
<li><strong>having colours in <code>ls</code></strong> (<strong>shell config</strong>)</li>
<li><strong>a terminal theme I like</strong>: I spend a lot of time in my terminal, I want it to look nice and I want its theme to match my terminal editor&rsquo;s theme. (<strong>terminal emulator</strong>, <strong>text editor</strong>)</li>
<li><strong>automatic terminal fixing</strong>: If a programs prints out some weird escape
codes that mess up my terminal, I want that to automatically get reset so
that my terminal doesn&rsquo;t get messed up (<strong>shell</strong>)</li>
<li><strong>keybindings</strong>: I want <code>Ctrl+left arrow</code> to work (<strong>shell</strong> or <strong>application</strong>)</li>
<li><strong>being able to use the scroll wheel in programs like <code>less</code></strong>: (<strong>terminal emulator</strong> and <strong>applications</strong>)</li>
</ul>
<p>There are a million other terminal conveniences out there and different people
value different things, but those are the ones that I would be really unhappy
without.</p>
<h3 id="how-i-achieve-a-modern-experience">how I achieve a &ldquo;modern experience&rdquo;</h3>
<p>My basic approach is:</p>
<ol>
<li>use the <code>fish</code> shell. Mostly don&rsquo;t configure it, except to:
<ul>
<li>set the <code>EDITOR</code> environment variable to my favourite terminal editor</li>
<li>alias <code>ls</code> to <code>ls --color=auto</code></li>
</ul>
</li>
<li>use any terminal emulator with 24-bit colour support. In the past I&rsquo;ve used
GNOME Terminal, Terminator, and iTerm, but I&rsquo;m not picky about this. I don&rsquo;t really
configure it other than to choose a font.</li>
<li>use <code>neovim</code>, with a configuration that I&rsquo;ve been very slowly building over the last 9 years or so (the last time I deleted my vim config and started from scratch was 9 years ago)</li>
<li>use the <a href="https://github.com/chriskempson/base16">base16 framework</a> to theme everything</li>
</ol>
<p>A few things that affect my approach:</p>
<ul>
<li>I don&rsquo;t spend a lot of time SSHed into other machines</li>
<li>I&rsquo;d rather use the mouse a little than come up with keyboard-based ways to do everything</li>
<li>I work on a lot of small projects, not one big project</li>
</ul>
<h3 id="some-out-of-the-box-options-for-a-modern-experience">some &ldquo;out of the box&rdquo; options for a &ldquo;modern&rdquo; experience</h3>
<p>What if you want a nice experience, but don&rsquo;t want to spend a lot of time on
configuration? Figuring out how to configure vim in a way that I was satisfied
with really did take me like ten years, which is a long time!</p>
<p>My best ideas for how to get a reasonable terminal experience with minimal
config are:</p>
<ul>
<li>shell: either <code>fish</code> or <code>zsh</code> with <a href="https://ohmyz.sh/">oh-my-zsh</a></li>
<li>terminal emulator: almost anything with 24-bit colour support, for example all of these are popular:
<ul>
<li>linux: GNOME Terminal, Konsole, Terminator, xfce4-terminal</li>
<li>mac: iTerm (Terminal.app doesn&rsquo;t have 256-colour support)</li>
<li>cross-platform: kitty, alacritty, wezterm, or ghostty</li>
</ul>
</li>
<li>shell config:
<ul>
<li>set the <code>EDITOR</code> environment variable to your favourite terminal text
editor</li>
<li>maybe alias <code>ls</code> to <code>ls --color=auto</code></li>
</ul>
</li>
<li>text editor: this is a tough one, maybe <a href="https://micro-editor.github.io/">micro</a> or <a href="https://helix-editor.com/">helix</a>? I haven&rsquo;t used
either of them seriously but they both seem like very cool projects and I
think it&rsquo;s amazing that you can just use all the usual GUI editor commands
(<code>Ctrl-C</code> to copy, <code>Ctrl-V</code> to paste, <code>Ctrl-A</code> to select all) in micro and
they do what you&rsquo;d expect. I would probably try switching to helix except
that retraining my vim muscle memory seems way too hard. Also helix doesn&rsquo;t
have a GUI or plugin system yet.</li>
</ul>
<p>Personally I <strong>wouldn&rsquo;t</strong> use xterm, rxvt, or Terminal.app as a terminal emulator,
because I&rsquo;ve found in the past that they&rsquo;re missing core features (like 24-bit
colour in Terminal.app&rsquo;s case) that make the terminal harder to use for me.</p>
<p>I don&rsquo;t want to pretend that getting a &ldquo;modern&rdquo; terminal experience is easier
than it is though &ndash; I think there are two issues that make it hard. Let&rsquo;s talk
about them!</p>
<h3 id="issue-1-with-getting-to-a-modern-experience-the-shell">issue 1 with getting to a &ldquo;modern&rdquo; experience: the shell</h3>
<p>bash and zsh are by far the two most popular shells, and neither of them
provide a default experience that I would be happy using out of the box, for
example:</p>
<ul>
<li>you need to customize your prompt</li>
<li>they don&rsquo;t come with git completions by default, you have to set them up</li>
<li>by default, bash only stores 500 (!) lines of history and (at least on Mac OS)
zsh is only configured to store 2000 lines, which is still not a lot</li>
<li>I find bash&rsquo;s tab completion very frustrating, if there&rsquo;s more than
one match then you can&rsquo;t tab through them</li>
</ul>
<p>And even though <a href="https://jvns.ca/blog/2024/09/12/reasons-i--still--love-fish/">I love fish</a>, the fact
that it isn&rsquo;t POSIX does make it hard for a lot of folks to make the switch.</p>
<p>Of course it&rsquo;s totally possible to learn how to customize your prompt in bash
or whatever, and it doesn&rsquo;t even need to be that complicated (in bash I&rsquo;d
probably start with something like <code>export PS1='[\u@\h \W$(__git_ps1 &quot; (%s)&quot;)]\$ '</code>, or maybe use <a href="https://starship.rs/">starship</a>).
But each of these &ldquo;not complicated&rdquo; things really does add up and it&rsquo;s
especially tough if you need to keep your config in sync across several
systems.</p>
<p>An extremely popular solution to getting a &ldquo;modern&rdquo; shell experience is
<a href="https://ohmyz.sh/">oh-my-zsh</a>. It seems like a great project and I know a lot
of people use it very happily, but I&rsquo;ve struggled with configuration systems
like that in the past &ndash; it looks like right now the base oh-my-zsh adds about
3000 lines of config, and often I find that having an extra configuration
system makes it harder to debug what&rsquo;s happening when things go wrong. I
personally have a tendency to use the system to add a lot of extra plugins,
make my system slow, get frustrated that it&rsquo;s slow, and then delete it
completely and write a new config from scratch.</p>
<h3 id="issue-2-with-getting-to-a-modern-experience-the-text-editor">issue 2 with getting to a &ldquo;modern&rdquo; experience: the text editor</h3>
<p>In the terminal survey I ran recently, the most popular terminal text editors
by far were <code>vim</code>, <code>emacs</code>, and <code>nano</code>.</p>
<p>I think the main options for terminal text editors are:</p>
<ul>
<li>use vim or emacs and configure it to your liking, you can probably have any
feature you want if you put in the work</li>
<li>use nano and accept that you&rsquo;re going to have a pretty limited experience
(for example I don&rsquo;t think you can select text with the mouse and then &ldquo;cut&rdquo;
it in nano)</li>
<li>use <code>micro</code> or <code>helix</code> which seem to offer a pretty good out-of-the-box
experience, potentially occasionally run into issues with using a less
mainstream text editor</li>
<li>just avoid using a terminal text editor as much as possible, maybe use VSCode, use
VSCode&rsquo;s terminal for all your terminal needs, and mostly never edit files in
the terminal. Or I know a lot of people use <code>code</code> as their <code>EDITOR</code> in the terminal.</li>
</ul>
<h3 id="issue-3-individual-applications">issue 3: individual applications</h3>
<p>The last issue is that sometimes individual programs that I use are kind of
annoying. For example on my Mac OS machine, <code>/usr/bin/sqlite3</code> doesn&rsquo;t support
the <code>Ctrl+Left Arrow</code> keyboard shortcut. Fixing this to get a reasonable
terminal experience in SQLite was a little complicated, I had to:</p>
<ul>
<li>realize why this is happening (Mac OS won&rsquo;t ship GNU tools, and &ldquo;Ctrl-Left arrow&rdquo; support comes from GNU readline)</li>
<li>find a workaround (install sqlite from homebrew, which does have readline support)</li>
<li>adjust my environment (put Homebrew&rsquo;s sqlite3 in my PATH)</li>
</ul>
<p>I find that debugging application-specific issues like this is really not easy
and often it doesn&rsquo;t feel &ldquo;worth it&rdquo; &ndash; often I&rsquo;ll end up just dealing with
various minor inconveniences because I don&rsquo;t want to spend hours investigating
them. The only reason I was even able to figure this one out at all is that
I&rsquo;ve been spending a huge amount of time thinking about the terminal recently.</p>
<p>A big part of having a &ldquo;modern&rdquo; experience using terminal programs is just
using newer terminal programs, for example I can&rsquo;t be bothered to learn a
keyboard shortcut to sort the columns in <code>top</code>, but in <code>htop</code>  I can just click
on a column heading with my mouse to sort it. So I use htop instead! But discovering new more &ldquo;modern&rdquo; command line tools isn&rsquo;t easy (though
I made <a href="https://jvns.ca/blog/2022/04/12/a-list-of-new-ish--command-line-tools/">a list here</a>),
finding ones that I actually like using in practice takes time, and if you&rsquo;re
SSHed into another machine, they won&rsquo;t always be there.</p>
<h3 id="everything-affects-everything-else">everything affects everything else</h3>
<p>Something I find tricky about configuring my terminal to make everything &ldquo;nice&rdquo;
is that changing one seemingly small thing about my workflow can really affect
everything else. For example right now I don&rsquo;t use tmux. But if I needed to use
tmux again (for example because I was doing a lot of work SSHed into another
machine), I&rsquo;d need to think about a few things, like:</p>
<ul>
<li>if I wanted tmux&rsquo;s copy to synchronize with my system clipboard over
SSH, I&rsquo;d need to make sure that my terminal emulator has <a href="https://old.reddit.com/r/vim/comments/k1ydpn/a_guide_on_how_to_copy_text_from_anywhere/">OSC 52 support</a></li>
<li>if I wanted to use iTerm&rsquo;s tmux integration (which makes tmux tabs into iTerm
tabs), I&rsquo;d need to change how I configure colours &ndash; right now I set them
with a <a href="https://github.com/chriskempson/base16-shell/blob/588691ba71b47e75793ed9edfcfaa058326a6f41/scripts/base16-solarized-light.sh">shell script</a> that I run when my shell starts, but that means the
colours get lost when restoring a tmux session.</li>
</ul>
<p>and probably more things I haven&rsquo;t thought of. &ldquo;Using tmux means that I have to
change how I manage my colours&rdquo; sounds unlikely, but that really did happen to
me and I decided &ldquo;well, I don&rsquo;t want to change how I manage colours right now,
so I guess I&rsquo;m not using that feature!&rdquo;.</p>
<p>It&rsquo;s also hard to remember which features I&rsquo;m relying on &ndash; for example maybe
my current terminal <em>does</em> have OSC 52 support and because copying from tmux over SSH
has always Just Worked I don&rsquo;t even realize that that&rsquo;s something I need, and
then it mysteriously stops working when I switch terminals.</p>
<h3 id="change-things-slowly">change things slowly</h3>
<p>Personally even though I think my setup is not <em>that</em> complicated, it&rsquo;s taken
me 20 years to get to this point! Because terminal config changes are so likely
to have unexpected and hard-to-understand consequences, I&rsquo;ve found that if I
change a lot of terminal configuration all at once it makes it much harder to
understand what went wrong if there&rsquo;s a problem, which can be really
disorienting.</p>
<p>So I usually prefer to make pretty small changes, and accept that changes can
might take me a REALLY long time to get used to. For example I switched from
using <code>ls</code> to <a href="https://github.com/eza-community/eza">eza</a> a year or two ago and
while I like it (because <code>eza -l</code> prints human-readable file sizes by default)
I&rsquo;m still not quite sure about it. But also sometimes it&rsquo;s worth it to make a
big change, like I made the switch to fish (from bash) 10 years ago and I&rsquo;m
very happy I did.</p>
<h3 id="getting-a-modern-terminal-is-not-that-easy">getting a &ldquo;modern&rdquo; terminal is not that easy</h3>
<p>Trying to explain how &ldquo;easy&rdquo; it is to configure your terminal really just made
me think that it&rsquo;s kind of hard and that I still sometimes get confused.</p>
<p>I&rsquo;ve found that there&rsquo;s never one perfect way to configure things in the
terminal that will be compatible with every single other thing. I just need to
try stuff, figure out some kind of locally stable state that works for me, and
accept that if I start using a new tool it might disrupt the system and I might
need to rethink things.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA["Rules" that terminal programs follow]]></title>
    <link href="https://jvns.ca/blog/2024/11/26/terminal-rules/"/>
    <updated>2024-12-12T09:28:22+00:00</updated>
    <id>https://jvns.ca/blog/2024/11/26/terminal-rules/</id>
    <content type="html"><![CDATA[<p>Recently I&rsquo;ve been thinking about how everything that happens in the terminal
is some combination of:</p>
<ol>
<li>Your <strong>operating system</strong>&rsquo;s job</li>
<li>Your <strong>shell</strong>&rsquo;s job</li>
<li>Your <strong>terminal emulator</strong>&rsquo;s job</li>
<li>The job of <strong>whatever program you happen to be running</strong> (like <code>top</code> or <code>vim</code> or <code>cat</code>)</li>
</ol>
<p>The first three (your operating system, shell, and terminal emulator) are all kind of
known quantities &ndash; if you&rsquo;re using bash in GNOME Terminal on Linux, you can
more or less reason about how how all of those things interact, and some of
their behaviour is standardized by POSIX.</p>
<p>But the fourth one (&ldquo;whatever program you happen to be running&rdquo;) feels like it
could do ANYTHING. How are you supposed to know how a program is going to
behave?</p>
<p>This post is kind of long so here&rsquo;s a quick table of contents:</p>
<ul>
<li><a href="#programs-behave-surprisingly-consistently">programs behave surprisingly consistently</a></li>
<li><a href="#these-are-meant-to-be-descriptive-not-prescriptive">these are meant to be descriptive, not prescriptive</a></li>
<li><a href="#it-s-not-always-obvious-which-rules-are-the-program-s-responsibility-to-implement">it&rsquo;s not always obvious which &ldquo;rules&rdquo; are the program&rsquo;s responsibility to implement</a></li>
<li><a href="#rule-1-noninteractive-programs-should-quit-when-you-press-ctrl-c">rule 1: noninteractive programs should quit when you press <code>Ctrl-C</code></a></li>
<li><a href="#rule-2-tuis-should-quit-when-you-press-q">rule 2: TUIs should quit when you press <code>q</code></a></li>
<li><a href="#rule-3-repls-should-quit-when-you-press-ctrl-d-on-an-empty-line">rule 3: REPLs should quit when you press <code>Ctrl-D</code> on an empty line</a></li>
<li><a href="#rule-4-don-t-use-more-than-16-colours">rule 4: don&rsquo;t use more than 16 colours</a></li>
<li><a href="#rule-5-vaguely-support-readline-keybindings">rule 5: vaguely support readline keybindings</a></li>
<li><a href="#rule-5-1-ctrl-w-should-delete-the-last-word">rule 5.1: <code>Ctrl-W</code> should delete the last word</a></li>
<li><a href="#rule-6-disable-colours-when-writing-to-a-pipe">rule 6: disable colours when writing to a pipe</a></li>
<li><a href="#rule-7-means-stdin-stdout">rule 7: <code>-</code> means stdin/stdout</a></li>
<li><a href="#these-rules-take-a-long-time-to-learn">these &ldquo;rules&rdquo; take a long time to learn</a></li>
</ul>
<h3 id="programs-behave-surprisingly-consistently">programs behave surprisingly consistently</h3>
<p>As far as I know, there are no real standards for how programs in the terminal
should behave &ndash; the closest things I know of are:</p>
<ul>
<li>POSIX, which mostly dictates how your terminal emulator / OS / shell should
work together. I think it does specify a few things about how core utilities like
<code>cp</code> should work but AFAIK it doesn&rsquo;t have anything to say about how for
example <code>htop</code> should behave.</li>
<li>these <a href="https://clig.dev/">command line interface guidelines</a></li>
</ul>
<p>But even though there are no standards, in my experience programs in the
terminal behave in a pretty consistent way. So I wanted to write down a list of
&ldquo;rules&rdquo; that in my experience programs mostly follow.</p>
<h3 id="these-are-meant-to-be-descriptive-not-prescriptive">these are meant to be descriptive, not prescriptive</h3>
<p>My goal here isn&rsquo;t to convince authors of terminal programs that they <em>should</em>
follow any of these rules. There are lots of exceptions to these and often
there&rsquo;s a good reason for those exceptions.</p>
<p>But it&rsquo;s very useful for me to know what behaviour to expect from a random new
terminal program that I&rsquo;m using. Instead of &ldquo;uh, programs could do literally
anything&rdquo;, it&rsquo;s &ldquo;ok, here are the basic rules I expect, and then I can keep a
short mental list of exceptions&rdquo;.</p>
<p>So I&rsquo;m just writing down what I&rsquo;ve observed about how programs behave in my 20
years of using the terminal, why I think they behave that way, and some
examples of cases where that rule is &ldquo;broken&rdquo;.</p>
<h3 id="it-s-not-always-obvious-which-rules-are-the-program-s-responsibility-to-implement">it&rsquo;s not always obvious which &ldquo;rules&rdquo; are the program&rsquo;s responsibility to implement</h3>
<p>There are a bunch of common conventions that I think are pretty clearly the
program&rsquo;s responsibility to implement, like:</p>
<ul>
<li>config files should go in <code>~/.BLAHrc</code> or <code>~/.config/BLAH/FILE</code> or <code>/etc/BLAH/</code> or something</li>
<li><code>--help</code> should print help text</li>
<li>programs should print &ldquo;regular&rdquo; output to stdout and errors to stderr</li>
</ul>
<p>But in this post I&rsquo;m going to focus on things that it&rsquo;s not 100% obvious are
the program&rsquo;s responsibility. For example it feels to me like a &ldquo;law of nature&rdquo;
that pressing <code>Ctrl-D</code> should quit a REPL, but programs often
need to explicitly implement support for it &ndash; even though <code>cat</code> doesn&rsquo;t need
to implement <code>Ctrl-D</code> support, <code>ipython</code> <a href="https://github.com/prompt-toolkit/python-prompt-toolkit/blob/a2a12300c635ab3c051566e363ed27d853af4b21/src/prompt_toolkit/shortcuts/prompt.py#L824-L837">does</a>. (more about that in &ldquo;rule 3&rdquo; below)</p>
<p>Understanding which things are the program&rsquo;s responsibility makes it much less
surprising when different programs&rsquo; implementations are slightly different.</p>
<h3 id="rule-1-noninteractive-programs-should-quit-when-you-press-ctrl-c">rule 1: noninteractive programs should quit when you press <code>Ctrl-C</code></h3>
<p>The main reason for this rule is that noninteractive programs will quit by
default on <code>Ctrl-C</code> if they don&rsquo;t set up a <code>SIGINT</code> signal handler, so this is
kind of a &ldquo;you should act like the default&rdquo; rule.</p>
<p>Something that trips a lot of people up is that this doesn&rsquo;t apply to
<strong>interactive</strong> programs like <code>python3</code> or <code>bc</code> or <code>less</code>. This is because in
an interactive program, <code>Ctrl-C</code> has a different job &ndash; if the program is
running an operation (like for example a search in <code>less</code> or some Python code
in <code>python3</code>), then <code>Ctrl-C</code> will interrupt that operation but not stop the
program.</p>
<p>As an example of how this works in an interactive program: here&rsquo;s the code <a href="https://github.com/prompt-toolkit/python-prompt-toolkit/blob/a2a12300c635ab3c051566e363ed27d853af4b21/src/prompt_toolkit/key_binding/bindings/vi.py#L2225">in prompt-toolkit</a> (the library that iPython uses for handling input)
that aborts a search when you press <code>Ctrl-C</code>.</p>
<h3 id="rule-2-tuis-should-quit-when-you-press-q">rule 2: TUIs should quit when you press <code>q</code></h3>
<p>TUI programs (like <code>less</code> or <code>htop</code>) will usually quit when you press <code>q</code>.</p>
<p>This rule doesn&rsquo;t apply to any program where pressing <code>q</code> to quit wouldn&rsquo;t make
sense, like <code>tmux</code> or text editors.</p>
<h3 id="rule-3-repls-should-quit-when-you-press-ctrl-d-on-an-empty-line">rule 3: REPLs should quit when you press <code>Ctrl-D</code> on an empty line</h3>
<p>REPLs (like <code>python3</code> or <code>ed</code>) will usually quit when you press <code>Ctrl-D</code> on an
empty line. This rule is similar to the <code>Ctrl-C</code> rule &ndash; the reason for this is
that by default if you&rsquo;re running a program (like <code>cat</code>) in &ldquo;cooked mode&rdquo;, then
the operating system will return an <code>EOF</code> when you press <code>Ctrl-D</code> on an empty
line.</p>
<p>Most of the REPLs I use (sqlite3, python3, fish, bash, etc) don&rsquo;t actually use
cooked mode, but they all implement this keyboard shortcut anyway to mimic the
default behaviour.</p>
<p>For example, here&rsquo;s <a href="https://github.com/prompt-toolkit/python-prompt-toolkit/blob/a2a12300c635ab3c051566e363ed27d853af4b21/src/prompt_toolkit/shortcuts/prompt.py#L824-L837">the code in prompt-toolkit</a>
that quits when you press Ctrl-D, and here&rsquo;s <a href="https://github.com/bminor/bash/blob/6794b5478f660256a1023712b5fc169196ed0a22/lib/readline/readline.c#L658-L672">the same code in readline</a>.</p>
<p>I actually thought that this one was a &ldquo;Law of Terminal Physics&rdquo; until very
recently because I&rsquo;ve basically never seen it broken, but you can see that it&rsquo;s
just something that each individual input library has to implement in the links
above.</p>
<p>Someone pointed out that the Erlang REPL does not quit when you press <code>Ctrl-D</code>,
so I guess not every REPL follows this &ldquo;rule&rdquo;.</p>
<h3 id="rule-4-don-t-use-more-than-16-colours">rule 4: don&rsquo;t use more than 16 colours</h3>
<p>Terminal programs rarely use colours other than the base 16 ANSI colours. This
is because if you specify colours with a hex code, it&rsquo;s very likely to clash
with some users&rsquo; background colour. For example if I print out some text as
<code>#EEEEEE</code>, it would be almost invisible on a white background, though it would
look fine on a dark background.</p>
<p>But if you stick to the default 16 base colours, you have a much better chance
that the user has configured those colours in their terminal emulator so that
they work reasonably well with their background color. Another reason to stick
to the default base 16 colours is that it makes less assumptions about what
colours the terminal emulator supports.</p>
<p>The only programs I usually see breaking this &ldquo;rule&rdquo; are text editors, for
example Helix by default will use a purple background which is not a default
ANSI colour. It seems fine for Helix to break this rule since Helix isn&rsquo;t a
&ldquo;core&rdquo; program and I assume any Helix user who doesn&rsquo;t like that colorscheme
will just change the theme.</p>
<h3 id="rule-5-vaguely-support-readline-keybindings">rule 5: vaguely support readline keybindings</h3>
<p>Almost every program I use supports <code>readline</code> keybindings if it would make
sense to do so. For example, here are a bunch of different programs and a link
to where they define <code>Ctrl-E</code> to go to the end of the line:</p>
<ul>
<li>ipython (<a href="https://github.com/prompt-toolkit/python-prompt-toolkit/blob/a2a12300c635ab3c051566e363ed27d853af4b21/src/prompt_toolkit/key_binding/bindings/emacs.py#L72">Ctrl-E defined here</a>)</li>
<li>atuin (<a href="https://github.com/atuinsh/atuin/blob/a67cfc82fe0dc907a01f07a0fd625701e062a33b/crates/atuin/src/command/client/search/interactive.rs#L407">Ctrl-E defined here</a>)</li>
<li>fzf (<a href="https://github.com/junegunn/fzf/blob/bb55045596d6d08445f3c6d320c3ec2b457462d1/src/terminal.go#L611">Ctrl-E defined here</a>)</li>
<li>zsh (<a href="https://github.com/zsh-users/zsh/blob/86d5f24a3d28541f242eb3807379301ea976de87/Src/Zle/zle_bindings.c#L94">Ctrl-E defined here</a>)</li>
<li>fish (<a href="https://github.com/fish-shell/fish-shell/blob/99fa8aaaa7956178973150a03ce4954ab17a197b/share/functions/fish_default_key_bindings.fish#L43">Ctrl-E defined here</a>)</li>
<li>tmux&rsquo;s command prompt (<a href="https://github.com/tmux/tmux/blob/ae8f2208c98e3c2d6e3fe4cad2281dce8fd11f31/key-bindings.c#L490">Ctrl-E defined here</a>)</li>
</ul>
<p>None of those programs actually uses <code>readline</code> directly, they just sort of
mimic emacs/readline keybindings. They don&rsquo;t always mimic them <em>exactly</em>: for
example atuin seems to use <code>Ctrl-A</code> as a prefix, so <code>Ctrl-A</code> doesn&rsquo;t go to the
beginning of the line.</p>
<p>Also all of these programs seem to implement their own internal cut and paste
buffers so you can delete a line with <code>Ctrl-U</code> and then paste it with <code>Ctrl-Y</code>.</p>
<p>The exceptions to this are:</p>
<ul>
<li>some programs (like <code>git</code>, <code>cat</code>, and <code>nc</code>) don&rsquo;t have any line editing support at all (except for backspace, <code>Ctrl-W</code>, and <code>Ctrl-U</code>)</li>
<li>as usual text editors are an exception, every text editor has its own
approach to editing text</li>
</ul>
<p>I wrote more about this &ldquo;what keybindings does a program support?&rdquo; question in
<a href="https://jvns.ca/blog/2024/07/08/readline/">entering text in the terminal is complicated</a>.</p>
<h3 id="rule-5-1-ctrl-w-should-delete-the-last-word">rule 5.1: Ctrl-W should delete the last word</h3>
<p>I&rsquo;ve never seen a program (other than a text editor) where <code>Ctrl-W</code> <em>doesn&rsquo;t</em>
delete the last word. This is similar to the <code>Ctrl-C</code> rule &ndash; by default if a
program is in &ldquo;cooked mode&rdquo;, the OS will delete the last word if you press
<code>Ctrl-W</code>, and delete the whole line if you press <code>Ctrl-U</code>. So usually programs
will imitate that behaviour.</p>
<p>I can&rsquo;t think of any exceptions to this other than text editors but if there
are I&rsquo;d love to hear about them!</p>
<h3 id="rule-6-disable-colours-when-writing-to-a-pipe">rule 6: disable colours when writing to a pipe</h3>
<p>Most programs will disable colours when writing to a pipe. For example:</p>
<ul>
<li><code>rg blah</code> will highlight all occurrences of <code>blah</code> in the output, but if the
output is to a pipe or a file, it&rsquo;ll turn off the highlighting.</li>
<li><code>ls --color=auto</code> will use colour when writing to a terminal, but not when
writing to a pipe</li>
</ul>
<p>Both of those programs will also format their output differently when writing
to the terminal: <code>ls</code> will organize files into columns, and ripgrep will group
matches with headings.</p>
<p>If you want to force the program to use colour (for example because you want to
look at the colour), you can use <code>unbuffer</code> to force the program&rsquo;s output to be
a tty like this:</p>
<pre><code>unbuffer rg blah |  less -R
</code></pre>
<p>I&rsquo;m sure that there are some programs that &ldquo;break&rdquo; this rule but I can&rsquo;t think
of any examples right now. Some programs have an <code>--color</code> flag that you can
use to force colour to be on, in the example above you could also do <code>rg --color=always | less -R</code>.</p>
<h3 id="rule-7-means-stdin-stdout">rule 7: <code>-</code> means stdin/stdout</h3>
<p>Usually if you pass <code>-</code> to a program instead of a filename, it&rsquo;ll read from
stdin or write to stdout (whichever is appropriate). For example, if you want
to format the Python code that&rsquo;s on your clipboard with <code>black</code> and then copy
it, you could run:</p>
<pre><code>pbpaste | black - | pbcopy
</code></pre>
<p>(<code>pbpaste</code> is a Mac program, you can do something similar on Linux with <code>xclip</code>)</p>
<p>My impression is that most programs implement this if it would make sense and I
can&rsquo;t think of any exceptions right now, but I&rsquo;m sure there are many
exceptions.</p>
<h3 id="these-rules-take-a-long-time-to-learn">these &ldquo;rules&rdquo; take a long time to learn</h3>
<p>These rules took me a long time for me to learn because I had to:</p>
<ol>
<li>learn that the rule applied anywhere at all (&quot;<code>Ctrl-C</code> will exit programs&quot;)</li>
<li>notice some exceptions (&ldquo;okay, <code>Ctrl-C</code> will exit <code>find</code> but not <code>less</code>&rdquo;)</li>
<li>subconsciously figure out what the pattern is (&quot;<code>Ctrl-C</code> will generally quit
noninteractive programs, but in interactive programs it might interrupt the
current operation instead of quitting the program&quot;)</li>
<li>eventually maybe formulate it into an explicit rule that I know</li>
</ol>
<p>A lot of my understanding of the terminal is honestly still in the
&ldquo;subconscious pattern recognition&rdquo; stage. The only reason I&rsquo;ve been taking the
time to make things explicit at all is because I&rsquo;ve been trying to explain how
it works to others. Hopefully writing down these &ldquo;rules&rdquo; explicitly will make
learning some of this stuff a little bit faster for others.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Why pipes sometimes get "stuck": buffering]]></title>
    <link href="https://jvns.ca/blog/2024/11/29/why-pipes-get-stuck-buffering/"/>
    <updated>2024-11-29T08:23:31+00:00</updated>
    <id>https://jvns.ca/blog/2024/11/29/why-pipes-get-stuck-buffering/</id>
    <content type="html"><![CDATA[<p>Here&rsquo;s a niche terminal problem that has bothered me for years but that I never
really understood until a few weeks ago. Let&rsquo;s say you&rsquo;re running this command
to watch for some specific output in a log file:</p>
<pre><code>tail -f /some/log/file | grep thing1 | grep thing2
</code></pre>
<p>If log lines are being added to the file relatively slowly, the result I&rsquo;d see
is&hellip; nothing! It doesn&rsquo;t matter if there were matches in the log file or not,
there just wouldn&rsquo;t be any output.</p>
<p>I internalized this as &ldquo;uh, I guess pipes just get stuck sometimes and don&rsquo;t
show me the output, that&rsquo;s weird&rdquo;, and I&rsquo;d handle it by just
running <code>grep thing1 /some/log/file | grep thing2</code> instead, which would work.</p>
<p>So as I&rsquo;ve been doing a terminal deep dive over the last few months I was
really excited to finally learn exactly why this happens.</p>
<h3 id="why-this-happens-buffering">why this happens: buffering</h3>
<p>The reason why &ldquo;pipes get stuck&rdquo; sometimes is that it&rsquo;s VERY common for
programs to buffer their output before writing it to a pipe or file. So the
pipe is working fine, the problem is that the program never even wrote the data
to the pipe!</p>
<p>This is for performance reasons: writing all output immediately as soon as you
can uses more system calls, so it&rsquo;s more efficient to save up data until you
have 8KB or so of data to write (or until the program exits) and THEN write it
to the pipe.</p>
<p>In this example:</p>
<pre><code>tail -f /some/log/file | grep thing1 | grep thing2
</code></pre>
<p>the problem is that <code>grep thing1</code> is saving up all of its matches until it has
8KB of data to write, which might literally never happen.</p>
<h3 id="programs-don-t-buffer-when-writing-to-a-terminal">programs don&rsquo;t buffer when writing to a terminal</h3>
<p>Part of why I found this so disorienting is that <code>tail -f file | grep thing</code>
will work totally fine, but then when you add the second <code>grep</code>, it stops
working!! The reason for this is that the way <code>grep</code> handles buffering depends
on whether it&rsquo;s writing to a terminal or not.</p>
<p>Here&rsquo;s how <code>grep</code> (and many other programs) decides to buffer its output:</p>
<ul>
<li>Check if stdout is a terminal or not using the <code>isatty</code> function
<ul>
<li>If it&rsquo;s a terminal, use line buffering (print every line immediately as soon as you have it)</li>
<li>Otherwise, use &ldquo;block buffering&rdquo; &ndash; only print data if you have at least 8KB or so of data to print</li>
</ul>
</li>
</ul>
<p>So if <code>grep</code> is writing directly to your terminal then you&rsquo;ll see the line as
soon as it&rsquo;s printed, but if it&rsquo;s writing to a pipe, you won&rsquo;t.</p>
<p>Of course the buffer size isn&rsquo;t always 8KB for every program, it depends on the implementation. For <code>grep</code> the buffering is handled by libc, and libc&rsquo;s buffer size is
defined in the <code>BUFSIZ</code> variable. <a href="https://github.com/bminor/glibc/blob/c69e8cccaff8f2d89cee43202623b33e6ef5d24a/libio/stdio.h#L100">Here&rsquo;s where that&rsquo;s defined in glibc</a>.</p>
<p>(as an aside: &ldquo;programs do not use 8KB output buffers when writing to a
terminal&rdquo; isn&rsquo;t, like, a law of terminal physics, a program COULD use an 8KB
buffer when writing output to a terminal if it wanted, it would just be
extremely weird if it did that, I can&rsquo;t think of any program that behaves that
way)</p>
<h3 id="commands-that-buffer-commands-that-don-t">commands that buffer &amp; commands that don&rsquo;t</h3>
<p>One annoying thing about this buffering behaviour is that you kind of need to
remember which commands buffer their output when writing to a pipe.</p>
<p>Some commands that <strong>don&rsquo;t</strong> buffer their output:</p>
<ul>
<li>tail</li>
<li>cat</li>
<li>tee</li>
</ul>
<p>I think almost everything else will buffer output, especially if it&rsquo;s a command
where you&rsquo;re likely to be using it for batch processing. Here&rsquo;s a list of some
common commands that buffer their output when writing to a pipe, along with the
flag that disables block buffering.</p>
<ul>
<li>grep (<code>--line-buffered</code>)</li>
<li>sed (<code>-u</code>)</li>
<li>awk (there&rsquo;s a <code>fflush()</code> function)</li>
<li>tcpdump (<code>-l</code>)</li>
<li>jq (<code>-u</code>)</li>
<li>tr (<code>-u</code>)</li>
<li>cut (can&rsquo;t disable buffering)</li>
</ul>
<p>Those are all the ones I can think of, lots of unix commands (like <code>sort</code>) may
or may not buffer their output but it doesn&rsquo;t matter because <code>sort</code> can&rsquo;t do
anything until it finishes receiving input anyway.</p>
<p>Also I did my best to test both the Mac OS and GNU versions of these but there
are a lot of variations and I might have made some mistakes.</p>
<h3 id="programming-languages-where-the-default-print-statement-buffers">programming languages where the default &ldquo;print&rdquo; statement buffers</h3>
<p>Also, here are a few programming language where the default print statement
will buffer output when writing to a pipe, and some ways to disable buffering
if you want:</p>
<ul>
<li>C (disable with <code>setvbuf</code>)</li>
<li>Python (disable with <code>python -u</code>, or <code>PYTHONUNBUFFERED=1</code>, or <code>sys.stdout.reconfigure(line_buffering=False)</code>, or <code>print(x, flush=True)</code>)</li>
<li>Ruby (disable with <code>STDOUT.sync = true</code>)</li>
<li>Perl (disable with <code>$| = 1</code>)</li>
</ul>
<p>I assume that these languages are designed this way so that the default print
function will be fast when you&rsquo;re doing batch processing.</p>
<p>Also whether output is buffered or not might depend on how you print, for
example in C++ <code>cout &lt;&lt; &quot;hello\n&quot;</code> buffers when writing to a pipe but <code>cout &lt;&lt; &quot;hello&quot; &lt;&lt; endl</code> will flush its output.</p>
<h3 id="when-you-press-ctrl-c-on-a-pipe-the-contents-of-the-buffer-are-lost">when you press <code>Ctrl-C</code> on a pipe, the contents of the buffer are lost</h3>
<p>Let&rsquo;s say you&rsquo;re running this command as a hacky way to watch for DNS requests
to <code>example.com</code>, and you forgot to pass <code>-l</code> to tcpdump:</p>
<pre><code>sudo tcpdump -ni any port 53 | grep example.com
</code></pre>
<p>When you press <code>Ctrl-C</code>, what happens? In a magical perfect world, what I would
<em>want</em> to happen is for <code>tcpdump</code> to flush its buffer, <code>grep</code> would search for
<code>example.com</code>, and I would see all the output I missed.</p>
<p>But in the real world, what happens is that all the programs get killed and the
output in <code>tcpdump</code>&rsquo;s buffer is lost.</p>
<p>I think this problem is probably unavoidable &ndash; I spent a little time with
<code>strace</code> to see how this works and <code>grep</code> receives the <code>SIGINT</code> before
<code>tcpdump</code> anyway so even if <code>tcpdump</code> tried to flush its buffer <code>grep</code> would
already be dead.</p>
<small>
<p>After a little more investigation, there is a workaround: if you find
<code>tcpdump</code>&rsquo;s PID and <code>kill -TERM $PID</code>, then tcpdump will flush the buffer so
you can see the output. That&rsquo;s kind of a pain but I tested it and it seems to
work.</p>
</small>
<h3 id="redirecting-to-a-file-also-buffers">redirecting to a file also buffers</h3>
<p>It&rsquo;s not just pipes, this will also buffer:</p>
<pre><code>sudo tcpdump -ni any port 53 &gt; output.txt
</code></pre>
<p>Redirecting to a file doesn&rsquo;t have the same &ldquo;<code>Ctrl-C</code> will totally destroy the
contents of the buffer&rdquo; problem though &ndash; in my experience it usually behaves
more like you&rsquo;d want, where the contents of the buffer get written to the file
before the program exits. I&rsquo;m not 100% sure whether this is something you can
always rely on or not.</p>
<h3 id="a-bunch-of-potential-ways-to-avoid-buffering">a bunch of potential ways to avoid buffering</h3>
<p>Okay, let&rsquo;s talk solutions. Let&rsquo;s say you&rsquo;ve run this command or s</p>
<pre><code>tail -f /some/log/file | grep thing1 | grep thing2
</code></pre>
<p>I asked people on Mastodon how they would solve this in practice and there were
5 basic approaches. Here they are:</p>
<h4 id="solution-1-run-a-program-that-finishes-quickly">solution 1: run a program that finishes quickly</h4>
<p>Historically my solution to this has been to just avoid the &ldquo;command writing to
pipe slowly&rdquo; situation completely and instead run a program that will finish quickly
like this:</p>
<pre><code>cat /some/log/file | grep thing1 | grep thing2 | tail
</code></pre>
<p>This doesn&rsquo;t do the same thing as the original command but it does mean that
you get to avoid thinking about these weird buffering issues.</p>
<p>(you could also do <code>grep thing1 /some/log/file</code> but I often prefer to use an
&ldquo;unnecessary&rdquo; <code>cat</code>)</p>
<h4 id="solution-2-remember-the-line-buffer-flag-to-grep">solution 2: remember the &ldquo;line buffer&rdquo; flag to grep</h4>
<p>You could remember that grep has a flag to avoid buffering and pass it like this:</p>
<pre><code>tail -f /some/log/file | grep --line-buffered thing1 | grep thing2
</code></pre>
<h4 id="solution-3-use-awk">solution 3: use awk</h4>
<p>Some people said that if they&rsquo;re specifically dealing with a multiple greps
situation, they&rsquo;ll rewrite it to use a single <code>awk</code> instead, like this:</p>
<pre><code>tail -f /some/log/file |  awk '/thing1/ &amp;&amp; /thing2/'
</code></pre>
<p>Or you would write a more complicated <code>grep</code>, like this:</p>
<pre><code>tail -f /some/log/file |  grep -E 'thing1.*thing2'
</code></pre>
<p>(<code>awk</code> also buffers, so for this to work you&rsquo;ll want <code>awk</code> to be the last command in the pipeline)</p>
<h4 id="solution-4-use-stdbuf">solution 4: use <code>stdbuf</code></h4>
<p><code>stdbuf</code> uses LD_PRELOAD to turn off libc&rsquo;s buffering, and you can use it to turn off output buffering like this:</p>
<pre><code>tail -f /some/log/file | stdbuf -o0 grep thing1 | grep thing2
</code></pre>
<p>Like any <code>LD_PRELOAD</code> solution it&rsquo;s a bit unreliable &ndash; it doesn&rsquo;t work on
static binaries, I think won&rsquo;t work if the program isn&rsquo;t using libc&rsquo;s
buffering, and doesn&rsquo;t always work on Mac OS. Harry Marr has a really nice <a href="https://hmarr.com/blog/how-stdbuf-works/">How stdbuf works</a> post.</p>
<h4 id="solution-5-use-unbuffer">solution 5: use <code>unbuffer</code></h4>
<p><code>unbuffer program</code> will force the program&rsquo;s output to be a TTY, which means
that it&rsquo;ll behave the way it normally would on a TTY (less buffering, colour
output, etc). You could use it in this example like this:</p>
<pre><code>tail -f /some/log/file | unbuffer grep thing1 | grep thing2
</code></pre>
<p>Unlike <code>stdbuf</code> it will always work, though it might have unwanted side
effects, for example <code>grep thing1</code>&rsquo;s will also colour matches.</p>
<p>If you want to install unbuffer, it&rsquo;s in the <code>expect</code> package.</p>
<h3 id="that-s-all-the-solutions-i-know-about">that&rsquo;s all the solutions I know about!</h3>
<p>It&rsquo;s a bit hard for me to say which one is &ldquo;best&rdquo;, I think personally I&rsquo;m
mostly likely to use <code>unbuffer</code> because I know it&rsquo;s always going to work.</p>
<p>If I learn about more solutions I&rsquo;ll try to add them to this post.</p>
<h3 id="i-m-not-really-sure-how-often-this-comes-up">I&rsquo;m not really sure how often this comes up</h3>
<p>I think it&rsquo;s not very common for me to have a program that slowly trickles data
into a pipe like this, normally if I&rsquo;m using a pipe a bunch of data gets
written very quickly, processed by everything in the pipeline, and then
everything exits. The only examples I can come up with right now are:</p>
<ul>
<li>tcpdump</li>
<li><code>tail -f</code></li>
<li>watching log files in a different way like with <code>kubectl logs</code></li>
<li>the output of a slow computation</li>
</ul>
<h3 id="what-if-there-were-an-environment-variable-to-disable-buffering">what if there were an environment variable to disable buffering?</h3>
<p>I think it would be cool if there were a standard environment variable to turn
off buffering, like <code>PYTHONUNBUFFERED</code> in Python. I got this idea from a
<a href="https://blog.plover.com/Unix/stdio-buffering.html">couple</a> of <a href="https://blog.plover.com/Unix/stdio-buffering-2.html">blog posts</a> by Mark Dominus
in 2018. Maybe <code>NO_BUFFER</code> like <a href="https://no-color.org/">NO_COLOR</a>?</p>
<p>The design seems tricky to get right; Mark points out that NETBSD has <a href="https://man.netbsd.org/setbuf.3">environment variables called <code>STDBUF</code>, <code>STDBUF1</code>, etc</a> which gives you a
ton of control over buffering but I imagine most developers don&rsquo;t want to
implement many different environment variables to handle a relatively minor
edge case.</p>
<p>I&rsquo;m also curious about whether there are any programs that just automatically
flush their output buffers after some period of time (like 1 second). It feels
like it would be nice in theory but I can&rsquo;t think of any program that does that
so I imagine there are some downsides.</p>
<h3 id="stuff-i-left-out">stuff I left out</h3>
<p>Some things I didn&rsquo;t talk about in this post since these posts have been
getting pretty long recently and seriously does anyone REALLY want to read 3000
words about buffering?</p>
<ul>
<li>the difference between line buffering and having totally unbuffered output</li>
<li>how buffering to stderr is different from buffering to stdout</li>
<li>this post is only about buffering that happens <strong>inside the program</strong>, your
operating system&rsquo;s TTY driver also does a little bit of buffering sometimes</li>
<li>other reasons you might need to flush your output other than &ldquo;you&rsquo;re writing
to a pipe&rdquo;</li>
</ul>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Importing a frontend Javascript library without a build system]]></title>
    <link href="https://jvns.ca/blog/2024/11/18/how-to-import-a-javascript-library/"/>
    <updated>2024-11-18T09:35:42+00:00</updated>
    <id>https://jvns.ca/blog/2024/11/18/how-to-import-a-javascript-library/</id>
    <content type="html"><![CDATA[<p>I like writing Javascript <a href="https://jvns.ca/blog/2023/02/16/writing-javascript-without-a-build-system/">without a build system</a>
and for the millionth time yesterday I ran into a problem where I needed to
figure out how to import a Javascript library in my code without using a build
system, and it took FOREVER to figure out how to import it because the
library&rsquo;s setup instructions assume that you&rsquo;re using a build system.</p>
<p>Luckily at this point I&rsquo;ve mostly learned how to navigate this situation and
either successfully use the library or decide it&rsquo;s too difficult and switch to
a different library, so here&rsquo;s the guide I wish I had to importing Javascript
libraries years ago.</p>
<p>I&rsquo;m only going to talk about using Javacript libraries on the frontend, and
only about how to use them in a no-build-system setup.</p>
<p>In this post I&rsquo;m going to talk about:</p>
<ol>
<li>the three main types of Javascript files a library might provide (ES Modules, the &ldquo;classic&rdquo; global variable kind, and CommonJS)</li>
<li>how to figure out which types of files a Javascript library includes in its build</li>
<li>ways to import each type of file in your code</li>
</ol>
<h3 id="the-three-kinds-of-javascript-files">the three kinds of Javascript files</h3>
<p>There are 3 basic types of Javascript files a library can provide:</p>
<ol>
<li>the &ldquo;classic&rdquo; type of file that defines a global variable. This is the kind
of file that you can just <code>&lt;script src&gt;</code> and it&rsquo;ll Just Work. Great if you
can get it but not always available</li>
<li>an ES module (which may or may not depend on other files, we&rsquo;ll get to that)</li>
<li>a &ldquo;CommonJS&rdquo; module. This is for Node, you can&rsquo;t use it in a browser at all
without using a build system.</li>
</ol>
<p>I&rsquo;m not sure if there&rsquo;s a better name for the &ldquo;classic&rdquo; type but I&rsquo;m just going
to call it &ldquo;classic&rdquo;. Also there&rsquo;s a type called &ldquo;AMD&rdquo; but I&rsquo;m not sure how
relevant it is in 2024.</p>
<p>Now that we know the 3 types of files, let&rsquo;s talk about how to figure out which
of these the library actually provides!</p>
<h3 id="where-to-find-the-files-the-npm-build">where to find the files: the NPM build</h3>
<p>Every Javascript library has a <strong>build</strong> which it uploads to NPM. You might be
thinking (like I did originally) &ndash; Julia! The whole POINT is that we&rsquo;re not
using Node to build our library! Why are we talking about NPM?</p>
<p>But if you&rsquo;re using a link from a CDN like <a href="https://cdnjs.cloudflare.com/ajax/libs/Chart.js/4.4.1/chart.umd.min.js">https://cdnjs.cloudflare.com/ajax/libs/Chart.js/4.4.1/chart.umd.min.js</a>,
you&rsquo;re still using the NPM build! All the files on the CDNs originally come
from NPM.</p>
<p>Because of this, I sometimes like to <code>npm install</code> the library even if I&rsquo;m not
planning to use Node to build my library at all &ndash; I&rsquo;ll just create a new temp
folder, <code>npm install</code> there, and then delete it when I&rsquo;m done. I like being able to poke
around in the files in the NPM build on my filesystem, because then I can be
100% sure that I&rsquo;m seeing everything that the library is making available in
its build and that the CDN isn&rsquo;t hiding something from me.</p>
<p>So let&rsquo;s <code>npm install</code> a few libraries and try to figure out what types of
Javascript files they provide in their builds!</p>
<h3 id="example-library-1-chart-js">example library 1: chart.js</h3>
<p>First let&rsquo;s look inside <a href="https://www.chartjs.org">Chart.js</a>, a plotting library.</p>
<pre><code>$ cd /tmp/whatever
$ npm install chart.js
$ cd node_modules/chart.js/dist
$ ls *.*js
chart.cjs  chart.js  chart.umd.js  helpers.cjs  helpers.js
</code></pre>
<p>This library seems to have 3 basic options:</p>
<p><strong>option 1:</strong> <code>chart.cjs</code>. The <code>.cjs</code> suffix tells me that this is a <strong>CommonJS
file</strong>, for using in Node. This means it&rsquo;s impossible to use it directly in the
browser without some kind of build step.</p>
<p><strong>option 2:<code>chart.js</code></strong>. The <code>.js</code> suffix by itself doesn&rsquo;t tell us what kind of
file it is, but if I open it up, I see <code>import '@kurkle/color';</code> which is an
immediate sign that this is an ES module &ndash; the <code>import ...</code> syntax is ES
module syntax.</p>
<p><strong>option 3: <code>chart.umd.js</code></strong>. &ldquo;UMD&rdquo; stands for &ldquo;Universal Module Definition&rdquo;,
which I think means that you can use this file either with a basic <code>&lt;script src&gt;</code>, CommonJS,
or some third thing called AMD that I don&rsquo;t understand.</p>
<h3 id="how-to-use-a-umd-file">how to use a UMD file</h3>
<p>When I was using Chart.js I picked Option 3. I just needed to add this to my
code:</p>
<pre><code>&lt;script src=&quot;./chart.umd.js&quot;&gt; &lt;/script&gt;
</code></pre>
<p>and then I could use the library with the global <code>Chart</code> environment variable.
Couldn&rsquo;t be easier. I just copied <code>chart.umd.js</code> into my Git repository so that
I didn&rsquo;t have to worry about using NPM or the CDNs going down or anything.</p>
<h3 id="the-build-files-aren-t-always-in-the-dist-directory">the build files aren&rsquo;t always in the <code>dist</code> directory</h3>
<p>A lot of libraries will put their build in the <code>dist</code> directory, but not
always! The build files&rsquo; location is specified in the library&rsquo;s <code>package.json</code>.</p>
<p>For example here&rsquo;s an excerpt from Chart.js&rsquo;s <code>package.json</code>.</p>
<pre><code>  &quot;jsdelivr&quot;: &quot;./dist/chart.umd.js&quot;,
  &quot;unpkg&quot;: &quot;./dist/chart.umd.js&quot;,
  &quot;main&quot;: &quot;./dist/chart.cjs&quot;,
  &quot;module&quot;: &quot;./dist/chart.js&quot;,
</code></pre>
<p>I think this is saying that if you want to use an ES Module (<code>module</code>) you
should use <code>dist/chart.js</code>, but the jsDelivr and unpkg CDNs should use
<code>./dist/chart.umd.js</code>. I guess <code>main</code> is for Node.</p>
<p><code>chart.js</code>&rsquo;s <code>package.json</code> also says <code>&quot;type&quot;: &quot;module&quot;</code>, which <a href="https://nodejs.org/api/packages.html#modules-packages">according to this documentation</a>
tells Node to treat files as ES modules by default. I think it doesn&rsquo;t tell us
specifically which files are ES modules and which ones aren&rsquo;t but it does tell
us that <em>something</em> in there is an ES module.</p>
<h3 id="example-library-2-atcute-oauth-browser-client">example library 2: <code>@atcute/oauth-browser-client</code></h3>
<p><a href="https://github.com/mary-ext/atcute/tree/trunk/packages/oauth/browser-client"><code>@atcute/oauth-browser-client</code></a>
is a library for logging into Bluesky with OAuth in the browser.</p>
<p>Let&rsquo;s see what kinds of Javascript files it provides in its build!</p>
<pre><code>$ npm install @atcute/oauth-browser-client
$ cd node_modules/@atcute/oauth-browser-client/dist
$ ls *js
constants.js  dpop.js  environment.js  errors.js  index.js  resolvers.js
</code></pre>
<p>It seems like the only plausible root file in here is <code>index.js</code>, which looks
something like this:</p>
<pre><code>export { configureOAuth } from './environment.js';
export * from './errors.js';
export * from './resolvers.js';
</code></pre>
<p>This <code>export</code> syntax means it&rsquo;s an <strong>ES module</strong>. That means we can use it in
the browser without a build step! Let&rsquo;s see how to do that.</p>
<h3 id="how-to-use-an-es-module-with-importmaps">how to use an ES module with importmaps</h3>
<p>Using an ES module isn&rsquo;t an easy as just adding a <code>&lt;script src=&quot;whatever.js&quot;&gt;</code>. Instead, if
the ES module has dependencies (like <code>@atcute/oauth-browser-client</code> does) the
steps are:</p>
<ol>
<li>Set up an import map in your HTML</li>
<li>Put import statements like <code>import { configureOAuth } from '@atcute/oauth-browser-client';</code> in your JS code</li>
<li>Include your JS code in your HTML liek this: <code>&lt;script type=&quot;module&quot; src=&quot;YOURSCRIPT.js&quot;&gt;&lt;/script&gt;</code></li>
</ol>
<p>The reason we need an import map instead of just doing something like <code>import { BrowserOAuthClient } from &quot;./oauth-client-browser.js&quot;</code> is that internally the module has more import statements like <code>import {something} from @atcute/client</code>, and we need to tell the browser where to get the code for <code>@atcute/client</code> and all of its other dependencies.</p>
<p>Here&rsquo;s what the importmap I used looks like for <code>@atcute/oauth-browser-client</code>:</p>
<pre><code>&lt;script type=&quot;importmap&quot;&gt;
{
  &quot;imports&quot;: {
    &quot;nanoid&quot;: &quot;./node_modules/nanoid/bin/dist/index.js&quot;,
    &quot;nanoid/non-secure&quot;: &quot;./node_modules/nanoid/non-secure/index.js&quot;,
    &quot;nanoid/url-alphabet&quot;: &quot;./node_modules/nanoid/url-alphabet/dist/index.js&quot;,
    &quot;@atcute/oauth-browser-client&quot;: &quot;./node_modules/@atcute/oauth-browser-client/dist/index.js&quot;,
    &quot;@atcute/client&quot;: &quot;./node_modules/@atcute/client/dist/index.js&quot;,
    &quot;@atcute/client/utils/did&quot;: &quot;./node_modules/@atcute/client/dist/utils/did.js&quot;
  }
}
&lt;/script&gt;
</code></pre>
<p>Getting these import maps to work is pretty fiddly, I feel like there must be a
tool to generate them automatically but I haven&rsquo;t found one yet. It&rsquo;s definitely possible to
write a script that automatically generates the importmaps using <a href="https://esbuild.github.io/api/#metafile">esbuild&rsquo;s metafile</a> but I haven&rsquo;t done that and
maybe there&rsquo;s a better way.</p>
<p>I decided to set up importmaps yesterday to get
<a href="https://github.com/jvns/bsky-oauth-example">github.com/jvns/bsky-oauth-example</a>
to work, so there&rsquo;s some example code in that repo.</p>
<p>Also someone pointed me to Simon Willison&rsquo;s
<a href="https://simonwillison.net/2023/May/2/download-esm/">download-esm</a>, which will
download an ES module and rewrite the imports to point to the JS files directly
so that you don&rsquo;t need importmaps. I haven&rsquo;t tried it yet but it seems like a
great idea.</p>
<h3 id="problems-with-importmaps-too-many-files">problems with importmaps: too many files</h3>
<p>I did run into some problems with using importmaps in the browser though &ndash; it
needed to download dozens of Javascript files to load my site, and my webserver
in development couldn&rsquo;t keep up for some reason. I kept seeing files fail to
load randomly and then had to reload the page and hope that they would succeed
this time.</p>
<p>It wasn&rsquo;t an issue anymore when I deployed my site to production, so I guess it
was a problem with my local dev environment.</p>
<p>Also one slightly annoying thing about ES modules in general is that you need to
be running a webserver to use them, I&rsquo;m sure this is for a good reason but it&rsquo;s
easier when you can just open your <code>index.html</code> file without starting a
webserver.</p>
<p>Because of the &ldquo;too many files&rdquo; thing I think actually using ES modules with
importmaps in this way isn&rsquo;t actually that appealing to me, but it&rsquo;s good to
know it&rsquo;s possible.</p>
<h3 id="how-to-use-an-es-module-without-importmaps">how to use an ES module without importmaps</h3>
<p>If the ES module doesn&rsquo;t have dependencies then it&rsquo;s even easier &ndash; you don&rsquo;t
need the importmaps! You can just:</p>
<ul>
<li>put <code>&lt;script type=&quot;module&quot; src=&quot;YOURCODE.js&quot;&gt;&lt;/script&gt;</code> in your HTML. The <code>type=&quot;module&quot;</code> is important.</li>
<li>put <code>import {whatever} from &quot;https://example.com/whatever.js&quot;</code> in <code>YOURCODE.js</code></li>
</ul>
<h3 id="alternative-use-esbuild">alternative: use esbuild</h3>
<p>If you don&rsquo;t want to use importmaps, you can also use a build system like <a href="https://esbuild.github.io/">esbuild</a>. I talked about how to do
that in <a href="https://jvns.ca/blog/2021/11/15/esbuild-vue/">Some notes on using esbuild</a>, but this blog post is
about ways to avoid build systems completely so I&rsquo;m not going to talk about
that option here. I do still like esbuild though and I think it&rsquo;s a good option
in this case.</p>
<h3 id="what-s-the-browser-support-for-importmaps">what&rsquo;s the browser support for importmaps?</h3>
<p><a href="https://caniuse.com/import-maps">CanIUse</a> says that importmaps are in
&ldquo;Baseline 2023: newly available across major browsers&rdquo; so my sense is that in
2024 that&rsquo;s still maybe a little bit too new? I think I would use importmaps
for some fun experimental code that I only wanted like myself and 12 people to
use, but if I wanted my code to be more widely usable I&rsquo;d use <code>esbuild</code> instead.</p>
<h3 id="example-library-3-atproto-oauth-client-browser">example library 3: <code>@atproto/oauth-client-browser</code></h3>
<p>Let&rsquo;s look at one final example library! This is a different Bluesky auth
library than <code>@atcute/oauth-browser-client</code>.</p>
<pre><code>$ npm install @atproto/oauth-client-browser
$ cd node_modules/@atproto/oauth-client-browser/dist
$ ls *js
browser-oauth-client.js  browser-oauth-database.js  browser-runtime-implementation.js  errors.js  index.js  indexed-db-store.js  util.js
</code></pre>
<p>Again, it seems like only real candidate file here is <code>index.js</code>. But this is a
different situation from the previous example library! Let&rsquo;s take a look at
<code>index.js</code>:</p>
<p>There&rsquo;s a bunch of stuff like this in <code>index.js</code>:</p>
<pre><code>__exportStar(require(&quot;@atproto/oauth-client&quot;), exports);
__exportStar(require(&quot;./browser-oauth-client.js&quot;), exports);
__exportStar(require(&quot;./errors.js&quot;), exports);
var util_js_1 = require(&quot;./util.js&quot;);
</code></pre>
<p>This <code>require()</code> syntax is CommonJS syntax, which means that we can&rsquo;t use this
file in the browser at all, we need to use some kind of build step, and
ESBuild won&rsquo;t work either.</p>
<p>Also in this library&rsquo;s <code>package.json</code> it says <code>&quot;type&quot;: &quot;commonjs&quot;</code> which is
another way to tell it&rsquo;s CommonJS.</p>
<h3 id="how-to-use-a-commonjs-module-with-esm-sh-https-esm-sh">how to use a CommonJS module with <a href="https://esm.sh">esm.sh</a></h3>
<p>Originally I thought it was impossible to use CommonJS modules without learning
a build system, but then someone Bluesky told me about
<a href="https://esm.sh">esm.sh</a>! It&rsquo;s a CDN that will translate anything into an ES
Module. <a href="https://www.skypack.dev/">skypack.dev</a> does something similar, I&rsquo;m not
sure what the difference is but one person mentioned that if one doesn&rsquo;t work
sometimes they&rsquo;ll try the other one.</p>
<p>For <code>@atproto/oauth-client-browser</code> using it seems pretty simple, I just need to put this in my HTML:</p>
<pre><code>&lt;script type=&quot;module&quot; src=&quot;script.js&quot;&gt; &lt;/script&gt;
</code></pre>
<p>and then put this in <code>script.js</code>.</p>
<pre><code>import { BrowserOAuthClient } from &quot;https://esm.sh/@atproto/oauth-client-browser@0.3.0&quot;
</code></pre>
<p>It seems to Just Work, which is cool! Of course this is still sort of using a
build system &ndash; it&rsquo;s just that esm.sh is running the build instead of me. My
main concerns with this approach are:</p>
<ul>
<li>I don&rsquo;t really trust CDNs to keep working forever &ndash; usually I like to copy dependencies into my repository so that they don&rsquo;t go away for some reason in the future.</li>
<li>I&rsquo;ve heard of some issues with CDNs having security compromises which scares me. Also I don&rsquo;t</li>
<li>I don&rsquo;t really understand what esm.sh is doing and</li>
</ul>
<h3 id="esbuild-can-also-convert-commonjs-modules-into-es-modules">esbuild can also convert CommonJS modules into ES modules</h3>
<p>I also learned that you can also use <code>esbuild</code> to convert a CommonJS module
into an ES module, though there are some limitations &ndash; the <code>import { BrowserOAuthClient } from</code> syntax doesn&rsquo;t work. Here&rsquo;s a <a href="https://github.com/evanw/esbuild/issues/442">github issue about that</a>.</p>
<p>I think the <code>esbuild</code> approach is probably more appealing to me than the
<code>esm.sh</code> approach because it&rsquo;s a tool that I already have on my computer so I
trust it more. I haven&rsquo;t experimented with this much yet though.</p>
<h3 id="summary-of-the-three-types-of-files">summary of the three types of files</h3>
<p>Here&rsquo;s a summary of the three types of JS files you might encounter, options
for how to use them, and how to identify them.</p>
<p>Unhelpfully a <code>.js</code> or <code>.min.js</code> file extension could be any of these 3
options, so if the file is <code>something.js</code> you need to do more detective work to
figure out what you&rsquo;re dealing with.</p>
<ol>
<li><strong>&ldquo;classic&rdquo; JS files</strong>
<ul>
<li><strong>How to use it:</strong>: <code>&lt;script src=&quot;whatever.js&quot;&gt;&lt;/script&gt;</code></li>
<li><strong>Ways to identify it:</strong>
<ul>
<li>The website has a big friendly banner in its setup instructions saying &ldquo;Use this with a CDN!&rdquo;  or something</li>
<li>A <code>.umd.js</code> extension</li>
<li>Just try to put it in a <code>&lt;script src=...</code> tag and see if it works</li>
</ul>
</li>
</ul>
</li>
<li><strong>ES Modules</strong>
<ul>
<li><strong>Ways to use it:</strong>
<ul>
<li>If there are no dependencies, just <code>import {whatever} from &quot;./my-module.js&quot;</code> directly in your code</li>
<li>If there are dependencies, create an importmap and <code>import {whatever} from &quot;my-module&quot;</code>
<ul>
<li>or use <a href="https://simonwillison.net/2023/May/2/download-esm/">download-esm</a> to remove the need for an importmap</li>
</ul>
</li>
<li>Use <a href="https://esbuild.github.io/">esbuild</a> or any ES Module bundler</li>
</ul>
</li>
<li><strong>Ways to identify it:</strong>
<ul>
<li>Look for an <code>import </code> or <code>export </code> statement. (not <code>module.exports = ...</code>, that&rsquo;s CommonJS)</li>
<li>An <code>.mjs</code> extension</li>
<li>maybe <code>&quot;type&quot;: &quot;module&quot;</code> in <code>package.json</code> (though it&rsquo;s not clear to me which file exactly this refers to)</li>
</ul>
</li>
</ul>
</li>
<li><strong>CommonJS Modules</strong>
<ul>
<li><strong>Ways to use it:</strong>
<ul>
<li>Use <a href="https://esm.sh/#docs">https://esm.sh</a> to convert it into an ES module, like <code>https://esm.sh/@atproto/oauth-client-browser@0.3.0</code></li>
<li>Use a build somehow (??)</li>
</ul>
</li>
<li><strong>Ways to identify it:</strong>
<ul>
<li>Look for <code>require()</code> or <code>module.exports = ...</code> in the code</li>
<li>A <code>.cjs</code> extension</li>
<li>maybe <code>&quot;type&quot;: &quot;commonjs&quot;</code> in <code>package.json</code> (though it&rsquo;s not clear to me which file exactly this refers to)</li>
</ul>
</li>
</ul>
</li>
</ol>
<h3 id="it-s-really-nice-to-have-es-modules-standardized">it&rsquo;s really nice to have ES modules standardized</h3>
<p>The main difference between CommonJS modules and ES modules from my perspective
is that ES modules are actually a standard. This makes me feel a lot more
confident using them, because browsers commit to backwards compatibility for
web standards forever &ndash; if I write some code using ES modules today, I can
feel sure that it&rsquo;ll still work the same way in 15 years.</p>
<p>It also makes me feel better about using tooling like <code>esbuild</code> because even if
the esbuild project dies, because it&rsquo;s implementing a standard it feels likely
that there will be another similar tool in the future that I can replace it
with.</p>
<h3 id="the-js-community-has-built-a-lot-of-very-cool-tools">the JS community has built a lot of very cool tools</h3>
<p>A lot of the time when I talk about this stuff I get responses like &ldquo;I hate
javascript!!! it&rsquo;s the worst!!!&rdquo;. But my experience is that there are a lot of great tools for Javascript
(I just learned about <a href="https://esm.sh">https://esm.sh</a> yesterday which seems great! I love
esbuild!), and that if I take the time to learn how things works I can take
advantage of some of those tools and make my life a lot easier.</p>
<p>So the goal of this post is definitely not to complain about Javascript, it&rsquo;s
to understand the landscape so I can use the tooling in a way that feels good
to me.</p>
<h3 id="questions-i-still-have">questions I still have</h3>
<p>Here are some questions I still have, I&rsquo;ll add the answers into the post if I
learn the answer.</p>
<ul>
<li>Is there a tool that automatically generates importmaps for an ES Module that
I have set up locally? (apparently yes: <a href="https://jspm.org/getting-started">jspm</a>)</li>
<li>How can I convert a CommonJS module into an ES module on my computer, the way
<a href="https://esm.sh">https://esm.sh</a> does? (apparently esbuild can sort of do this, though <a href="https://github.com/evanw/esbuild/issues/442">named exports don&rsquo;t work</a>)</li>
<li>When people normally build CommonJS modules into regular JS code, what&rsquo;s code is
doing that? Obviously there are tools like webpack, rollup, esbuild, etc, but
do those tools all implement their own JS parsers/static analysis? How many
JS parsers are there out there?</li>
<li>Is there any way to bundle an ES module into a single file (like
<code>atcute-client.js</code>), but so that in the browser I can still import multiple
different paths from that file (like both <code>@atcute/client/lexicons</code> and
<code>@atcute/client</code>)?</li>
</ul>
<h3 id="all-the-tools">all the tools</h3>
<p>Here&rsquo;s a list of every tool we talked about in this post:</p>
<ul>
<li>Simon Willison&rsquo;s
<a href="https://simonwillison.net/2023/May/2/download-esm/">download-esm</a> which will
download an ES module and convert the imports to point at JS files so you
don&rsquo;t need an importmap</li>
<li><a href="esm.sh">https://esm.sh/</a> and <a href="https://www.skypack.dev/">skypack.dev</a></li>
<li><a href="https://esbuild.github.io/">esbuild</a></li>
<li><a href="https://jspm.org/getting-started">JSPM</a> can generate importmaps</li>
</ul>
<p>Writing this post has made me think that even though I usually don&rsquo;t want to
have a build that I run every time I update the project, I might be willing to
have a build step (using <code>download-esm</code> or something) that I run <strong>only once</strong>
when setting up the project and never run again except maybe if I&rsquo;m updating my
dependency versions.</p>
<h3 id="that-s-all">that&rsquo;s all!</h3>
<p>Thanks to <a href="https://polotek.net/">Marco Rogers</a> who taught me a lot of the things
in this post. I&rsquo;ve probably made some mistakes in this post and I&rsquo;d love to
know what they are &ndash; let me know on Bluesky or Mastodon!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[New microblog with TILs]]></title>
    <link href="https://jvns.ca/blog/2024/11/09/new-microblog/"/>
    <updated>2024-11-09T09:24:29+00:00</updated>
    <id>https://jvns.ca/blog/2024/11/09/new-microblog/</id>
    <content type="html"><![CDATA[<p>I added a new section to this site a couple weeks ago called
<a href="https://jvns.ca/til/">TIL</a> (&ldquo;today I learned&rdquo;).</p>
<h3 id="the-goal-save-interesting-tools-facts-i-posted-on-social-media">the goal: save interesting tools &amp; facts I posted on social media</h3>
<p>One kind of thing I like to post on Mastodon/Bluesky is &ldquo;hey, here&rsquo;s a cool
thing&rdquo;, like <a href="https://github.com/dbcli/litecli">the great SQLite repl litecli</a>, or
the fact that cross compiling in Go Just Works and it&rsquo;s amazing, or
<a href="https://www.latacora.com/blog/2018/04/03/cryptographic-right-answers/">cryptographic right answers</a>,
or <a href="https://diffdiff.net/">this great diff tool</a>. Usually I don&rsquo;t want to write
a whole blog post about those things because I really don&rsquo;t have much more to
say than &ldquo;hey this is useful!&rdquo;</p>
<p>It started to bother me that I didn&rsquo;t have anywhere to put those things: for
example recently I wanted to use <a href="https://diffdiff.net/">diffdiff</a> and I just
could not remember what it was called.</p>
<h3 id="the-solution-make-a-new-section-of-this-blog">the solution: make a new section of this blog</h3>
<p>So I quickly made a new folder called <a href="https://jvns.ca/til/">/til/</a>, added some
custom styling (I wanted to style the posts to look a little bit like a tweet),
made a little Rake task to help me create new posts quickly (<code>rake new_til</code>), and
set up a separate RSS Feed for it.</p>
<p>I think this new section of the blog might be more for myself than anything,
now when I forget the link to Cryptographic Right Answers I can hopefully look
it up on the TIL page. (you might think &ldquo;julia, why not use bookmarks??&rdquo; but I
have been failing to use bookmarks for my whole life and I don&rsquo;t see that
changing ever, putting things in public is for whatever reason much easier for
me)</p>
<p>So far it&rsquo;s been working, often I can actually just make a quick post in 2
minutes which was the goal.</p>
<h3 id="inspired-by-simon-willison-s-til-blog">inspired by Simon Willison&rsquo;s TIL blog</h3>
<p>My page is inspired by <a href="https://til.simonwillison.net/">Simon Willison&rsquo;s great TIL blog</a>, though my TIL posts are a lot shorter.</p>
<h3 id="i-don-t-necessarily-want-everything-to-be-archived">I don&rsquo;t necessarily want everything to be archived</h3>
<p>This came about because I spent a lot of time on Twitter, so I&rsquo;ve been thinking
about what I want to do about all of my tweets.</p>
<p>I keep reading the advice to &ldquo;POSSE&rdquo; (&ldquo;post on your own site, syndicate
elsewhere&rdquo;), and while I find the idea appealing in principle, for me part of
the appeal of social media is that it&rsquo;s a little bit ephemeral. I can
post polls or questions or observations or jokes and then they can just kind of
fade away as they become less relevant.</p>
<p>I find it a lot easier to identify specific categories of things that I actually
want to have on a Real Website That I Own:</p>
<ul>
<li>blog posts here!</li>
<li>comics at <a href="https://wizardzines.com/comics/">https://wizardzines.com/comics/</a>!</li>
<li>now TILs at <a href="https://jvns.ca/til/">https://jvns.ca/til/</a>)</li>
</ul>
<p>and then let everything else be kind of ephemeral.</p>
<p>I really believe in the advice to make email lists though &ndash; the first two
(blog posts &amp; comics) both have email lists and RSS feeds that people can
subscribe to if they want. I might add a quick summary of any TIL posts from
that week to the &ldquo;blog posts from this week&rdquo; mailing list.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ASCII control characters in my terminal]]></title>
    <link href="https://jvns.ca/blog/2024/10/31/ascii-control-characters/"/>
    <updated>2024-10-31T08:00:10+00:00</updated>
    <id>https://jvns.ca/blog/2024/10/31/ascii-control-characters/</id>
    <content type="html"><![CDATA[<p>Hello! I&rsquo;ve been thinking about the terminal a lot and yesterday I got curious
about all these &ldquo;control codes&rdquo;, like <code>Ctrl-A</code>, <code>Ctrl-C</code>, <code>Ctrl-W</code>, etc. What&rsquo;s
the deal with all of them?</p>
<h3 id="a-table-of-ascii-control-characters">a table of ASCII control characters</h3>
<p>Here&rsquo;s a table of all 33 ASCII control characters, and what they do on my
machine (on Mac OS), more or less. There are about a million caveats, but I&rsquo;ll talk about
what it means and all the problems with this diagram that I know about.</p>
<p><a href="https://jvns.ca/ascii.html"><img src="https://jvns.ca/images/ascii-control.png"></a></p>
<p>You can also view it <a href="https://jvns.ca/ascii.html">as an HTML page</a> (I just made it an image so
it would show up in RSS).</p>
<h3 id="different-kinds-of-codes-are-mixed-together">different kinds of codes are mixed together</h3>
<p>The first surprising thing about this diagram to me is that there are 33
control codes, split into (very roughly speaking) these categories:</p>
<ol>
<li>Codes that are handled by the operating system&rsquo;s terminal driver, for
example when the OS sees a <code>3</code> (<code>Ctrl-C</code>), it&rsquo;ll send a <code>SIGINT</code> signal to
the current program</li>
<li>Everything else is passed through to the application as-is and the
application can do whatever it wants with them. Some subcategories of
those:
<ul>
<li>Codes that correspond to a literal keypress of a key on your keyboard
(<code>Enter</code>, <code>Tab</code>, <code>Backspace</code>). For example when you press <code>Enter</code>, your
terminal gets sent <code>13</code>.</li>
<li>Codes used by <code>readline</code>: &ldquo;the application can do whatever it wants&rdquo;
often means &ldquo;it&rsquo;ll do more or less what the <code>readline</code> library does,
whether the application actually uses <code>readline</code> or not&rdquo;, so I&rsquo;ve
labelled a bunch of the codes that <code>readline</code> uses</li>
<li>Other codes, for example I think <code>Ctrl-X</code> has no standard meaning in the
terminal in general but emacs uses it very heavily</li>
</ul>
</li>
</ol>
<p>There&rsquo;s no real structure to which codes are in which categories, they&rsquo;re all
just kind of randomly scattered because this evolved organically.</p>
<p>(If you&rsquo;re curious about readline, I wrote more about readline in <a href="https://jvns.ca/blog/2024/07/08/readline/">entering text in the terminal is complicated</a>, and there are a lot of
<a href="https://github.com/chzyer/readline/blob/master/doc/shortcut.md">cheat sheets out there</a>)</p>
<h3 id="there-are-only-33-control-codes">there are only 33 control codes</h3>
<p>Something else that I find a little surprising is that are only 33 control codes &ndash;
A to Z, plus 7 more (<code>@, [, \, ], ^, _, ?</code>). This means that if you want to
have for example <code>Ctrl-1</code> as a keyboard shortcut in a terminal application,
that&rsquo;s not really meaningful &ndash; on my machine at least <code>Ctrl-1</code> is exactly the
same thing as just pressing <code>1</code>, <code>Ctrl-3</code> is the same as <code>Ctrl-[</code>, etc.</p>
<p>Also <code>Ctrl+Shift+C</code> isn&rsquo;t a control code &ndash; what it does depends on your
terminal emulator. On Linux <code>Ctrl-Shift-X</code> is often used by the terminal
emulator to copy or open a new tab or paste for example, it&rsquo;s not sent to the
TTY at all.</p>
<p>Also I use <code>Ctrl+Left Arrow</code> all the time, but that isn&rsquo;t a control code,
instead it sends an ANSI escape sequence (<code>ctrl-[[1;5D</code>) which is a different
thing which we absolutely do not have space for in this post.</p>
<p>This &ldquo;there are only 33 codes&rdquo; thing is totally different from how keyboard
shortcuts work in a GUI where you can have <code>Ctrl+KEY</code> for any key you want.</p>
<h3 id="the-official-ascii-names-aren-t-very-meaningful-to-me">the official ASCII names aren&rsquo;t very meaningful to me</h3>
<p>Each of these 33 control codes has a name in ASCII (for example <code>3</code> is <code>ETX</code>).
When all of these control codes were originally defined, they weren&rsquo;t being
used for computers or terminals at all, they were used for <a href="https://falsedoor.com/doc/ascii_evolution-of-character-codes.pdf">the telegraph machine</a>.
Telegraph machines aren&rsquo;t the same as UNIX terminals so a lot of the codes were repurposed to mean something else.</p>
<p>Personally I don&rsquo;t find these ASCII names very useful, because 50% of the time
the name in ASCII has no actual relationship to what that code does on UNIX
systems today. So it feels easier to just ignore the ASCII names completely
instead of trying to figure which ones still match their original meaning.</p>
<h3 id="it-s-hard-to-use-ctrl-m-as-a-keyboard-shortcut">It&rsquo;s hard to use Ctrl-M  as a keyboard shortcut</h3>
<p>Another thing that&rsquo;s a bit weird is that <code>Ctrl-M</code> is literally the same as
<code>Enter</code>, and <code>Ctrl-I</code> is the same as <code>Tab</code>, which makes it hard to use those two as keyboard shortcuts.</p>
<p>From some quick research, it seems like some folks do still use <code>Ctrl-I</code> and
<code>Ctrl-M</code> as keyboard shortcuts (<a href="https://github.com/tmux/tmux/issues/2705">here&rsquo;s an example</a>), but to do that
you need to configure your terminal emulator to treat them differently than the
default.</p>
<p>For me the main takeaway is that if I ever write a terminal application I
should avoid <code>Ctrl-I</code> and <code>Ctrl-M</code> as keyboard shortcuts in it.</p>
<h3 id="how-to-identify-what-control-codes-get-sent">how to identify what control codes get sent</h3>
<p>While writing this I needed to do a bunch of experimenting to digure out what
various key combinations did, so I wrote this Python script
<a href="https://gist.github.com/jvns/a2ea09dbfbe03cc75b7bfb381941c742">echo-key.py</a>
that will print them out.</p>
<p>There&rsquo;s probably a more official way but I appreciated having a script I could
customize.</p>
<h3 id="caveat-on-canonical-vs-noncanonical-mode">caveat: on canonical vs noncanonical mode</h3>
<p>Two of these codes (<code>Ctrl-W</code> and <code>Ctrl-U</code>) are labelled in the table as
&ldquo;handled by the OS&rdquo;, but actually they&rsquo;re not <strong>always</strong> handled by the OS, it
depends on whether the terminal is in &ldquo;canonical&rdquo; mode or in &ldquo;noncanonical mode&rdquo;.</p>
<p>In <a href="https://www.man7.org/linux/man-pages/man3/termios.3.html">canonical mode</a>,
programs only get input when you press <code>Enter</code> (and the OS is in charge of deleting characters when you press <code>Backspace</code> or <code>Ctrl-W</code>). But in noncanonical mode the program gets
input immediately when you press a key, and the <code>Ctrl-W</code> and <code>Ctrl-U</code> codes are passed through to the program to handle any way it wants.</p>
<p>Generally in noncanonical mode the program will handle <code>Ctrl-W</code> and <code>Ctrl-U</code>
similarly to how the OS does, but there are some small differences.</p>
<p>Some examples of programs that use canonical mode:</p>
<ul>
<li>probably pretty much any noninteractive program, like <code>grep</code> or <code>cat</code></li>
<li><code>git</code>, I think</li>
</ul>
<p>Examples of programs that use noncanonical mode:</p>
<ul>
<li><code>python3</code>, <code>irb</code> and other REPLs</li>
<li>your shell</li>
<li>any full screen TUI like <code>less</code> or <code>vim</code></li>
</ul>
<h3 id="caveat-all-of-the-os-terminal-driver-codes-are-configurable-with-stty">caveat: all of the &ldquo;OS terminal driver&rdquo; codes are configurable with <code>stty</code></h3>
<p>I said that <code>Ctrl-C</code> sends <code>SIGINT</code> but technically this is not necessarily
true, if you really want to you can remap all of the codes labelled &ldquo;OS
terminal driver&rdquo;, plus Backspace, using a tool called <code>stty</code>, and you can view
the mappings with <code>stty -a</code>.</p>
<p>Here are the mappings on my machine right now:</p>
<pre><code>$ stty -a
cchars: discard = ^O; dsusp = ^Y; eof = ^D; eol = &lt;undef&gt;;
	eol2 = &lt;undef&gt;; erase = ^?; intr = ^C; kill = ^U; lnext = ^V;
	min = 1; quit = ^\; reprint = ^R; start = ^Q; status = ^T;
	stop = ^S; susp = ^Z; time = 0; werase = ^W;
</code></pre>
<p>I have personally never remapped any of these and I cannot imagine a reason I
would (I think it would be a recipe for confusion and disaster for me), but I
<a href="TODO">asked on Mastodon</a> and people said the most common reasons they used
<code>stty</code> were:</p>
<ul>
<li>fix a broken terminal with <code>stty sane</code></li>
<li>set <code>stty erase ^H</code> to change how Backspace works</li>
<li>set <code>stty ixoff</code></li>
<li>some people even map <code>SIGINT</code> to a different key, like their <code>DELETE</code> key</li>
</ul>
<h3 id="caveat-on-signals">caveat: on signals</h3>
<p>Two signals caveats:</p>
<ol>
<li>If the <code>ISIG</code> terminal mode is turned off, then the OS won&rsquo;t send signals. For example <code>vim</code> turns off <code>ISIG</code></li>
<li>Apparently on BSDs, there&rsquo;s an extra control code (<code>Ctrl-T</code>) which sends <code>SIGINFO</code></li>
</ol>
<p>You can see which terminal modes a program is setting using <code>strace</code> like this,
terminal modes are set with the <code>ioctl</code> system call:</p>
<pre><code>$ strace -tt -o out  vim
$ grep ioctl out | grep SET
</code></pre>
<p>here are the modes <code>vim</code> sets when it starts (<code>ISIG</code> and <code>ICANON</code> are
missing!):</p>
<pre><code>17:43:36.670636 ioctl(0, TCSETS, {c_iflag=IXANY|IMAXBEL|IUTF8,
c_oflag=NL0|CR0|TAB0|BS0|VT0|FF0|OPOST, c_cflag=B38400|CS8|CREAD,
c_lflag=ECHOK|ECHOCTL|ECHOKE|PENDIN, ...}) = 0
</code></pre>
<p>and it resets the modes when it exits:</p>
<pre><code>17:43:38.027284 ioctl(0, TCSETS, {c_iflag=ICRNL|IXANY|IMAXBEL|IUTF8,
c_oflag=NL0|CR0|TAB0|BS0|VT0|FF0|OPOST|ONLCR, c_cflag=B38400|CS8|CREAD,
c_lflag=ISIG|ICANON|ECHO|ECHOE|ECHOK|IEXTEN|ECHOCTL|ECHOKE|PENDIN, ...}) = 0
</code></pre>
<p>I think the specific combination of modes vim is using here might be called
&ldquo;raw mode&rdquo;, <a href="https://linux.die.net/man/3/cfmakeraw">man cfmakeraw</a> talks about
that.</p>
<h3 id="there-are-a-lot-of-conflicts">there are a lot of conflicts</h3>
<p>Related to &ldquo;there are only 33 codes&rdquo;, there are a lot of conflicts where
different parts of the system want to use the same code for different things,
for example by default <code>Ctrl-S</code> will freeze your screen, but if you turn that
off then <code>readline</code> will use <code>Ctrl-S</code> to do a forward search.</p>
<p>Another example is that on my machine sometimes <code>Ctrl-T</code> will send <code>SIGINFO</code>
and sometimes it&rsquo;ll transpose 2 characters and sometimes it&rsquo;ll do something
completely different depending on:</p>
<ul>
<li>whether the program has <code>ISIG</code> set</li>
<li>whether the program uses <code>readline</code> / imitates readline&rsquo;s behaviour</li>
</ul>
<h3 id="caveat-on-backspace-and-other-backspace">caveat: on &ldquo;backspace&rdquo; and &ldquo;other backspace&rdquo;</h3>
<p>In this diagram I&rsquo;ve labelled code 127 as &ldquo;backspace&rdquo; and 8 as &ldquo;other
backspace&rdquo;. Uh, what?</p>
<p>I think this was the single biggest topic of discussion in the replies on Mastodon &ndash; apparently there&rsquo;s a LOT of history to this and I&rsquo;d never heard of any of it before.</p>
<p>First, here&rsquo;s how it works on my machine:</p>
<ol>
<li>I press the <code>Backspace</code> key</li>
<li>The TTY gets sent the byte <code>127</code>, which is called <code>DEL</code> in ASCII</li>
<li>the OS terminal driver and readline both have <code>127</code> mapped to &ldquo;backspace&rdquo; (so it works both in canonical mode and noncanonical mode)</li>
<li>The previous character gets deleted</li>
</ol>
<p>If I press <code>Ctrl+H</code>, it has the same effect as <code>Backspace</code> if I&rsquo;m using
readline, but in a program without readline support (like <code>cat</code> for instance),
it just prints out <code>^H</code>.</p>
<p>Apparently Step 2 above is different for some folks &ndash; their <code>Backspace</code> key sends
the byte <code>8</code> instead of <code>127</code>, and so if they want Backspace to work then they
need to configure the OS (using <code>stty</code>) to set <code>erase = ^H</code>.</p>
<p>There&rsquo;s an incredible <a href="https://www.debian.org/doc/debian-policy/ch-opersys.html#keyboard-configuration">section of the Debian Policy Manual on keyboard configuration</a>
that describes how <code>Delete</code> and <code>Backspace</code> should work according to Debian
policy, which seems very similar to how it works on my Mac today.  My
understanding (via <a href="https://tech.lgbt/@Diziet/113396035847619715">this mastodon post</a>)
is that this policy was written in the 90s because there was a lot of confusion
about what <code>Backspace</code> should do in the 90s and there needed to be a standard
to get everything to work.</p>
<p>There&rsquo;s a bunch more historical terminal stuff here but that&rsquo;s all I&rsquo;ll say for
now.</p>
<h3 id="there-s-probably-a-lot-more-diversity-in-how-this-works">there&rsquo;s probably a lot more diversity in how this works</h3>
<p>I&rsquo;ve probably missed a bunch more ways that &ldquo;how it works on my machine&rdquo; might
be different from how it works on other people&rsquo;s machines, and I&rsquo;ve probably
made some mistakes about how it works on my machine too. But that&rsquo;s all I&rsquo;ve
got for today.</p>
<p>Some more stuff I know that I&rsquo;ve left out: according to <code>stty -a</code> <code>Ctrl-O</code> is
&ldquo;discard&rdquo;, <code>Ctrl-R</code> is &ldquo;reprint&rdquo;, and <code>Ctrl-Y</code> is &ldquo;dsusp&rdquo;. I have no idea how
to make those actually do anything (pressing them does not do anything
obvious, and some people have told me what they used to do historically but
it&rsquo;s not clear to me if they have a use in 2024), and a lot of the time in practice
they seem to just be passed through to the application anyway so I just
labelled <code>Ctrl-R</code> and <code>Ctrl-Y</code> as
<code>readline</code>.</p>
<h3 id="not-all-of-this-is-that-useful-to-know">not all of this is that useful to know</h3>
<p>Also I want to say that I think the contents of this post are kind of interesting
but I don&rsquo;t think they&rsquo;re necessarily that <em>useful</em>. I&rsquo;ve used the terminal
pretty successfully every day for the last 20 years without knowing literally
any of this &ndash; I just knew what <code>Ctrl-C</code>, <code>Ctrl-D</code>, <code>Ctrl-Z</code>, <code>Ctrl-R</code>,
<code>Ctrl-L</code> did in practice (plus maybe <code>Ctrl-A</code>, <code>Ctrl-E</code> and <code>Ctrl-W</code>) and did
not worry about the details for the most part, and that was
almost always totally fine except when I was <a href="https://jvns.ca/blog/2022/07/20/pseudoterminals/">trying to use xterm.js</a>.</p>
<p>But I had fun learning about it so maybe it&rsquo;ll be interesting to you too.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Using less memory to look up IP addresses in Mess With DNS]]></title>
    <link href="https://jvns.ca/blog/2024/10/27/asn-ip-address-memory/"/>
    <updated>2024-10-27T07:47:04+00:00</updated>
    <id>https://jvns.ca/blog/2024/10/27/asn-ip-address-memory/</id>
    <content type="html"><![CDATA[<p>I&rsquo;ve been having problems for the last 3 years or so where <a href="https://messwithdns.net/">Mess With DNS</a>
periodically runs out of memory and gets OOM killed.</p>
<p>This hasn&rsquo;t been a big priority for me: usually it just goes down for a few
minutes while it restarts, and it only happens once a day at most, so I&rsquo;ve just
been ignoring. But last week it started actually causing a problem so I decided
to look into it.</p>
<p>This was kind of winding road where I learned a lot so here&rsquo;s a table of contents:</p>
<ul>
<li><a href="#there-s-about-100mb-of-memory-available">there&rsquo;s about 100MB of memory available</a></li>
<li><a href="#the-problem-oom-killing-the-backup-script">the problem: OOM killing the backup script</a></li>
<li><a href="#attempt-1-use-sqlite">attempt 1: use SQLite</a>
<ul>
<li><a href="#problem-how-to-store-ipv6-addresses">problem: how to store IPv6 addresses</a></li>
<li><a href="#problem-it-s-500x-slower">problem: it&rsquo;s 500x slower</a></li>
<li><a href="#time-for-explain-query-plan">time for EXPLAIN QUERY PLAN</a></li>
</ul>
</li>
<li><a href="#attempt-2-use-a-trie">attempt 2: use a trie</a>
<ul>
<li><a href="#some-notes-on-memory-profiling">some notes on memory profiling</a></li>
</ul>
</li>
<li><a href="#attempt-3-make-my-array-use-less-memory">attempt 3: make my array use less memory</a>
<ul>
<li><a href="#idea-3-1-deduplicate-the-name-and-country">idea 3.1: deduplicate the Name and Country</a></li>
<li><a href="#how-big-are-asns">how big are ASNs?</a></li>
<li><a href="#idea-3-2-use-netip-addr-instead-of-net-ip">idea 3.2: use netip.Addr instead of net.IP</a></li>
<li><a href="#the-result-saved-70mb-of-memory">the result: saved 70MB of memory!</a></li>
</ul>
</li>
</ul>
<h3 id="there-s-about-100mb-of-memory-available">there&rsquo;s about 100MB of memory available</h3>
<p>I run Mess With DNS on a VM without about 465MB of RAM, which according to
<code>ps aux</code> (the <code>RSS</code> column) is split up something like:</p>
<ul>
<li>100MB for PowerDNS</li>
<li>200MB for Mess With DNS</li>
<li>40MB for <a href="https://fly.io/blog/ssh-and-user-mode-ip-wireguard/">hallpass</a></li>
</ul>
<p>That leaves about 110MB of memory free.</p>
<p>A while back I set <a href="https://tip.golang.org/doc/gc-guide">GOMEMLIMIT</a> to 250MB
to try to make sure the garbage collector ran if Mess With DNS used more than
250MB of memory, and I think this helped but it didn&rsquo;t solve everything.</p>
<h3 id="the-problem-oom-killing-the-backup-script">the problem: OOM killing the backup script</h3>
<p>A few weeks ago I started backing up Mess With DNS&rsquo;s database for the first time <a href="https://jvns.ca/til/restic-for-backing-up-sqlite-dbs/">using restic</a>.</p>
<p>This has been working okay, but since Mess With DNS operates without much extra
memory I think <code>restic</code> sometimes needed more memory than was available on the
system, and so the backup script sometimes got OOM killed.</p>
<p>This was a problem because</p>
<ol>
<li>backups might be corrupted sometimes</li>
<li>more importantly, restic takes out a lock when it runs, and so I&rsquo;d have to manually do an
unlock if I wanted the backups to continue working. Doing manual work like
this is the #1 thing I try to avoid with all my web services (who has time
for that!) so I really wanted to do something about it.</li>
</ol>
<p>There&rsquo;s probably more than one solution to this, but I decided to try to make
Mess With DNS use less memory so that there was more available memory on the
system, mostly because it seemed like a fun problem to try to solve.</p>
<h3 id="what-s-using-memory-ip-addresses">what&rsquo;s using memory: IP addresses</h3>
<p>I&rsquo;d run a memory profile of Mess With DNS a bunch of times in the past, so I
knew exactly what was using most of Mess With DNS&rsquo;s memory: IP addresses.</p>
<p>When it starts, Mess With DNS loads this <a href="https://iptoasn.com/">database where you can look up the
ASN of every IP address</a> into memory, so that when it
receives a DNS query it can take the source IP address like <code>74.125.16.248</code> and
tell you that IP address belongs to <code>GOOGLE</code>.</p>
<p>This database by itself used about 117MB of memory, and a simple <code>du</code> told me
that was too much &ndash; the original text files were only 37MB!</p>
<pre><code>$ du -sh *.tsv
26M	ip2asn-v4.tsv
11M	ip2asn-v6.tsv
</code></pre>
<p>The way it worked originally is that I had an array of these:</p>
<pre><code>type IPRange struct {
	StartIP net.IP
	EndIP   net.IP
	Num     int
	Name    string
	Country string
}
</code></pre>
<p>and I searched through it with a binary search to figure out if any of the
ranges contained the IP I was looking for. Basically the simplest possible
thing and it&rsquo;s super fast, my machine can do about 9 million lookups per
second.</p>
<h3 id="attempt-1-use-sqlite">attempt 1: use SQLite</h3>
<p>I&rsquo;ve been using SQLite recently, so my first thought was &ndash; maybe I can store
all of this data on disk in an SQLite database, give the tables an index, and
that&rsquo;ll use less memory.</p>
<p>So I:</p>
<ul>
<li>wrote a quick Python script using <a href="https://sqlite-utils.datasette.io/en/stable/">sqlite-utils</a> to import the TSV files into an SQLite database</li>
<li>adjusted my code to select from the database instead</li>
</ul>
<p>This did solve the initial memory goal (after a GC it now hardly used any
memory at all because the table was on disk!), though I&rsquo;m not sure how much GC
churn this solution would cause if we needed to do a lot of queries at once. I
did a quick memory profile and it seemed to allocate about 1KB of memory per
lookup.</p>
<p>Let&rsquo;s talk about the issues I ran into with using SQLite though.</p>
<h3 id="problem-how-to-store-ipv6-addresses">problem: how to store IPv6 addresses</h3>
<p>SQLite doesn&rsquo;t have support for big integers and IPv6 addresses are 128 bits,
so I decided to store them as text. I think <code>BLOB</code> might have been better, I
originally thought <code>BLOB</code>s couldn&rsquo;t be compared but the <a href="https://www.sqlite.org/datatype3.html#sort_order">sqlite docs</a> say they can.</p>
<p>I ended up with this schema:</p>
<pre><code>CREATE TABLE ipv4_ranges (
   start_ip INTEGER NOT NULL,
   end_ip INTEGER NOT NULL,
   asn INTEGER NOT NULL,
   country TEXT NOT NULL,
   name TEXT NOT NULL
);
CREATE TABLE ipv6_ranges (
   start_ip TEXT NOT NULL,
   end_ip TEXT NOT NULL,
   asn INTEGER,
   country TEXT,
   name TEXT
);
CREATE INDEX idx_ipv4_ranges_start_ip ON ipv4_ranges (start_ip);
CREATE INDEX idx_ipv6_ranges_start_ip ON ipv6_ranges (start_ip);
CREATE INDEX idx_ipv4_ranges_end_ip ON ipv4_ranges (end_ip);
CREATE INDEX idx_ipv6_ranges_end_ip ON ipv6_ranges (end_ip);
</code></pre>
<p>Also I learned that Python has an <code>ipaddress</code> module, so I could use
<code>ipaddress.ip_address(s).exploded</code> to make sure that the IPv6 addresses were
expanded so that a string comparison would compare them properly.</p>
<h3 id="problem-it-s-500x-slower">problem: it&rsquo;s 500x slower</h3>
<p>I ran a quick microbenchmark, something like this. It printed out that it could
look up 17,000 IPv6 addresses per second, and similarly for IPv4 addresses.</p>
<p>This was pretty discouraging &ndash; being able to look up 17k addresses per section
is kind of fine (Mess With DNS does not get a lot of traffic), but I compared it to
the original binary search code and the original code could do 9 million per second.</p>
<pre><code>	ips := []net.IP{}
	count := 20000
	for i := 0; i &lt; count; i++ {
		// create a random IPv6 address
		bytes := randomBytes()
		ip := net.IP(bytes[:])
		ips = append(ips, ip)
	}
	now := time.Now()
	success := 0
	for _, ip := range ips {
		_, err := ranges.FindASN(ip)
		if err == nil {
			success++
		}
	}
	fmt.Println(success)
	elapsed := time.Since(now)
	fmt.Println(&quot;number per second&quot;, float64(count)/elapsed.Seconds())
</code></pre>
<h3 id="time-for-explain-query-plan">time for EXPLAIN QUERY PLAN</h3>
<p>I&rsquo;d never really done an EXPLAIN in sqlite, so I thought it would be a fun
opportunity to see what the query plan was doing.</p>
<pre><code>sqlite&gt; explain query plan select * from ipv6_ranges where '2607:f8b0:4006:0824:0000:0000:0000:200e' BETWEEN start_ip and end_ip;
QUERY PLAN
`--SEARCH ipv6_ranges USING INDEX idx_ipv6_ranges_end_ip (end_ip&gt;?)
</code></pre>
<p>It looks like it&rsquo;s just using the <code>end_ip</code> index and not the <code>start_ip</code> index,
so maybe it makes sense that it&rsquo;s slower than the binary search.</p>
<p>I tried to figure out if there was a way to make SQLite use both indexes, but I
couldn&rsquo;t find one and maybe it knows best anyway.</p>
<p>At this point I gave up on the SQLite solution, I didn&rsquo;t love that it was
slower and also it&rsquo;s a lot more complex than just doing a binary search. I felt
like I&rsquo;d rather keep something much more similar to the binary search.</p>
<p>A few things I tried with SQLite that did not cause it to use both indexes:</p>
<ul>
<li>using a compound index instead of two separate indexes</li>
<li>running <code>ANALYZE</code></li>
<li>using <code>INTERSECT</code> to intersect the results of <code>start_ip &lt; ?</code> and <code>? &lt; end_ip</code>. This did make it use both indexes, but it also seemed to make the
query literally 1000x slower, probably because it needed to create the
results of both subqueries in memory and intersect them.</li>
</ul>
<h3 id="attempt-2-use-a-trie">attempt 2: use a trie</h3>
<p>My next idea was to use a
<a href="https://medium.com/basecs/trying-to-understand-tries-3ec6bede0014">trie</a>,
because I had some vague idea that maybe a trie would use less memory, and
I found this library called
<a href="https://github.com/seancfoley/ipaddress-go">ipaddress-go</a> that lets you look up IP addresses using a trie.</p>
<p>I tried using it <a href="https://gist.github.com/jvns/3ce617796b22127017590ac62c57fddd">here&rsquo;s the code</a>, but I
think I was doing something wildly wrong because, compared to my naive array + binary search:</p>
<ul>
<li>it used WAY more memory (800MB to store just the IPv4 addresses)</li>
<li>it was a lot slower to do the lookups (it could do only 100K/second instead of 9 million/second)</li>
</ul>
<p>I&rsquo;m not really sure what went wrong here but I gave up on this approach and
decided to just try to make my array use less memory and stick to a simple
binary search.</p>
<h3 id="some-notes-on-memory-profiling">some notes on memory profiling</h3>
<p>One thing I learned about memory profiling is that you can use <code>runtime</code>
package to see how much memory is currently allocated in the program. That&rsquo;s
how I got all the memory numbers in this post. Here&rsquo;s the code:</p>
<pre><code>func memusage() {
	runtime.GC()
	var m runtime.MemStats
	runtime.ReadMemStats(&amp;m)
	fmt.Printf(&quot;Alloc = %v MiB\n&quot;, m.Alloc/1024/1024)
	// write mem.prof
	f, err := os.Create(&quot;mem.prof&quot;)
	if err != nil {
		log.Fatal(err)
	}
	pprof.WriteHeapProfile(f)
	f.Close()
}
</code></pre>
<p>Also I learned that if you use <code>pprof</code> to analyze a heap profile there are two
ways to analyze it: you can pass either <code>--alloc-space</code> or <code>--inuse-space</code> to
<code>go tool pprof</code>. I don&rsquo;t know how I didn&rsquo;t realize this before but
<code>alloc-space</code> will tell you about everything that was allocated, and
<code>inuse-space</code> will just include memory that&rsquo;s currently in use.</p>
<p>Anyway I ran <code>go tool pprof -pdf --inuse_space mem.prof &gt; mem.pdf</code> a lot. Also
every time I use pprof I find myself referring to <a href="https://jvns.ca/blog/2017/09/24/profiling-go-with-pprof/">my own intro to pprof</a>, it&rsquo;s probably
the blog post I wrote that I use the most often. I should add <code>--alloc-space</code>
and <code>--inuse-space</code> to it.</p>
<h3 id="attempt-3-make-my-array-use-less-memory">attempt 3: make my array use less memory</h3>
<p>I was storing my ip2asn entries like this:</p>
<pre><code>type IPRange struct {
	StartIP net.IP
	EndIP   net.IP
	Num     int
	Name    string
	Country string
}
</code></pre>
<p>I had 3 ideas for ways to improve this:</p>
<ol>
<li>There was a lot of repetition of <code>Name</code> and the <code>Country</code>, because a lot of IP ranges belong to the same ASN</li>
<li><code>net.IP</code> is an <code>[]byte</code> under the hood, which felt like it involved an unnecessary pointer, was there a way to inline it into the struct?</li>
<li>Maybe I didn&rsquo;t need both the start IP and the end IP, often the ranges were consecutive so maybe I could rearrange things so that I only had the start IP</li>
</ol>
<h3 id="idea-3-1-deduplicate-the-name-and-country">idea 3.1: deduplicate the Name and Country</h3>
<p>I figured I could store the ASN info in an array, and then just store the index
into the array in my <code>IPRange</code> struct. Here are the structs so you can see what
I mean:</p>
<pre><code>type IPRange struct {
	StartIP netip.Addr
	EndIP   netip.Addr
	ASN     uint32
	Idx     uint32
}

type ASNInfo struct {
	Country string
	Name    string
}

type ASNPool struct {
	asns   []ASNInfo
	lookup map[ASNInfo]uint32
}
</code></pre>
<p>This worked! It brought memory usage from 117MB to 65MB &ndash; a 50MB savings. I felt good about this.</p>
<p><a href="https://github.com/jvns/mess-with-dns/blob/94f77b4bb1597b5e2a6768e33bd6c285919aa1bf/api/streamer/ip2asn/ip2asn.go#L18-L54">Here&rsquo;s all of the code for that part</a>.</p>
<h3 id="how-big-are-asns">how big are ASNs?</h3>
<p>As an aside &ndash; I&rsquo;m storing the ASN in a <code>uint32</code>, is that right? I looked in the ip2asn
file and the biggest one seems to be 401307, though there are a few lines that
say <code>4294901931</code> which is much bigger, but also are just inside the range of a
uint32. So I can definitely use a <code>uint32</code>.</p>
<pre><code>59.101.179.0	59.101.179.255	4294901931	Unknown	AS4294901931
</code></pre>
<h3 id="idea-3-2-use-netip-addr-instead-of-net-ip">idea 3.2: use <code>netip.Addr</code> instead of <code>net.IP</code></h3>
<p>It turns out that I&rsquo;m not the only one who felt that <code>net.IP</code> was using an
unnecessary amount of memory &ndash; in 2021 the folks at Tailscale released a new
IP address library for Go which solves this and many other issues. <a href="https://tailscale.com/blog/netaddr-new-ip-type-for-go">They wrote a great blog post about it</a>.</p>
<p>I discovered (to my delight) that not only does this new IP address library exist and do exactly what I want, it&rsquo;s also now in the Go
standard library as <a href="https://pkg.go.dev/net/netip#Addr">netip.Addr</a>. Switching to <code>netip.Addr</code> was
very easy and saved another 20MB of memory, bringing us to 46MB.</p>
<p>I didn&rsquo;t try my third idea (remove the end IP from the struct) because I&rsquo;d
already been programming for long enough on a Saturday morning and I was happy
with my progress.</p>
<p>It&rsquo;s always such a great feeling when I think &ldquo;hey, I don&rsquo;t like this, there
must be a better way&rdquo; and then immediately discover that someone has already
made the exact thing I want, thought about it a lot more than me, and
implemented it much better than I would have.</p>
<h3 id="all-of-this-was-messier-in-real-life">all of this was messier in real life</h3>
<p>Even though I tried to explain this in a simple linear way &ldquo;I tried X, then I
tried Y, then I tried Z&rdquo;, that&rsquo;s kind of a lie &ndash; I always try to take my
actual debugging process (total chaos) and make it seem more linear and
understandable because the reality is just too annoying to write down. It&rsquo;s
more like:</p>
<ul>
<li>try sqlite</li>
<li>try a trie</li>
<li>second guess everything that I concluded about sqlite, go back and look at
the results again</li>
<li>wait what about indexes</li>
<li>very very belatedly realize that I can use <code>runtime</code> to check how much
memory everything is using, start doing that</li>
<li>look at the trie again, maybe I misunderstood everything</li>
<li>give up and go back to binary search</li>
<li>look at all of the numbers for tries/sqlite again to make sure I didn&rsquo;t misunderstand</li>
</ul>
<h3 id="a-note-on-using-512mb-of-memory">A note on using 512MB of memory</h3>
<p>Someone asked why I don&rsquo;t just give the VM more memory. I could very easily
afford to pay for a VM with 1GB of memory, but I feel like 512MB really
<em>should</em> be enough (and really that 256MB should be enough!) so I&rsquo;d rather stay
inside that constraint. It&rsquo;s kind of a fun puzzle.</p>
<h3 id="a-few-ideas-from-the-replies">a few ideas from the replies</h3>
<p>Folks had a lot of good ideas I hadn&rsquo;t thought of. Recording them as
inspiration if I feel like having another Fun Performance Day at some point.</p>
<ul>
<li>Try Go&rsquo;s <a href="https://pkg.go.dev/unique">unique</a> package for the <code>ASNPool</code>. Someone tried this and it uses more memory, probably because Go&rsquo;s pointers are 64 bits</li>
<li>Try compiling with <code>GOARCH=386</code> to use 32-bit pointers to sace space (maybe in combination with using <code>unique</code>!)</li>
<li>It should be possible to store all of the IPv6 addresses in just 64 bits, because only the first 64 bits of the address are public</li>
<li><a href="https://en.m.wikipedia.org/wiki/Interpolation_search">Interpolation search</a> might be faster than binary search since IP addresses are numeric</li>
<li>Try the MaxMind db format with <a href="https://github.com/maxmind/mmdbwriter">mmdbwriter</a> or <a href="https://github.com/ipinfo/mmdbctl">mmdbctl</a></li>
<li>Tailscale&rsquo;s <a href="https://github.com/tailscale/art">art</a> routing table package</li>
</ul>
<h3 id="the-result-saved-70mb-of-memory">the result: saved 70MB of memory!</h3>
<p>I deployed the new version and now Mess With DNS is using less memory! Hooray!</p>
<p>A few other notes:</p>
<ul>
<li>lookups are a little slower &ndash; in my microbenchmark they went from 9 million
lookups/second to 6 million, maybe because I added a little indirection.
Using less memory and a little more CPU seemed like a good tradeoff though.</li>
<li>it&rsquo;s still using more memory than the raw text files do (46MB vs 37MB), I
guess pointers take up space and that&rsquo;s okay.</li>
</ul>
<p>I&rsquo;m honestly not sure if this will solve all my memory problems, probably not!
But I had fun, I learned a few things about SQLite, I still don&rsquo;t know what to
think about tries, and it made me love binary search even more than I already
did.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Some notes on upgrading Hugo]]></title>
    <link href="https://jvns.ca/blog/2024/10/07/some-notes-on-upgrading-hugo/"/>
    <updated>2024-10-07T09:19:57+00:00</updated>
    <id>https://jvns.ca/blog/2024/10/07/some-notes-on-upgrading-hugo/</id>
    <content type="html"><![CDATA[<p>Warning: this is a post about very boring yakshaving, probably only of interest
to people who are trying to upgrade Hugo from a very old version to a new
version. But what are blogs for if not documenting one&rsquo;s very boring yakshaves
from time to time?</p>
<p>So yesterday I decided to try to upgrade Hugo. There&rsquo;s no real reason to do
this &ndash; I&rsquo;ve been using Hugo version 0.40 to generate this blog since 2018, it
works fine, and I don&rsquo;t have any problems with it. But I thought &ndash; maybe it
won&rsquo;t be as hard as I think, and I kind of like a tedious computer task sometimes!</p>
<p>I thought I&rsquo;d document what I learned along the way in case it&rsquo;s useful to
anyone else doing this very specific migration. I upgraded from Hugo v0.40
(from 2018) to v0.135 (from 2024).</p>
<p>Here are most of the changes I had to make:</p>
<h3 id="change-1-template-theme-partials-thing-html-is-now-partial-thing-html">change 1: <code>template &quot;theme/partials/thing.html</code> is now <code>partial thing.html</code></h3>
<p>I had to replace a bunch of instances of <code>{{ template &quot;theme/partials/header.html&quot; . }}</code> with <code>{{ partial &quot;header.html&quot; . }}</code>.</p>
<p>This happened in <a href="https://github.com/gohugoio/hugo/releases/tag/v0.42">v0.42</a>:</p>
<blockquote>
<p>We have now virtualized the filesystems for project and theme files. This
makes everything simpler, faster and more powerful. But it also means that
template lookups on the form {{ template “theme/partials/pagination.html” .
}} will not work anymore. That syntax has never been documented, so it&rsquo;s not
expected to be in wide use.</p>
</blockquote>
<h3 id="change-2-data-pages-is-now-site-regularpages">change 2: <code>.Data.Pages</code> is now <code>site.RegularPages</code></h3>
<p>This seems to be discussed in the <a href="https://github.com/gohugoio/hugo/releases/tag/v0.57.2">release notes for 0.57.2</a></p>
<p>I just needed to replace <code>.Data.Pages</code> with <code>site.RegularPages</code> in the template on the homepage as well as in my RSS feed template.</p>
<h3 id="change-3-next-and-prev-got-flipped">change 3:  <code>.Next</code> and <code>.Prev</code> got flipped</h3>
<p>I had this comment in the part of my theme where I link to the next/previous blog post:</p>
<blockquote>
<p>&ldquo;next&rdquo; and &ldquo;previous&rdquo; in hugo apparently mean the opposite of what I&rsquo;d think
they&rsquo;d mean intuitively. I&rsquo;d expect &ldquo;next&rdquo; to mean &ldquo;in the future&rdquo; and
&ldquo;previous&rdquo; to mean &ldquo;in the past&rdquo; but it&rsquo;s the opposite</p>
</blockquote>
<p>It looks they changed this in
<a href="https://github.com/gohugoio/hugo/commit/ad705aac0649fa3102f7639bc4db65d45e108ee2">ad705aac064</a>
so that &ldquo;next&rdquo; actually is in the future and &ldquo;prev&rdquo; actually is in the past. I
definitely find the new behaviour more intuitive.</p>
<h3 id="downloading-the-hugo-changelogs-with-a-script">downloading the Hugo changelogs with a script</h3>
<p>Figuring out why/when all of these changes happened was a little difficult. I
ended up hacking together a bash script to <a href="https://gist.github.com/jvns/dbe4bd9271a56f1f8562bfe329c2aa9e">download all of the changelogs from github as text files</a>, which I
could then grep to try to figure out what happened. It turns out it&rsquo;s pretty
easy to get all of the changelogs from the GitHub API.</p>
<p>So far everything was not so bad &ndash; there was also a change around taxonomies
that&rsquo;s I can&rsquo;t quite explain, but it was all pretty manageable, but then we got
to the really tough one: the markdown renderer.</p>
<h3 id="change-4-the-markdown-renderer-blackfriday-goldmark">change 4: the markdown renderer (blackfriday -&gt; goldmark)</h3>
<p>The blackfriday markdown renderer (which was previously the default) was removed in <a href="https://github.com/gohugoio/hugo/releases/tag/v0.100.0">v0.100.0</a>. This seems pretty reasonable:</p>
<blockquote>
<p>It has been deprecated for a long time, its v1 version is not maintained
anymore, and there are many known issues. Goldmark should be a mature
replacement by now.</p>
</blockquote>
<p>Fixing all my Markdown changes was a huge pain &ndash; I ended up having to update
80 different Markdown files (out of 700) so that they would render properly, and I&rsquo;m not totally sure</p>
<h3 id="why-bother-switching-renderers">why bother switching renderers?</h3>
<p>The obvious question here is &ndash; why bother even trying to upgrade Hugo at all
if I have to switch Markdown renderers?
My old site was running totally fine and I think it wasn&rsquo;t necessarily a <em>good</em>
use of time, but the one reason I think it might be useful in the future is
that the new renderer (goldmark) uses the <a href="https://commonmark.org/">CommonMark markdown standard</a>, which I&rsquo;m hoping will be somewhat
more futureproof. So maybe I won&rsquo;t have to go through this again? We&rsquo;ll see.</p>
<p>Also it turned out that the new Goldmark renderer does fix some problems I had
(but didn&rsquo;t know that I had) with smart quotes and how lists/blockquotes
interact.</p>
<h3 id="finding-all-the-markdown-problems-the-process">finding all the Markdown problems: the process</h3>
<p>The hard part of this Markdown change was even figuring out what changed.
Almost all of the problems (including #2 and #3 above) just silently broke the
site, they didn&rsquo;t cause any errors or anything. So I had to diff the HTML to
hunt them down.</p>
<p>Here&rsquo;s what I ended up doing:</p>
<ol>
<li>Generate the site with the old version, put it in <code>public_old</code></li>
<li>Generate the new version, put it in <code>public</code></li>
<li>Diff every single HTML file in <code>public/</code> and <code>public_old</code> with <a href="https://gist.github.com/jvns/c7272cfb906e3ed0a3e9f8d361c5b5fc">this diff.sh script</a> and put the results in a <code>diffs/</code> folder</li>
<li>Run variations on <code>find diffs -type f | xargs cat | grep -C 5 '(31m|32m)' | less -r</code> over and over again to look at every single change until I found something that seemed wrong</li>
<li>Update the Markdown to fix the problem</li>
<li>Repeat until everything seemed okay</li>
</ol>
<p>(the <code>grep 31m|32m</code> thing is searching for red/green text in the diff)</p>
<p>This was very time consuming but it was a little bit fun for some reason so I
kept doing it until it seemed like nothing too horrible was left.</p>
<h3 id="the-new-markdown-rules">the new markdown rules</h3>
<p>Here&rsquo;s a list of every type of Markdown change I had to make. It&rsquo;s very
possible these are all extremely specific to me but it took me a long time to
figure them all out so maybe this will be helpful to one other person who finds
this in the future.</p>
<h4 id="4-1-mixing-html-and-markdown">4.1: mixing HTML and markdown</h4>
<p>This doesn&rsquo;t work anymore (it doesn&rsquo;t expand the link):</p>
<pre><code>&lt;small&gt;
[a link](https://example.com)
&lt;/small&gt;
</code></pre>
<p>I need to do this instead:</p>
<pre><code>&lt;small&gt;

[a link](https://example.com)

&lt;/small&gt;
</code></pre>
<p>This works too:</p>
<pre><code>&lt;small&gt; [a link](https://example.com) &lt;/small&gt;
</code></pre>
<h4 id="4-2-is-changed-into">4.2: <code>&lt;&lt;</code> is changed into «</h4>
<p>I didn&rsquo;t want this so I needed to configure:</p>
<pre><code>markup:
  goldmark:
    extensions:
      typographer:
        leftAngleQuote: '&amp;lt;&amp;lt;'
        rightAngleQuote: '&amp;gt;&amp;gt;'
</code></pre>
<h4 id="4-3-nested-lists-sometimes-need-4-space-indents">4.3: nested lists sometimes need 4 space indents</h4>
<p>This doesn&rsquo;t render as a nested list anymore if I only indent by 2 spaces, I need to put 4 spaces.</p>
<pre><code>1. a
  * b
  * c
2. b
</code></pre>
<p>The problem is that the amount of indent needed depends on the size of the list
markers. <a href="https://spec.commonmark.org/0.29/#example-263">Here&rsquo;s a reference in CommonMark for this</a>.</p>
<h4 id="4-4-blockquotes-inside-lists-work-better">4.4: blockquotes inside lists work better</h4>
<p>Previously the <code>&gt; quote</code> here didn&rsquo;t render as a blockquote, and with the new renderer it does.</p>
<pre><code>* something
&gt; quote
* something else
</code></pre>
<p>I found a bunch of Markdown that had been kind of broken (which I hadn&rsquo;t
noticed) that works better with the new renderer, and this is an example of
that.</p>
<p>Lists inside blockquotes also seem to work better.</p>
<h4 id="4-5-headings-inside-lists">4.5: headings inside lists</h4>
<p>Previously this didn&rsquo;t render as a heading, but now it does. So I needed to
replace the <code>#</code> with <code>&amp;num;</code>.</p>
<pre><code>* # passengers: 20
</code></pre>
<h4 id="4-6-or-1-at-the-beginning-of-the-line-makes-it-a-list">4.6:  <code>+</code> or <code>1)</code> at the beginning of the line makes it a list</h4>
<p>I had something which looked like this:</p>
<pre><code>`1 / (1
+ exp(-1)) = 0.73`
</code></pre>
<p>With Blackfriday it rendered like this:</p>
<pre><code>&lt;p&gt;&lt;code&gt;1 / (1
+ exp(-1)) = 0.73&lt;/code&gt;&lt;/p&gt;
</code></pre>
<p>and with Goldmark it rendered like this:</p>
<pre><code>&lt;p&gt;`1 / (1&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;exp(-1)) = 0.73`&lt;/li&gt;
&lt;/ul&gt;
</code></pre>
<p>Same thing if there was an accidental <code>1)</code> at the beginning of a line, like in this Markdown snippet</p>
<pre><code>I set up a small Hadoop cluster (1 master, 2 workers, replication set to 
1) on 
</code></pre>
<p>To fix this I just had to rewrap the line so that the <code>+</code> wasn&rsquo;t the first character.</p>
<p>The Markdown is formatted this way because I wrap my Markdown to 80 characters
a lot and the wrapping isn&rsquo;t very context sensitive.</p>
<h4 id="4-7-no-more-smart-quotes-in-code-blocks">4.7: no more smart quotes in code blocks</h4>
<p>There were a bunch of places where the old renderer (Blackfriday) was doing
unwanted things in code blocks like replacing <code>...</code> with <code>…</code> or replacing
quotes with smart quotes. I hadn&rsquo;t realized this was happening and I was very
happy to have it fixed.</p>
<h4 id="4-8-better-quote-management">4.8: better quote management</h4>
<p>The way this gets rendered got better:</p>
<pre><code>&quot;Oh, *interesting*!&quot;
</code></pre>
<ul>
<li>old: “Oh, <em>interesting</em>!“</li>
<li>new: “Oh, <em>interesting</em>!”</li>
</ul>
<p>Before there were two left smart quotes, now the quotes match.</p>
<h4 id="4-9-images-are-no-longer-wrapped-in-a-p-tag">4.9: images are no longer wrapped in a <code>p</code> tag</h4>
<p>Previously if I had an image like this:</p>
<pre><code>&lt;img src=&quot;https://jvns.ca/images/rustboot1.png&quot;&gt;
</code></pre>
<p>it would get wrapped in a <code>&lt;p&gt;</code> tag, now it doesn&rsquo;t anymore. I dealt with this
just by adding a <code>margin-bottom: 0.75em</code> to images in the CSS, hopefully
that&rsquo;ll make them display well enough.</p>
<h4 id="4-10-br-is-now-wrapped-in-a-p-tag">4.10: <code>&lt;br&gt;</code> is now wrapped in a <code>p</code> tag</h4>
<p>Previously this wouldn&rsquo;t get wrapped in a <code>p</code> tag, but now it seems to:</p>
<pre><code>&lt;br&gt;&lt;br&gt;
</code></pre>
<p>I just gave up on fixing this though and resigned myself to maybe having some
extra space in some cases. Maybe I&rsquo;ll try to fix it later if I feel like
another yakshave.</p>
<h4 id="4-11-some-more-goldmark-settings">4.11: some more goldmark settings</h4>
<p>I also needed to</p>
<ul>
<li>turn off code highlighting (because it wasn&rsquo;t working properly and I didn&rsquo;t have it before anyway)</li>
<li>use the old &ldquo;blackfriday&rdquo; method to generate heading IDs so they didn&rsquo;t change</li>
<li>allow raw HTML in my markdown</li>
</ul>
<p>Here&rsquo;s what I needed to add to my <code>config.yaml</code> to do all that:</p>
<pre><code>markup:
  highlight:
    codeFences: false
  goldmark:
    renderer:
      unsafe: true
    parser:
      autoHeadingIDType: blackfriday
</code></pre>
<p>Maybe I&rsquo;ll try to get syntax highlighting working one day, who knows. I might
prefer having it off though.</p>
<h3 id="a-little-script-to-compare-blackfriday-and-goldmark">a little script to compare blackfriday and goldmark</h3>
<p>I also wrote a little program to compare the Blackfriday and Goldmark output
for various markdown snippets, <a href="https://gist.github.com/jvns/9cc3024ff98433ced5e3a2304c5fc5e4">here it is in a gist</a>.</p>
<p>It&rsquo;s not really configured the exact same way Blackfriday and Goldmark were in
my Hugo versions, but it was still helpful to have to help me understand what
was going on.</p>
<h3 id="a-quick-note-on-maintaining-themes">a quick note on maintaining themes</h3>
<p>My approach to themes in Hugo has been:</p>
<ol>
<li>pay someone to make a nice design for the site (for example wizardzines.com was designed by <a href="https://melody.dev/">Melody Starling</a>)</li>
<li>use a totally custom theme</li>
<li>commit that theme to the same Github repo as the site</li>
</ol>
<p>So I just need to edit the theme files to fix any problems. Also I wrote a lot
of the theme myself so I&rsquo;m pretty familiar with how it works.</p>
<p>Relying on someone else to keep a theme updated feels kind of scary to me, I
think if I were using a third-party theme I&rsquo;d just copy the code into my site&rsquo;s
github repo and then maintain it myself.</p>
<h3 id="which-static-site-generators-have-better-backwards-compatibility">which static site generators have better backwards compatibility?</h3>
<p>I <a href="https://social.jvns.ca/@b0rk/113260718682453232">asked on Mastodon</a> if
anyone had used a static site generator with good backwards compatibility.</p>
<p>The main answers seemed to be Jekyll and 11ty. Several people said they&rsquo;d been
using Jekyll for 10 years without any issues, and 11ty says it has
<a href="https://www.11ty.dev/blog/stability/">stability as a core goal</a>.</p>
<p>I think a big factor in how appealing Jekyll/11ty are is how easy it is for you
to maintain a working Ruby / Node environment on your computer: part of the
reason I stopped using Jekyll was that I got tired of having to maintain a
working Ruby installation. But I imagine this wouldn&rsquo;t be a problem for a Ruby
or Node developer.</p>
<p>Several people said that they don&rsquo;t build their Jekyll site locally at all &ndash;
they just use GitHub Pages to build it.</p>
<h3 id="that-s-it">that&rsquo;s it!</h3>
<p>Overall I&rsquo;ve been happy with Hugo &ndash; I <a href="https://jvns.ca/blog/2016/10/09/switching-to-hugo/">started using it</a> because it had fast
build times and it was a static binary, and both of those things are still
extremely useful to me. I might have spent 10 hours on this upgrade, but I&rsquo;ve
probably spent 1000+ hours writing blog posts without thinking about Hugo at
all so that seems like an extremely reasonable ratio.</p>
<p>I find it hard to be too mad about the backwards incompatible changes, most of
them were quite a long time ago, Hugo does a great job of making their old
releases available so you can use the old release if you want, and the most
difficult one is removing support for the <code>blackfriday</code> Markdown renderer in
favour of using something CommonMark-compliant which seems pretty reasonable to
me even if it is a huge pain.</p>
<p>But it did take a long time and I don&rsquo;t think I&rsquo;d particularly recommend moving
700 blog posts to a new Markdown renderer unless you&rsquo;re really in the mood for
a lot of computer suffering for some reason.</p>
<p>The new renderer did fix a bunch of problems so I think overall it might be a
good thing, even if I&rsquo;ll have to remember to make 2 changes to how I write
Markdown (4.1 and 4.3).</p>
<p>Also I&rsquo;m still using Hugo 0.54 for <a href="https://wizardzines.com">https://wizardzines.com</a> so maybe these notes
will be useful to Future Me if I ever feel like upgrading Hugo for that site.</p>
<p>Hopefully I didn&rsquo;t break too many things on the blog by doing this, let me know
if you see anything broken!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Terminal colours are tricky]]></title>
    <link href="https://jvns.ca/blog/2024/10/01/terminal-colours/"/>
    <updated>2024-10-01T10:01:44+00:00</updated>
    <id>https://jvns.ca/blog/2024/10/01/terminal-colours/</id>
    <content type="html"><![CDATA[<p>Yesterday I was thinking about how long it took me to get a colorscheme in my
terminal that I was mostly happy with (SO MANY YEARS), and it made me wonder
what about terminal colours made it so hard.</p>
<p>So I <a href="https://social.jvns.ca/@b0rk/113226972156366201">asked people on Mastodon</a> what problems
they&rsquo;ve run into with colours in the terminal, and I got a ton of interesting
responses! Let&rsquo;s talk about some of the problems and a few possible ways to fix
them.</p>
<h3 id="problem-1-blue-on-black">problem 1: blue on black</h3>
<p>One of the top complaints was &ldquo;blue on black is hard to read&rdquo;. Here&rsquo;s an
example of that: if I open Terminal.app, set the background to black, and run
<code>ls</code>, the directories are displayed in a blue that isn&rsquo;t that easy to read:</p>
<img src="https://jvns.ca/images/terminal-blue.png" style="max-width: 400px">
<p>To understand why we&rsquo;re seeing this blue, let&rsquo;s talk about ANSI colours!</p>
<h3 id="the-16-ansi-colours">the 16 ANSI colours</h3>
<p>Your terminal has 16 numbered colours &ndash; black, red, green, yellow, blue,
magenta, cyan, white, and &ldquo;bright&rdquo; version of each of those.</p>
<p>Programs can use them by printing out an &ldquo;ANSI escape code&rdquo; &ndash; for example if
you want to see each of the 16 colours in your terminal, you can run this
Python program:</p>
<pre><code class="language-python">def color(num, text):
    return f&quot;\033[38;5;{num}m{text}\033[0m&quot;

for i in range(16):
    print(color(i, f&quot;number {i:02}&quot;))
</code></pre>
<h3 id="what-are-the-ansi-colours">what are the ANSI colours?</h3>
<p>This made me wonder &ndash; if blue is colour number 5, who decides what hex color
that should correspond to?</p>
<p>The answer seems to be &ldquo;there&rsquo;s no standard, terminal emulators just choose
colours and it&rsquo;s not very consistent&rdquo;. Here&rsquo;s a <a href="https://en.m.wikipedia.org/wiki/ANSI_escape_code#Colors">screenshot of a table from Wikipedia</a>, where you
can see that there&rsquo;s a lot of variation:</p>
<img src="https://jvns.ca/images/wikipedia.png"> 
<h3 id="problem-1-5-bright-yellow-on-white">problem 1.5: bright yellow on white</h3>
<p>Bright yellow on white is even worse than blue on black, here&rsquo;s what I get in
a terminal with the default settings:</p>
<img src="https://jvns.ca/images/terminal-yellow.png" style="max-height: 40px">
<p>That&rsquo;s almost impossible to read (and some other colours like light green cause
similar issues), so let&rsquo;s talk about solutions!</p>
<h3 id="two-ways-to-reconfigure-your-colours">two ways to reconfigure your colours</h3>
<p>If you&rsquo;re annoyed by these colour contrast issues (or maybe you just think the
default ANSI colours are ugly), you might think &ndash; well, I&rsquo;ll just choose a
different &ldquo;blue&rdquo; and pick something I like better!</p>
<p>There are two ways you can do this:</p>
<p><strong>Way 1: Configure your terminal emulator</strong>: I think most modern terminal emulators
have a way to reconfigure the colours, and some of them even come with some
preinstalled themes that you might like better than the defaults.</p>
<p><strong>Way 2: Run a shell script</strong>: There are ANSI escape codes that you can print
out to tell your terminal emulator to reconfigure its colours. <a href="https://github.com/chriskempson/base16-shell/blob/master/scripts/base16-solarized-light.sh">Here&rsquo;s a shell script that does that</a>,
from the <a href="https://github.com/chriskempson/base16-shell">base16-shell</a> project.
You can see that it has a few different conventions for changing the colours &ndash;
I guess different terminal emulators have different escape codes for changing
their colour palette, and so the script is trying to pick the right style of
escape code based on the <code>TERM</code> environment variable.</p>
<h3 id="what-are-the-pros-and-cons-of-the-2-ways-of-configuring-your-colours">what are the pros and cons of the 2 ways of configuring your colours?</h3>
<p>I prefer to use the &ldquo;shell script&rdquo; method, because:</p>
<ul>
<li>if I switch terminal emulators for some reason, I don&rsquo;t need to a different configuration system, my colours still Just Work</li>
<li>I use <a href="https://github.com/chriskempson/base16-shell">base16-shell</a> with base16-vim to make my vim colours match my terminal colours, which is convenient</li>
</ul>
<p>some advantages of configuring colours in your terminal emulator:</p>
<ul>
<li>if you use a popular terminal emulator, there are probably a lot more nice terminal themes out there that you can choose from</li>
<li>not all terminal emulators support the &ldquo;shell script method&rdquo;, and even if
they do, the results can be a little inconsistent</li>
</ul>
<p>This is what my shell has looked like for probably the last 5 years (using the
solarized light base16 theme), and I&rsquo;m pretty happy with it. Here&rsquo;s <code>htop</code>:</p>
<img src="https://jvns.ca/images/terminal-my-colours.png" style="max-width: 400px">
<p>Okay, so let&rsquo;s say you&rsquo;ve found a terminal colorscheme that you like. What else
can go wrong?</p>
<h3 id="problem-2-programs-using-256-colours">problem 2: programs using 256 colours</h3>
<p>Here&rsquo;s what some output of <code>fd</code>, a <code>find</code> alternative, looks like in my
colorscheme:</p>
<img src="https://jvns.ca/images/terminal-problem-fd.png" style="max-width: 400px">
<p>The contrast is pretty bad here, and I definitely don&rsquo;t have that lime green in
my normal colorscheme. What&rsquo;s going on?</p>
<p>We can see what color codes <code>fd</code> is using using the <code>unbuffer</code> program to
capture its output including the color codes:</p>
<pre><code>$ unbuffer fd . &gt; out
$ vim out
^[[38;5;48mbad-again.sh^[[0m
^[[38;5;48mbad.sh^[[0m
^[[38;5;48mbetter.sh^[[0m
out
</code></pre>
<p><code>^[[38;5;48</code> means &ldquo;set the foreground color to color <code>48</code>&rdquo;. Terminals don&rsquo;t
only have 16 colours &ndash; many terminals these days actually have 3 ways of
specifying colours:</p>
<ol>
<li>the 16 ANSI colours we already talked about</li>
<li>an extended set of 256 colours</li>
<li>a further extended set of 24-bit hex colours, like <code>#ffea03</code></li>
</ol>
<p>So <code>fd</code> is using one of the colours from the extended 256-color set. <code>bat</code> (a
<code>cat</code> alternative) does something similar &ndash; here&rsquo;s what it looks like by
default in my terminal.</p>
<img src="https://jvns.ca/images/terminal-bat.png" style="max-width: 400px">
<p>This looks fine though and it really seems like it&rsquo;s trying to work well with a
variety of terminal themes.</p>
<h3 id="some-newer-tools-seem-to-have-theme-support">some newer tools seem to have theme support</h3>
<p>I think it&rsquo;s interesting that some of these newer terminal tools (<code>fd</code>, <code>cat</code>,
<code>delta</code>, and probably more) have support for arbitrary custom themes. I guess
the downside of this approach is that the default theme might clash with your
terminal&rsquo;s background, but the upside is that it gives you a lot more control
over theming the tool&rsquo;s output than just choosing 16 ANSI colours.</p>
<p>I don&rsquo;t really use <code>bat</code>, but if I did I&rsquo;d probably use <code>bat --theme ansi</code> to
just use the ANSI colours that I have set in my normal terminal colorscheme.</p>
<h3 id="problem-3-the-grays-in-solarized">problem 3: the grays in Solarized</h3>
<p>A bunch of people on Mastodon mentioned a specific issue with grays in the
Solarized theme: when I list a directory, the base16 Solarized Light theme
looks like this:</p>
<img src="https://jvns.ca/images/terminal-solarized-base16.png" style="max-width: 400px">
<p>but iTerm&rsquo;s default Solarized Light theme looks like this:</p>
<img src="https://jvns.ca/images/terminal-solarized-iterm.png" style="max-width: 400px">
<p>This is because in the iTerm theme (which is the <a href="https://ethanschoonover.com/solarized/#the-values">original Solarized design</a>), colors 9-14 (the &ldquo;bright blue&rdquo;, &ldquo;bright
red&rdquo;, etc) are mapped to a series of grays, and when I run <code>ls</code>, it&rsquo;s trying to
use those &ldquo;bright&rdquo; colours to color my directories and executables.</p>
<p>My best guess for why the original Solarized theme is designed this way is to
make the grays available to the <a href="https://github.com/altercation/vim-colors-solarized/blob/528a59f26d12278698bb946f8fb82a63711eec21/colors/solarized.vim">vim Solarized colorscheme</a>.</p>
<p>I&rsquo;m pretty sure I prefer the modified base16 version I use where the &ldquo;bright&rdquo;
colours are actually colours instead of all being shades of gray though. (I
didn&rsquo;t actually realize the version I was using wasn&rsquo;t the &ldquo;original&rdquo; Solarized
theme until I wrote this post)</p>
<p>In any case I really love Solarized and I&rsquo;m very happy it exists so that I can
use a modified version of it.</p>
<h3 id="problem-4-a-vim-theme-that-doesn-t-match-the-terminal-background">problem 4: a vim theme that doesn&rsquo;t match the terminal background</h3>
<p>If I my vim theme has a different background colour than my terminal theme, I
get this ugly border, like this:</p>
<img src="https://jvns.ca/images/terminal-vim-black-bg.png" style="max-width: 400px">
<p>This one is a pretty minor issue though and I think making your terminal
background match your vim background is pretty straightforward.</p>
<h3 id="problem-5-programs-setting-a-background-color">problem 5: programs setting a background color</h3>
<p>A few people mentioned problems with terminal applications setting an
unwanted background colour, so let&rsquo;s look at an example of that.</p>
<p>Here <code>ngrok</code> has set the background to color #16 (&ldquo;black&rdquo;), but the
<code>base16-shell</code> script I use sets color 16 to be bright orange, so I get this,
which is pretty bad:</p>
<img src="https://jvns.ca/images/terminal-ngrok-solarized.png" style="max-width: 400px">
<p>I think the intention is for ngrok to look something like this:</p>
<img src="https://jvns.ca/images/terminal-ngrok-regular.png" style="max-width: 400px">
<p>I think <code>base16-shell</code> sets color #16 to orange (instead of black)
so that it can provide extra colours for use by <a href="https://github.com/chriskempson/base16-vim/blob/3be3cd82cd31acfcab9a41bad853d9c68d30478d/colors/base16-solarized-light.vim">base16-vim</a>.
This feels reasonable to me &ndash; I use <code>base16-vim</code> in the terminal, so I guess I&rsquo;m
using that feature and it&rsquo;s probably more important to me than <code>ngrok</code> (which I
rarely use) behaving a bit weirdly.</p>
<p>This particular issue is a maybe obscure clash between ngrok and my colorschem,
but I think this kind of clash is pretty common when a program sets an ANSI
background color that the user has remapped for some reason.</p>
<h3 id="a-nice-solution-to-contrast-issues-minimum-contrast">a nice solution to contrast issues: &ldquo;minimum contrast&rdquo;</h3>
<p>A bunch of terminals (iTerm2, <a href="https://github.com/Eugeny/tabby">tabby</a>, kitty&rsquo;s <a href="https://sw.kovidgoyal.net/kitty/conf/#opt-kitty.text_fg_override_threshold">text_fg_override_threshold</a>, and
folks tell me also Ghostty and Windows Terminal) have a &ldquo;minimum
contrast&rdquo; feature that will automatically adjust colours to make sure they have enough contrast.</p>
<p>Here&rsquo;s an example from iTerm. This ngrok accident from before has pretty bad
contrast, I find it pretty difficult to read:</p>
<img src="https://jvns.ca/images/terminal-ngrok-solarized.png" style="max-width: 400px">
<p>With &ldquo;minimum contrast&rdquo; set to 40 in iTerm, it looks like this instead:</p>
<img src="https://jvns.ca/images/terminal-ngrok-solarized-contrast.png" style="max-width: 400px">
<p>I didn&rsquo;t have minimum contrast turned on before but I just turned it on today
because it makes such a big difference when something goes wrong with colours
in the terminal.</p>
<h3 id="problem-6-term-being-set-to-the-wrong-thing">problem 6: <code>TERM</code> being set to the wrong thing</h3>
<p>A few people mentioned that they&rsquo;ll SSH into a system that doesn&rsquo;t support the
<code>TERM</code> environment variable that they have set locally, and then the colours
won&rsquo;t work.</p>
<p>I think the way <code>TERM</code> works is that systems have a <code>terminfo</code> database, so if
the value of the <code>TERM</code> environment variable isn&rsquo;t in the system&rsquo;s terminfo
database, then it won&rsquo;t know how to output colours for that terminal. I don&rsquo;t
know too much about terminfo, but someone linked me to this <a href="https://twoot.site/@bean/113056942625234032">terminfo rant</a> that talks about a few other
issues with terminfo.</p>
<p>I don&rsquo;t have a system on hand to reproduce this one so I can&rsquo;t say for sure how
to fix it, but <a href="https://unix.stackexchange.com/questions/67537/prevent-ssh-client-passing-term-environment-variable-to-server">this stackoverflow question</a>
suggests running something like <code>TERM=xterm ssh</code> instead of <code>ssh</code>.</p>
<h3 id="problem-7-picking-good-colours-is-hard">problem 7: picking &ldquo;good&rdquo; colours is hard</h3>
<p>A couple of problems people mentioned with designing / finding terminal colorschemes:</p>
<ul>
<li>some folks are colorblind and have trouble finding an appropriate colorscheme</li>
<li>accidentally making the background color too close to the cursor or selection color, so they&rsquo;re hard to find</li>
<li>generally finding colours that work with every program is a struggle (for example you can see me having a problem with this with ngrok above!)</li>
</ul>
<h3 id="problem-8-making-nethack-mc-look-right">problem 8: making nethack/mc look right</h3>
<p>Another problem people mentioned is using a program like nethack or midnight
commander which you might expect to have a specific colourscheme based on the
default ANSI terminal colours.</p>
<p>For example, midnight commander has a really specific classic look:</p>
<img src="https://jvns.ca/images/terminal-mc-normal.png" style="max-width: 200px">
<p>But in my Solarized theme, midnight commander looks like this:</p>
<img src="https://jvns.ca/images/terminal-mc-solarized.png" style="max-width: 200px">
<p>The Solarized version feels like it could be disorienting if you&rsquo;re
very used to the &ldquo;classic&rdquo; look.</p>
<p>One solution Simon Tatham mentioned to this is using some palette customization
ANSI codes (like the ones base16 uses that I talked about earlier) to change
the color palette right before starting the program, for example remapping
yellow to a brighter yellow before starting Nethack so that the yellow
characters look better.</p>
<h3 id="problem-9-commands-disabling-colours-when-writing-to-a-pipe">problem 9: commands disabling colours when writing to a pipe</h3>
<p>If I run <code>fd | less</code>, I see something like this, with the colours disabled.</p>
<img src="https://jvns.ca/images/terminal-fd-bw.png" style="max-width: 300px">
<p>In general I find this useful &ndash; if I pipe a command to <code>grep</code>, I don&rsquo;t want it
to print out all those color escape codes, I just want the plain text. But what if you want to see the colours?</p>
<p>To see the colours, you can run <code>unbuffer fd | less -r</code>! I just learned about
<code>unbuffer</code> recently and I think it&rsquo;s really cool, <code>unbuffer</code> opens a tty for the
command to write to so that it thinks it&rsquo;s writing to a TTY. It also fixes
issues with programs buffering their output when writing to a pipe, which is
why it&rsquo;s called <code>unbuffer</code>.</p>
<p>Here&rsquo;s what the output of <code>unbuffer fd | less -r</code> looks like for me:</p>
<img src="https://jvns.ca/images/terminal-fd-color.png" style="max-width: 300px">
<p>Also some commands (including <code>fd</code>) support a <code>--color=always</code> flag which will
force them to always print out the colours.</p>
<h3 id="problem-10-unwanted-colour-in-ls-and-other-commands">problem 10: unwanted colour in <code>ls</code> and other commands</h3>
<p>Some people mentioned that they don&rsquo;t want <code>ls</code> to use colour at all, perhaps
because <code>ls</code> uses blue, it&rsquo;s hard to read on black, and maybe they don&rsquo;t feel like
customizing their terminal&rsquo;s colourscheme to make the blue more readable or
just don&rsquo;t find the use of colour helpful.</p>
<p>Some possible solutions to this one:</p>
<ul>
<li>you can run <code>ls --color=never</code>, which is probably easiest</li>
<li>you can also set <code>LS_COLORS</code> to customize the colours used by <code>ls</code>. I think some other programs other than <code>ls</code> support the <code>LS_COLORS</code> environment variable too.</li>
<li>also some programs support setting <code>NO_COLOR=true</code> (there&rsquo;s a <a href="https://no-color.org/">list here</a>)</li>
</ul>
<p>Here&rsquo;s an example of running <code>LS_COLORS=&quot;fi=0:di=0:ln=0:pi=0:so=0:bd=0:cd=0:or=0:ex=0&quot; ls</code>:</p>
<img src="https://jvns.ca/images/terminal-ls-colors.png" style="max-width: 500px">
<h3 id="problem-11-the-colours-in-vim">problem 11: the colours in vim</h3>
<p>I used to have a lot of problems with configuring my colours in vim &ndash; I&rsquo;d set
up my terminal colours in a way that I thought was okay, and then I&rsquo;d start vim
and it would just be a disaster.</p>
<p>I think what was going on here is that today, there are two ways to set up a vim colorscheme in the terminal:</p>
<ol>
<li>using your ANSI terminal colours &ndash; you tell vim which ANSI colour number to use for the background, for functions, etc.</li>
<li>using 24-bit hex colours &ndash; instead of ANSI terminal colours, the vim colorscheme can use hex codes like #faea99 directly</li>
</ol>
<p>20 years ago when I started using vim, terminals with 24-bit hex color support
were a lot less common (or maybe they didn&rsquo;t exist at all), and vim certainly
didn&rsquo;t have support for using 24-bit colour in the terminal. From some quick
searching through git, it looks like <a href="https://github.com/vim/vim/commit/8a633e3427b47286869aa4b96f2bfc1fe65b25cd">vim added support for 24-bit colour in 2016</a>
&ndash; just 8 years ago!</p>
<p>So to get colours to work properly in vim before 2016, you needed to synchronize
your terminal colorscheme and your vim colorscheme. <a href="https://github.com/chriskempson/base16-vim/blob/3be3cd82cd31acfcab9a41bad853d9c68d30478d/colors/base16-solarized-light.vim#L52-L71">Here&rsquo;s what that looked like</a>,
the colorscheme needed to map the vim color classes like <code>cterm05</code> to ANSI colour numbers.</p>
<p>But in 2024, the story is really different! Vim (and Neovim, which I use now)
support 24-bit colours, and as of Neovim 0.10 (released in May 2024), the
<code>termguicolors</code> setting (which tells Vim to use 24-bit hex colours for
colorschemes) is <a href="https://neovim.io/doc/user/news-0.10.html">turned on by default</a> in any terminal with 24-bit
color support.</p>
<p>So this &ldquo;you need to synchronize your terminal colorscheme and your vim
colorscheme&rdquo; problem is not an issue anymore for me in 2024, since I
don&rsquo;t plan to use terminals without 24-bit color support in the future.</p>
<p>The biggest consequence for me of this whole thing is that I don&rsquo;t need base16
to set colors 16-21 to weird stuff anymore to integrate with vim &ndash; I can just
use a terminal theme and a vim theme, and as long as the two themes use similar
colours (so it&rsquo;s not jarring for me to switch between them) there&rsquo;s no problem.
I think I can just remove those parts from my <code>base16</code> shell script and totally
avoid the problem with ngrok and the weird orange background I talked about
above.</p>
<h3 id="some-more-problems-i-left-out">some more problems I left out</h3>
<p>I think there are a lot of issues around the intersection of multiple programs,
like using some combination tmux/ssh/vim that I couldn&rsquo;t figure out how to
reproduce well enough to talk about them. Also I&rsquo;m sure I missed a lot of other
things too.</p>
<h3 id="base16-has-really-worked-for-me">base16 has really worked for me</h3>
<p>I&rsquo;ve personally had a lot of success with using
<a href="https://github.com/chriskempson/base16-shell">base16-shell</a> with
<a href="https://github.com/chriskempson/base16-vim">base16-vim</a> &ndash; I just need to add <a href="https://github.com/chriskempson/base16-shell?tab=readme-ov-file#fish">a couple of lines</a> to my
fish config to set it up (+ a few <code>.vimrc</code> lines) and then I can move on and
accept any remaining problems that that doesn&rsquo;t solve.</p>
<p>I don&rsquo;t think base16 is for everyone though, some limitations I&rsquo;m aware
of with base16 that might make it not work for you:</p>
<ul>
<li>it comes with a limited set of builtin themes and you might not like any of them</li>
<li>the Solarized base16 theme (and maybe all of the themes?) sets the &ldquo;bright&rdquo;
ANSI colours to be exactly the same as the normal colours, which might cause
a problem if you&rsquo;re relying on the &ldquo;bright&rdquo; colours to be different from the
regular ones</li>
<li>it sets colours 16-21 in order to give the vim colorschemes from <code>base16-vim</code>
access to more colours, which might not be relevant if you always use a
terminal with 24-bit color support, and can cause problems like the ngrok
issue above</li>
<li>also the way it sets colours 16-21 could be a problem in terminals that don&rsquo;t
have 256-color support, like the linux framebuffer terminal</li>
</ul>
<p>Apparently there&rsquo;s a community fork of base16 called
<a href="https://github.com/tinted-theming/home">tinted-theming</a>, which I haven&rsquo;t
looked into much yet.</p>
<h3 id="some-other-colorscheme-tools">some other colorscheme tools</h3>
<p>Just one so far but I&rsquo;ll link more if people tell me about them:</p>
<ul>
<li><a href="https://rootloops.sh/">rootloops.sh</a> for generating colorschemes (and <a href="https://hamvocke.com/blog/lets-create-a-terminal-color-scheme/">&ldquo;let&rsquo;s create a terminal color scheme&rdquo;</a>)</li>
<li>Some popular colorschemes (according to people I asked on Mastodon): <a href="https://catppuccin.com/">catpuccin</a>, Monokai, Gruvbox, <a href="https://github.com/dracula">Dracula</a>, <a href="https://protesilaos.com/emacs/modus-themes">Modus (a high contrast theme)</a>, <a href="https://github.com/folke/tokyonight.nvim">Tokyo Night</a>, <a href="https://www.nordtheme.com/">Nord</a>, <a href="https://rosepinetheme.com/">Rosé Pine</a></li>
</ul>
<h3 id="okay-that-was-a-lot">okay, that was a lot</h3>
<p>We talked about a lot in this post and  while I think learning about all these
details is kind of fun if I&rsquo;m in the mood to do a deep dive, I find it SO
FRUSTRATING to deal with it when I just want my colours to work! Being
surprised by unreadable text and having to find a workaround is just not my
idea of a good day.</p>
<p>Personally I&rsquo;m a zero-configuration kind of person and it&rsquo;s not that appealing
to me to have to put together a lot of custom configuration just to make my
colours in the terminal look acceptable. I&rsquo;d much rather just have some
reasonable defaults that I don&rsquo;t have to change.</p>
<h3 id="minimum-contrast-seems-like-an-amazing-feature">minimum contrast seems like an amazing feature</h3>
<p>My one big takeaway from writing this was to turn on &ldquo;minimum contrast&rdquo; in my
terminal, I think it&rsquo;s going to fix most of the occasional accidental
unreadable text issues I run into and I&rsquo;m pretty excited about it.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Some Go web dev notes]]></title>
    <link href="https://jvns.ca/blog/2024/09/27/some-go-web-dev-notes/"/>
    <updated>2024-09-27T11:16:00+00:00</updated>
    <id>https://jvns.ca/blog/2024/09/27/some-go-web-dev-notes/</id>
    <content type="html"><![CDATA[<p>I spent a lot of time in the past couple of weeks working on a website in Go
that may or may not ever see the light of day, but I learned a couple of things
along the way I wanted to write down. Here they are:</p>
<h3 id="go-1-22-now-has-better-routing">go 1.22 now has better routing</h3>
<p>I&rsquo;ve never felt motivated to learn any of the Go routing libraries
(gorilla/mux, chi, etc), so I&rsquo;ve been doing all my routing by hand, like this.</p>
<pre><code>	// DELETE /records:
	case r.Method == &quot;DELETE&quot; &amp;&amp; n == 1 &amp;&amp; p[0] == &quot;records&quot;:
		if !requireLogin(username, r.URL.Path, r, w) {
			return
		}
		deleteAllRecords(ctx, username, rs, w, r)
	// POST /records/&lt;ID&gt;
	case r.Method == &quot;POST&quot; &amp;&amp; n == 2 &amp;&amp; p[0] == &quot;records&quot; &amp;&amp; len(p[1]) &gt; 0:
		if !requireLogin(username, r.URL.Path, r, w) {
			return
		}
		updateRecord(ctx, username, p[1], rs, w, r)

</code></pre>
<p>But apparently <a href="https://go.dev/blog/routing-enhancements">as of Go 1.22</a>, Go
now has better support for routing in the standard library, so that code can be
rewritten something like this:</p>
<pre><code>	mux.HandleFunc(&quot;DELETE /records/&quot;, app.deleteAllRecords)
	mux.HandleFunc(&quot;POST /records/{record_id}&quot;, app.updateRecord)
</code></pre>
<p>Though it would also need a login middleware, so maybe something more like
this, with a <code>requireLogin</code> middleware.</p>
<pre><code>	mux.Handle(&quot;DELETE /records/&quot;, requireLogin(http.HandlerFunc(app.deleteAllRecords)))
</code></pre>
<h3 id="a-gotcha-with-the-built-in-router-redirects-with-trailing-slashes">a gotcha with the built-in router: redirects with trailing slashes</h3>
<p>One annoying gotcha I ran into was: if I make a route for <code>/records/</code>, then a
request for <code>/records</code> <a href="https://pkg.go.dev/net/http#hdr-Trailing_slash_redirection-ServeMux">will be redirected</a> to <code>/records/</code>.</p>
<p>I ran into an issue with this where sending a POST request to <code>/records</code>
redirected to a GET request for <code>/records/</code>, which broke the POST request
because it removed the request body. Thankfully <a href="https://xeiaso.net/blog/go-servemux-slash-2021-11-04/">Xe Iaso wrote a blog post about the exact same issue</a> which made it
easier to debug.</p>
<p>I think the solution to this is just to use API endpoints like <code>POST /records</code>
instead of <code>POST /records/</code>, which seems like a more normal design anyway.</p>
<h3 id="sqlc-automatically-generates-code-for-my-db-queries">sqlc automatically generates code for my db queries</h3>
<p>I got a little bit tired of writing so much boilerplate for my SQL queries, but
I didn&rsquo;t really feel like learning an ORM, because I know what SQL queries I
want to write, and I didn&rsquo;t feel like learning the ORM&rsquo;s conventions for
translating things into SQL queries.</p>
<p>But then I found <a href="https://sqlc.dev/">sqlc</a>, which will compile a query like this:</p>
<pre><code>
-- name: GetVariant :one
SELECT *
FROM variants
WHERE id = ?;

</code></pre>
<p>into Go code like this:</p>
<pre><code>const getVariant = `-- name: GetVariant :one
SELECT id, created_at, updated_at, disabled, product_name, variant_name
FROM variants
WHERE id = ?
`

func (q *Queries) GetVariant(ctx context.Context, id int64) (Variant, error) {
	row := q.db.QueryRowContext(ctx, getVariant, id)
	var i Variant
	err := row.Scan(
		&amp;i.ID,
		&amp;i.CreatedAt,
		&amp;i.UpdatedAt,
		&amp;i.Disabled,
		&amp;i.ProductName,
		&amp;i.VariantName,
	)
	return i, err
}
</code></pre>
<p>What I like about this is that if I&rsquo;m ever unsure about what Go code to write
for a given SQL query, I can just write the query I want, read the generated
function and it&rsquo;ll tell me exactly what to do to call it. It feels much easier
to me than trying to dig through the ORM&rsquo;s documentation to figure out how to
construct the SQL query I want.</p>
<p>Reading <a href="https://brandur.org/fragments/sqlc-2024">Brandur&rsquo;s sqlc notes from 2024</a> also gave me some confidence
that this is a workable path for my tiny programs. That post gives a really
helpful example of how to conditionally update fields in a table using CASE
statements (for example if you have a table with 20 columns and you only want
to update 3 of them).</p>
<h3 id="sqlite-tips">sqlite tips</h3>
<p>Someone on Mastodon linked me to this post called <a href="https://kerkour.com/sqlite-for-servers">Optimizing sqlite for servers</a>. My projects are small and I&rsquo;m
not so concerned about performance, but my main takeaways were:</p>
<ul>
<li>have a dedicated object for <strong>writing</strong> to the database, and run
<code>db.SetMaxOpenConns(1)</code> on it. I learned the hard way that if I don&rsquo;t do this
then I&rsquo;ll get <code>SQLITE_BUSY</code> errors from two threads trying to write to the db
at the same time.</li>
<li>if I want to make reads faster, I could have 2 separate db objects, one for writing and one for reading</li>
</ul>
<p>There are a more tips in that post that seem useful (like &ldquo;COUNT queries are
slow&rdquo; and &ldquo;Use STRICT tables&rdquo;), but I haven&rsquo;t done those yet.</p>
<p>Also sometimes if I have two tables where I know I&rsquo;ll never need to do a <code>JOIN</code>
beteween them, I&rsquo;ll just put them in separate databases so that I can connect
to them independently.</p>
<h3 id="go-1-19-introduced-a-way-to-set-a-gc-memory-limit">Go 1.19 introduced a way to set a GC memory limit</h3>
<p>I run all of my Go projects in VMs with relatively little memory, like 256MB or
512MB. I ran into an issue where my application kept getting OOM killed and it
was confusing &ndash; did I have a memory leak? What?</p>
<p>After some Googling, I realized that maybe I didn&rsquo;t have a memory leak, maybe I
just needed to reconfigure the garbage collector! It turns out that by default (according to <a href="https://tip.golang.org/doc/gc-guide">A Guide to the Go Garbage Collector</a>), Go&rsquo;s garbage collector will
let the application allocate memory up to <strong>2x</strong> the current heap size.</p>
<p><a href="https://messwithdns.net">Mess With DNS</a>&rsquo;s base heap size is around 170MB and
the amount of memory free on the VM is around 160MB right now, so if its memory
doubled, it&rsquo;ll get OOM killed.</p>
<p>In Go 1.19, they added a way to tell Go &ldquo;hey, if the application starts using
this much memory, run a GC&rdquo;. So I set the GC memory limit to 250MB and it seems
to have resulted in the application getting OOM killed less often:</p>
<pre><code>export GOMEMLIMIT=250MiB
</code></pre>
<h3 id="some-reasons-i-like-making-websites-in-go">some reasons I like making websites in Go</h3>
<p>I&rsquo;ve been making tiny websites (like the <a href="https://nginx-playground.wizardzines.com/">nginx playground</a>) in Go on and off for the last 4 years or so and it&rsquo;s really been working for me. I think I like it because:</p>
<ul>
<li>there&rsquo;s just 1 static binary, all I need to do to deploy it is copy the binary. If there are static files I can just embed them in the binary with <a href="https://pkg.go.dev/embed">embed</a>.</li>
<li>there&rsquo;s a built-in webserver that&rsquo;s okay to use in production, so I don&rsquo;t need to configure WSGI or whatever to get it to work. I can just put it behind <a href="https://caddyserver.com/">Caddy</a> or run it on fly.io or whatever.</li>
<li>Go&rsquo;s toolchain is very easy to install, I can just do <code>apt-get install golang-go</code> or whatever and then a <code>go build</code> will build my project</li>
<li>it feels like there&rsquo;s very little to remember to start sending HTTP responses
&ndash; basically all there is are functions like <code>Serve(w http.ResponseWriter, r *http.Request)</code> which read the request and send a response. If I need to
remember some detail of how exactly that&rsquo;s accomplished, I just have to read
the function!</li>
<li>also <code>net/http</code> is in the standard library, so you can start making websites
without installing any libraries at all. I really appreciate this one.</li>
<li>Go is a pretty systems-y language, so if I need to run an <code>ioctl</code> or
something that&rsquo;s easy to do</li>
</ul>
<p>In general everything about it feels like it makes projects easy to work on for
5 days, abandon for 2 years, and then get back into writing code without a lot
of problems.</p>
<p>For contrast, I&rsquo;ve tried to learn Rails a couple of times and I really <em>want</em>
to love Rails &ndash; I&rsquo;ve made a couple of toy websites in Rails and it&rsquo;s always
felt like a really magical experience. But ultimately when I come back to those
projects I can&rsquo;t remember how anything works and I just end up giving up. It
feels easier to me to come back to my Go projects that are full of a lot of
repetitive boilerplate, because at least I can read the code and figure out how
it works.</p>
<h3 id="things-i-haven-t-figured-out-yet">things I haven&rsquo;t figured out yet</h3>
<p>some things I haven&rsquo;t done much of yet in Go:</p>
<ul>
<li>rendering HTML templates: usually my Go servers are just APIs and I make the
frontend a single-page app with Vue. I&rsquo;ve used <code>html/template</code> a lot in Hugo (which I&rsquo;ve used for this blog for the last 8 years)
but I&rsquo;m still not sure how I feel about it.</li>
<li>I&rsquo;ve never made a real login system, usually my servers don&rsquo;t have users at all.</li>
<li>I&rsquo;ve never tried to implement CSRF</li>
</ul>
<p>In general I&rsquo;m not sure how to implement security-sensitive features so I don&rsquo;t
start projects which need login/CSRF/etc. I imagine this is where a framework
would help.</p>
<h3 id="it-s-cool-to-see-the-new-features-go-has-been-adding">it&rsquo;s cool to see the new features Go has been adding</h3>
<p>Both of the Go features I mentioned in this post (<code>GOMEMLIMIT</code> and the routing)
are new in the last couple of years and I didn&rsquo;t notice when they came out. It
makes me think I should pay closer attention to the release notes for new Go
versions.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Reasons I still love the fish shell]]></title>
    <link href="https://jvns.ca/blog/2024/09/12/reasons-i--still--love-fish/"/>
    <updated>2024-09-12T15:09:12+00:00</updated>
    <id>https://jvns.ca/blog/2024/09/12/reasons-i--still--love-fish/</id>
    <content type="html"><![CDATA[<p>I wrote about how much I love <a href="https://fishshell.com/">fish</a> in <a href="https://jvns.ca/blog/2017/04/23/the-fish-shell-is-awesome/">this blog post from 2017</a> and, 7 years
of using it every day later, I&rsquo;ve found even more reasons to love it. So I
thought I&rsquo;d write a new post with both the old reasons I loved it and some
reasons.</p>
<p>This came up today because I was trying to figure out why my terminal doesn&rsquo;t
break anymore when I cat a binary to my terminal, the answer was &ldquo;fish fixes
the terminal!&rdquo;, and I just thought that was really nice.</p>
<h3 id="1-no-configuration">1. no configuration</h3>
<p>In 10 years of using fish I have never found a single thing I wanted to configure. It just works the way I want. My fish config file just has:</p>
<ul>
<li>environment variables</li>
<li>aliases (<code>alias ls eza</code>, <code>alias vim nvim</code>, etc)</li>
<li>the occasional <code>direnv hook fish | source</code> to integrate a tool like direnv</li>
<li>a script I run to set up my <a href="https://github.com/chriskempson/base16-shell/blob/588691ba71b47e75793ed9edfcfaa058326a6f41/scripts/base16-solarized-light.sh">terminal colours</a></li>
</ul>
<p>I&rsquo;ve been told that configuring things in fish is really easy if you ever do
want to configure something though.</p>
<h3 id="2-autosuggestions-from-my-shell-history">2. autosuggestions from my shell history</h3>
<p>My absolute favourite thing about fish is that I type, it’ll automatically
suggest (in light grey) a matching command that I ran recently. I can press the
right arrow key to accept the completion, or keep typing to ignore it.</p>
<p>Here’s what that looks like. In this example I just typed the “v” key and it
guessed that I want to run the previous vim command again.</p>
<img src="https://jvns.ca/images/fish-2024.png">
<h3 id="2-5-smart-shell-autosuggestions">2.5 &ldquo;smart&rdquo; shell autosuggestions</h3>
<p>One of my favourite subtle autocomplete features is how fish handles autocompleting commands that contain paths in them. For example, if I run:</p>
<pre><code>$ ls blah.txt
</code></pre>
<p>that command will only be autocompleted in directories that contain <code>blah.txt</code> &ndash; it won&rsquo;t show up in a different directory. (here&rsquo;s <a href="https://github.com/fish-shell/fish-shell/issues/120#issuecomment-6376019">a short comment about how it works</a>)</p>
<p>As an example, if in this directory I type <code>bash scripts/</code>, it&rsquo;ll only suggest
history commands including files that <em>actually exist</em> in my blog&rsquo;s scripts
folder, and not the dozens of other irrelevant <code>scripts/</code> commands I&rsquo;ve run in
other folders.</p>
<p>I didn&rsquo;t understand exactly how this worked until last week, it just felt like fish was
magically able to suggest the right commands. It still feels a little like magic and I love it.</p>
<h3 id="3-pasting-multiline-commands">3. pasting multiline commands</h3>
<p>If I copy and paste multiple lines, bash will run them all, like this:</p>
<pre><code>[bork@grapefruit linux-playground (main)]$ echo hi
hi
[bork@grapefruit linux-playground (main)]$ touch blah
[bork@grapefruit linux-playground (main)]$ echo hi
hi
</code></pre>
<p>This is a bit alarming &ndash; what if I didn&rsquo;t actually <em>want</em> to run all those
commands?</p>
<p>Fish will paste them all at a single prompt, so that I can press Enter if I
actually want to run them. Much less scary.</p>
<pre><code>bork@grapefruit ~/work/&gt; echo hi

                         touch blah
                         echo hi
</code></pre>
<h3 id="4-nice-tab-completion">4. nice tab completion</h3>
<p>If I run <code>ls</code> and press tab, it&rsquo;ll display all the filenames in a nice grid. I can use either Tab, Shift+Tab, or the arrow keys to navigate the grid.</p>
<p>Also, I can tab complete from the <strong>middle</strong> of a filename &ndash; if the filename
starts with a weird character (or if it&rsquo;s just not very unique), I can type
some characters from the middle and press tab.</p>
<p>Here&rsquo;s what the tab completion looks like:</p>
<pre><code>bork@grapefruit ~/work/&gt; ls 
api/  blah.py     fly.toml   README.md
blah  Dockerfile  frontend/  test_websocket.sh
</code></pre>
<p>I honestly don&rsquo;t complete things other than filenames very much so I can&rsquo;t
speak to that, but I&rsquo;ve found the experience of tab completing filenames to be
very good.</p>
<h3 id="5-nice-default-prompt-including-git-integration">5. nice default prompt (including git integration)</h3>
<p>Fish&rsquo;s default prompt includes everything I want:</p>
<ul>
<li>username</li>
<li>hostname</li>
<li>current folder</li>
<li>git integration</li>
<li>status of last command exit (if the last command failed)</li>
</ul>
<p>Here&rsquo;s a screenshot with a few different variations on the default prompt,
including if the last command was interrupted (the <code>SIGINT</code>) or failed.</p>
<img src="https://jvns.ca/images/fish-prompt-2024.png">
<h3 id="6-nice-history-defaults">6. nice history defaults</h3>
<p>In bash, the maximum history size is 500 by default, presumably because
computers used to be slow and not have a lot of disk space. Also, by default,
commands don&rsquo;t get added to your history until you end your session. So if your
computer crashes, you lose some history.</p>
<p>In fish:</p>
<ol>
<li>the default history size is 256,000 commands. I don&rsquo;t see any reason I&rsquo;d ever need more.</li>
<li>if you open a new tab, everything you&rsquo;ve ever run (including commands in
open sessions) is immediately available to you</li>
<li>in an existing session, the history search will only include commands from
the current session, plus everything that was in history at the time that
you started the shell</li>
</ol>
<p>I&rsquo;m not sure how clearly I&rsquo;m explaining how fish&rsquo;s history system works here,
but it feels really good to me in practice. My impression is that the way it&rsquo;s
implemented is the commands are continually added to the history file, but fish
only loads the history file once, on startup.</p>
<p>I&rsquo;ll mention here that if you want to have a fancier history system in another
shell it might be worth checking out <a href="https://github.com/atuinsh/atuin">atuin</a> or <a href="https://github.com/junegunn/fzf">fzf</a>.</p>
<h3 id="7-press-up-arrow-to-search-history">7. press up arrow to search history</h3>
<p>I also like fish&rsquo;s interface for searching history: for example if I want to
edit my fish config file, I can just type:</p>
<pre><code>$ config.fish
</code></pre>
<p>and then press the up arrow to go back the last command that included <code>config.fish</code>. That&rsquo;ll complete to:</p>
<pre><code>$ vim ~/.config/fish/config.fish
</code></pre>
<p>and I&rsquo;m done. This isn&rsquo;t <em>so</em> different from using <code>Ctrl+R</code> in bash to search
your history but I think I like it a little better over all, maybe because
<code>Ctrl+R</code> has some behaviours that I find confusing (for example you can
end up accidentally editing your history which I don&rsquo;t like).</p>
<h3 id="8-the-terminal-doesn-t-break">8. the terminal doesn&rsquo;t break</h3>
<p>I used to run into issues with bash where I&rsquo;d accidentally <code>cat</code> a binary to
the terminal, and it would break the terminal.</p>
<p>Every time fish displays a prompt, it&rsquo;ll try to fix up your terminal so that
you don&rsquo;t end up in weird situations like this. I think <a href="https://github.com/fish-shell/fish-shell/blob/a979b6341d7fc4c466b3992f25da3209e0808aaa/src/reader.rs#L3601-L3623">this is some of the
code in fish to prevent broken terminals</a>.</p>
<p>Some things that it does are:</p>
<ul>
<li>turn on <code>echo</code> so that you can see the characters you type</li>
<li>make sure that newlines work properly so that you don&rsquo;t get that weird staircase effect</li>
<li>reset your terminal background colour, etc</li>
</ul>
<p>I don&rsquo;t think I&rsquo;ve run into any of these &ldquo;my terminal is broken&rdquo; issues in a
very long time, and I actually didn&rsquo;t even realize that this was because of
fish &ndash; I thought that things somehow magically just got better, or maybe I
wasn&rsquo;t making as many mistakes. But I think it was mostly fish saving me from
myself, and I really appreciate that.</p>
<h3 id="9-ctrl-s-is-disabled">9. Ctrl+S is disabled</h3>
<p>Also related to terminals breaking: fish disables Ctrl+S (which freezes your
terminal and then you need to remember to press Ctrl+Q to unfreeze it). It&rsquo;s a
feature that I&rsquo;ve never wanted and I&rsquo;m happy to not have it.</p>
<p>Apparently you can disable <code>Ctrl+S</code> in other shells with <code>stty -ixon</code>.</p>
<h3 id="10-fish-add-path">10. <code>fish_add_path</code></h3>
<p>I have mixed feelings about this one, but in Fish you can use <code>fish_add_path /opt/whatever/bin</code> to add a path to your PATH, globally, permanently, across
all open shell sessions. This can get a bit confusing if you forget where
those PATH entries are configured but overall I think I appreciate it.</p>
<h3 id="11-nice-syntax-highlighting">11. nice syntax highlighting</h3>
<p>By default commands that don&rsquo;t exist are highlighted in red, like this.</p>
<img src="https://jvns.ca/images/fish-syntax-2024.png">
<h3 id="12-easier-loops">12. easier loops</h3>
<p>I find the loop syntax in fish a lot easier to type than the bash syntax. It looks like this:</p>
<pre><code>for i in *.yaml
  echo $i
end
</code></pre>
<p>Also it&rsquo;ll add indentation in your loops which is nice.</p>
<h3 id="13-easier-multiline-editing">13. easier multiline editing</h3>
<p>Related to loops: you can edit multiline commands much more easily than in bash
(just use the arrow keys to navigate the multiline command!). Also when you use
the up arrow to get a multiline command from your history, it&rsquo;ll show you the
whole command the exact same way you typed it instead of squishing it all onto
one line like bash does:</p>
<pre><code>$ bash
$ for i in *.png
&gt; do
&gt; echo $i
&gt; done
$ # press up arrow
$ for i in *.png; do echo $i; done ink
</code></pre>
<h3 id="14-ctrl-left-arrow">14. Ctrl+left arrow</h3>
<p>This might just be me, but I really appreciate that fish has the <code>Ctrl+left arrow</code> / <code>Ctrl+right arrow</code> keyboard shortcut for moving between
words when writing a command.</p>
<p>I&rsquo;m honestly a bit confused about where this keyboard shortcut is coming from
(the only documented keyboard shortcut for this I can find in fish is <code>Alt+left arrow</code> / <code>Alt + right arrow</code> which seems to do the same thing), but I&rsquo;m pretty
sure this is a fish shortcut.</p>
<p>A couple of notes about getting this shortcut to work / where it comes from:</p>
<ul>
<li>one person said they needed to switch their terminal emulator from the &ldquo;Linux
console&rdquo; keybindings to &ldquo;Default (XFree 4)&rdquo; to get it to work in fish</li>
<li>on Mac OS, <code>Ctrl+left arrow</code> switches workspaces by default, so I had to turn
that off.</li>
<li>Also apparently Ubuntu configures libreadline in <code>/etc/inputrc</code> to make
<code>Ctrl+left/right arrow</code> go back/forward a word, so it&rsquo;ll work in bash on
Ubuntu and maybe other Linux distros too. Here&rsquo;s a <a href="https://stackoverflow.com/questions/5029118/bash-ctrl-to-move-cursor-between-words-strings">stack overflow question talking about that</a></li>
</ul>
<h3 id="a-downside-not-everything-has-a-fish-integration">a downside: not everything has a fish integration</h3>
<p>Sometimes tools don&rsquo;t have instructions for integrating them with fish. That&rsquo;s annoying, but:</p>
<ul>
<li>I&rsquo;ve found this has gotten better over the last 10 years as fish has gotten
more popular. For example Python&rsquo;s virtualenv has had a fish integration for
a long time now.</li>
<li>If I need to run a POSIX shell command real quick, I can always just run <code>bash</code> or <code>zsh</code></li>
<li>I&rsquo;ve gotten much better over the years at translating simple commands to fish syntax when I need to</li>
</ul>
<p>My biggest day-to-day to annoyance is probably that for whatever reason I&rsquo;m
still not  used to fish&rsquo;s syntax for setting environment variables, I get confused
about <code>set</code> vs <code>set -x</code>.</p>
<h3 id="on-posix-compatibility">on POSIX compatibility</h3>
<p>When I started using fish, you couldn&rsquo;t do things like <code>cmd1 &amp;&amp; cmd2</code> &ndash; it
would complain &ldquo;no, you need to run <code>cmd1; and cmd2</code>&rdquo; instead.</p>
<p>It seems like over the years fish has started accepting a little more POSIX-style syntax than it used to, like:</p>
<ul>
<li><code>cmd1 &amp;&amp; cmd2</code></li>
<li><code>export a=b</code> to set an environment variable (though this seems a bit limited, you can&rsquo;t do <code>export PATH=$PATH:/whatever</code> so I think it&rsquo;s probably better to learn <code>set</code> instead)</li>
</ul>
<h3 id="on-fish-as-a-default-shell">on fish as a default shell</h3>
<p>Changing my default shell to fish is always a little annoying, I occasionally get myself into a situation where</p>
<ol>
<li>I install fish somewhere like maybe <code>/home/bork/.nix-stuff/bin/fish</code></li>
<li>I add the new fish location to <code>/etc/shells</code> as an allowed shell</li>
<li>I change my shell with <code>chsh</code></li>
<li>at some point months/years later I reinstall fish in a different location for some reason and remove the old one</li>
<li>oh no!!! I have no valid shell! I can&rsquo;t open a new terminal tab anymore!</li>
</ol>
<p>This has never been a major issue because I always have a terminal open
somewhere where I can fix the problem and rescue myself, but it&rsquo;s a bit
alarming.</p>
<p>If you don&rsquo;t want to use <code>chsh</code> to change your shell to fish (which is very reasonable,
maybe I shouldn&rsquo;t be doing that), the <a href="https://wiki.archlinux.org/title/Fish">Arch wiki page</a> has a couple of good suggestions &ndash;
either configure your terminal emulator to run fish or add an <code>exec fish</code> to
your <code>.bashrc</code>.</p>
<h3 id="i-ve-never-really-learned-the-scripting-language">I&rsquo;ve never really learned the scripting language</h3>
<p>Other than occasionally writing a for loop interactively on the command line,
I&rsquo;ve never really learned the fish scripting language. I still do all of my
shell scripting in bash.</p>
<p>I don&rsquo;t think I&rsquo;ve ever written a fish function or <code>if</code> statement.</p>
<h3 id="it-seems-like-fish-is-getting-pretty-popular">it seems like fish is getting pretty popular</h3>
<p>I ran a highly unscientific poll on Mastodon asking people what shell they <a href="https://social.jvns.ca/@b0rk/112722850642874842">use interactively</a>. The results were (of 2600 responses):</p>
<ul>
<li>46% bash</li>
<li>49% zsh</li>
<li>16% fish</li>
<li>5% other</li>
</ul>
<p>I think 16% for fish is pretty remarkable, since (as far as I know) there isn&rsquo;t
any system where fish is the default shell, and my sense is that it&rsquo;s very
common to just stick to whatever your system&rsquo;s default shell is.</p>
<p>It feels like a big achievement for the fish project, even if maybe my Mastodon
followers are more likely than the average shell user to use fish for some
reason.</p>
<h3 id="who-might-fish-be-right-for">who might fish be right for?</h3>
<p>Fish definitely isn&rsquo;t for everyone. I think I like it because:</p>
<ol>
<li>I really dislike configuring my shell (and honestly my dev environment in general), I want things to &ldquo;just work&rdquo; with the default settings</li>
<li>fish&rsquo;s defaults feel good to me</li>
<li>I don&rsquo;t spend that much time logged into random servers using other shells
so there&rsquo;s not too much context switching</li>
<li>I liked its features so much that I was willing to relearn how to do a few
&ldquo;basic&rdquo; shell things, like using parentheses <code>(seq 1 10)</code> to run a command
instead of backticks or using <code>set</code> instead of <code>export</code></li>
</ol>
<p>Maybe you&rsquo;re also a person who would like fish! I hope a few more of the people
who fish is for can find it, because I spend so much of my time in the terminal
and it&rsquo;s made that time much more pleasant.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Migrating Mess With DNS to use PowerDNS]]></title>
    <link href="https://jvns.ca/blog/2024/08/19/migrating-mess-with-dns-to-use-powerdns/"/>
    <updated>2024-08-19T08:15:28+00:00</updated>
    <id>https://jvns.ca/blog/2024/08/19/migrating-mess-with-dns-to-use-powerdns/</id>
    <content type="html"><![CDATA[<p>About 3 years ago, I announced <a href="https://messwithdns.net/">Mess With DNS</a> in
<a href="https://jvns.ca/blog/2021/12/15/mess-with-dns/">this blog post</a>, a playground
where you can learn how DNS works by messing around and creating records.</p>
<p>I wasn&rsquo;t very careful with the DNS implementation though (to quote the release blog
post: &ldquo;following the DNS RFCs? not exactly&rdquo;), and people started reporting
problems that eventually I decided that I wanted to fix.</p>
<h3 id="the-problems">the problems</h3>
<p>Some of the problems people have reported were:</p>
<ul>
<li>domain names with underscores weren&rsquo;t allowed, even though they should be</li>
<li>If there was a CNAME record for a domain name, it allowed you to create other records for that domain name, even if it shouldn&rsquo;t</li>
<li>you could create 2 different CNAME records for the same domain name, which shouldn&rsquo;t be allowed</li>
<li>no support for the SVCB or HTTPS record types, which seemed a little complex to implement</li>
<li>no support for upgrading from UDP to TCP for big responses</li>
</ul>
<p>And there are certainly more issues that nobody got around to reporting, for
example that if you added an NS record for a subdomain to delegate it, Mess
With DNS wouldn&rsquo;t handle the delegation properly.</p>
<h3 id="the-solution-powerdns">the solution: PowerDNS</h3>
<p>I wasn&rsquo;t sure how to fix these problems for a long time &ndash; technically I
<em>could</em> have started addressing them individually, but it felt like there were
a million edge cases and I&rsquo;d never get there.</p>
<p>But then one day I was chatting with someone else who was working on a DNS
server and they said they were using <a href="https://github.com/PowerDNS/pdns/">PowerDNS</a>: an open
source DNS server with an HTTP API!</p>
<p>This seemed like an obvious solution to my problems &ndash; I could just swap out my
own crappy DNS implementation for PowerDNS.</p>
<p>There were a couple of challenges I ran into when setting up PowerDNS that I&rsquo;ll
talk about here. I really don&rsquo;t do a lot of web development and I think I&rsquo;ve never
built a website that depends on a relatively complex API before, so it was a
bit of a learning experience.</p>
<h3 id="challenge-1-getting-every-query-made-to-the-dns-server">challenge 1: getting every query made to the DNS server</h3>
<p>One of the main things Mess With DNS does is give you a live view of every DNS
query it receives for your subdomain, using a websocket. To make this work, it
needs to intercept every DNS query before they it gets sent to the PowerDNS DNS
server:</p>
<p>There were 2 options I could think of for how to intercept the DNS queries:</p>
<ol>
<li>dnstap: <code>dnsdist</code> (a DNS load balancer from the PowerDNS project) has
support for logging all DNS queries it receives using
<a href="https://dnstap.info/">dnstap</a>, so I could put dnsdist in front of PowerDNS
and then log queries that way</li>
<li>Have my Go server listen on port 53 and proxy the queries myself</li>
</ol>
<p>I originally implemented option #1, but for some reason there was a 1 second
delay before every query got logged. I couldn&rsquo;t figure out why, so I
implemented my own <a href="https://github.com/jvns/mess-with-dns/blob/3423c9496dd772f7157a56f9e068fd926e89c331/api/main.go#L265-L310">very simple proxy</a> instead.</p>
<h3 id="challenge-2-should-the-frontend-have-direct-access-to-the-powerdns-api">challenge 2: should the frontend have direct access to the PowerDNS API?</h3>
<p>The frontend used to have a lot of DNS logic in it &ndash; it converted emoji domain
names to ASCII using punycode, had a lookup table to convert numeric DNS query
types (like <code>1</code>) to their human-readable names (like <code>A</code>), did a little bit of
validation, and more.</p>
<p>Originally I considered keeping this pattern and just giving the frontend (more
or less) direct access to the PowerDNS API to create and delete, but writing
even more complex code in Javascript didn&rsquo;t feel that appealing to me &ndash; I
don&rsquo;t really know how to write tests in Javascript and it seemed like it
wouldn&rsquo;t end well.</p>
<p>So I decided to take all of the DNS logic out of the frontend and write a new
DNS API for managing records, shaped something like this:</p>
<ul>
<li><code>GET /records</code></li>
<li><code>DELETE /records/&lt;ID&gt;</code></li>
<li><code>DELETE /records/</code> (delete all records for a user)</li>
<li><code>POST /records/</code> (create record)</li>
<li><code>POST /records/&lt;ID&gt;</code> (update record)</li>
</ul>
<p>This meant that I could actually write tests for my code, since the backend is
in Go and I do know how to write tests in Go.</p>
<h3 id="what-i-learned-it-s-okay-for-an-api-to-duplicate-information">what I learned: it&rsquo;s okay for an API to duplicate information</h3>
<p>I had this idea that APIs shouldn&rsquo;t return duplicate information &ndash; for example
if I get a DNS record, it should only include a given piece of information
once.</p>
<p>But I ran into a problem with that idea when displaying MX records: an MX
record has 2 fields, &ldquo;preference&rdquo;, and &ldquo;mail server&rdquo;. And I needed to display
that information in 2 different ways on the frontend:</p>
<ol>
<li>In a form, where &ldquo;Preference&rdquo; and &ldquo;Mail Server&rdquo; are 2 different form fields (like <code>10</code> and <code>mail.example.com</code>)</li>
<li>In a summary view, where I wanted to just show the record (<code>10 mail.example.com</code>)</li>
</ol>
<p>This is kind of a small problem, but it came up in a few different places.</p>
<p>I talked to my friend Marco Rogers about this, and based on some advice from
him I realized that I could return the same information in the API in 2
different ways! Then the frontend just has to display it. So I started just
returning duplicate information in the API, something like this:</p>
<pre><code>{
  values: {'Preference': 10, 'Server': 'mail.example.com'},
  content: '10 mail.example.com',
  ...
}
</code></pre>
<p>I ended up using this pattern in a couple of other places where I needed to
display the same information in 2 different ways and it was SO much easier.</p>
<p>I think what I learned from this is that if I&rsquo;m making an API that isn&rsquo;t
intended for external use (there are no users of this API other than the
frontend!), I can tailor it very specifically to the frontend&rsquo;s needs and
that&rsquo;s okay.</p>
<h3 id="challenge-3-what-s-a-record-s-id">challenge 3: what&rsquo;s a record&rsquo;s ID?</h3>
<p>In Mess With DNS (and I think in most DNS user interfaces!), you create, add, and delete <strong>records</strong>.</p>
<p>But that&rsquo;s not how the PowerDNS API works. In PowerDNS, you create a <strong>zone</strong>,
which is made of <strong>record sets</strong>. Records don&rsquo;t have any ID in the API at all.</p>
<p>I ended up solving this by generate a fake ID for each records which is made of:</p>
<ul>
<li>its <strong>name</strong></li>
<li>its <strong>type</strong></li>
<li>and its <strong>content</strong> (base64-encoded)</li>
</ul>
<p>For example one record&rsquo;s ID is <code>brooch225.messwithdns.com.|NS|bnMxLm1lc3N3aXRoZG5zLmNvbS4=</code></p>
<p>Then I can search through the zone and find the appropriate record to update
it.</p>
<p>This means that if you update a record then its ID will change which isn&rsquo;t
usually what I want in an ID, but that seems fine.</p>
<h3 id="challenge-4-making-clear-error-messages">challenge 4: making clear error messages</h3>
<p>I think the error messages that the PowerDNS API returns aren&rsquo;t really intended to be shown to end users, for example:</p>
<ul>
<li><code>Name 'new\032site.island358.messwithdns.com.' contains unsupported characters</code> (this error encodes the space as <code>\032</code>, which is a bit disorienting if you don&rsquo;t know that the space character is 32 in ASCII)</li>
<li><code>RRset test.pear5.messwithdns.com. IN CNAME: Conflicts with pre-existing RRset</code> (this talks about RRsets, which aren&rsquo;t a concept that the Mess With DNS UI has at all)</li>
<li><code>Record orange.beryl5.messwithdns.com./A '1.2.3.4$': Parsing record content (try 'pdnsutil check-zone'): unable to parse IP address, strange character: $</code> (mentions &ldquo;pdnsutil&rdquo;, a utility which Mess With DNS&rsquo;s users don&rsquo;t have
access to in this context)</li>
</ul>
<p>I ended up handling this in two ways:</p>
<ol>
<li>Do some initial basic validation of values that users enter (like IP addresses), so I can just return errors like <code>Invalid IPv4 address: &quot;1.2.3.4$</code></li>
<li>If that goes well, send the request to PowerDNS and if we get an error back, then do some <a href="https://github.com/jvns/mess-with-dns/blob/c02579190e103218b2c8dfc6dceb19f863752f15/api/records/pdns_errors.go">hacky translation</a> of those messages to make them clearer.</li>
</ol>
<p>Sometimes users will still get errors from PowerDNS directly, but I added some
logging of all the errors that users see, so hopefully I can review them and
add extra translations if there are other common errors that come up.</p>
<p>I think what I learned from this is that if I&rsquo;m building a user-facing
application on top of an API, I need to be pretty thoughtful about how I
resurface those errors to users.</p>
<h3 id="challenge-5-setting-up-sqlite">challenge 5: setting up SQLite</h3>
<p>Previously Mess With DNS was using a Postgres database. This was problematic
because I only gave the Postgres machine 256MB of RAM, which meant that the
database got OOM killed almost every single day. I never really worked out
exactly why it got OOM killed every day, but that&rsquo;s how it was. I spent some
time trying to tune Postgres&rsquo; memory usage by setting the max connections /
<code>work-mem</code> / <code>maintenance-work-mem</code> and it helped a bit but didn&rsquo;t solve the
problem.</p>
<p>So for this refactor I decided to use SQLite instead, because the website
doesn&rsquo;t really get that much traffic. There are some choices involved with
using SQLite, and I decided to:</p>
<ol>
<li>Run <code>db.SetMaxOpenConns(1)</code> to make sure that we only open 1 connection to
the database at a time, to prevent <code>SQLITE_BUSY</code> errors from two threads
trying to access the database at the same time (just setting WAL mode didn&rsquo;t
work)</li>
<li>Use separate databases for each of the 3 tables (users, records, and
requests) to reduce contention. This maybe isn&rsquo;t really necessary, but there
was no reason I needed the tables to be in the same database so I figured I&rsquo;d set
up separate databases to be safe.</li>
<li>Use the cgo-free <a href="https://pkg.go.dev/modernc.org/sqlite?utm_source=godoc">modernc.org/sqlite</a>, which <a href="https://datastation.multiprocess.io/blog/2022-05-12-sqlite-in-go-with-and-without-cgo.html">translates SQLite&rsquo;s source code to Go</a>.
I might switch to a more &ldquo;normal&rdquo; sqlite implementation instead at some point and use cgo though.
I think the main reason I prefer to avoid cgo is that cgo has landed me with <a href="https://jvns.ca/blog/2021/11/17/debugging-a-weird--file-not-found--error/">difficult-to-debug errors in the past</a>.</li>
<li>use WAL mode</li>
</ol>
<p>I still haven&rsquo;t set up backups, though I don&rsquo;t think my Postgres database had
backups either. I think I&rsquo;m unlikely to use
<a href="https://litestream.io/">litestream</a> for backups &ndash; Mess With DNS is very far
from a critical application, and I think daily backups that I could recover
from in case of a disaster are more than good enough.</p>
<h3 id="challenge-6-upgrading-vue-managing-forms">challenge 6: upgrading Vue &amp; managing forms</h3>
<p>This has nothing to do with PowerDNS but I decided to upgrade Vue.js from
version 2 to 3 as part of this refresh. The main problem with that is that the
form validation library I was using (FormKit) completely changed its API
between Vue 2 and Vue 3, so I decided to just stop using it instead of learning
the new API.</p>
<p>I ended up switching to some form validation tools that are built into the
browser like <code>required</code> and <code>oninvalid</code> (<a href="https://github.com/jvns/mess-with-dns/blob/90f7a2d2982c8151a3ddcab532bc1db07a043f84/frontend/components/NewRecord.html#L5-L8">here&rsquo;s the code</a>).
I think it could use some of improvement, I still don&rsquo;t understand forms very well.</p>
<h3 id="challenge-7-managing-state-in-the-frontend">challenge 7: managing state in the frontend</h3>
<p>This also has nothing to do with PowerDNS, but when modifying the frontend I
realized that my state management in the frontend was a mess &ndash; in every place
where I made an API request to the backend, I had to try to remember to add a
&ldquo;refresh records&rdquo; call after that in every place that I&rsquo;d modified the state
and I wasn&rsquo;t always consistent about it.</p>
<p>With some more advice from Marco, I ended up implementing a single global
<a href="https://github.com/jvns/mess-with-dns/blob/90f7a2d2982c8151a3ddcab532bc1db07a043f84/frontend/store.ts#L32-L44">state management store</a>
which stores all the state for the application, and which lets me
create/update/delete records.</p>
<p>Then my components can just call <code>store.createRecord(record)</code>, and the store
will automatically resynchronize all of the state as needed.</p>
<h3 id="challenge-8-sequencing-the-project">challenge 8: sequencing the project</h3>
<p>This project ended up having several steps because I reworked the whole
integration between the frontend and the backend. I ended up splitting it into
a few different phases:</p>
<ol>
<li>Upgrade Vue from v2 to v3</li>
<li>Make the state management store</li>
<li>Implement a different backend API, move a lot of DNS logic out of the frontend, and add tests for the backend</li>
<li>Integrate PowerDNS</li>
</ol>
<p>I made sure that the website was (more or less) 100% working and then deployed
it in between phases, so that the amount of changes I was managing at a time
stayed somewhat under control.</p>
<h3 id="the-new-website-is-up-now">the new website is up now!</h3>
<p>I released the upgraded website a few days ago and it seems to work!
The PowerDNS API has been great to work on top of, and I&rsquo;m relieved that
there&rsquo;s a whole class of problems that I now don&rsquo;t have to think about at all,
other than potentially trying to make the error messages from PowerDNS a little
clearer. Using PowerDNS has fixed a lot of the DNS issues that folks have
reported in the last few years and it feels great.</p>
<p>If you run into problems with the new Mess With DNS I&rsquo;d love to <a href="https://github.com/jvns/mess-with-dns/issues/">hear about them here</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Go structs are copied on assignment (and other things about Go I'd missed)]]></title>
    <link href="https://jvns.ca/blog/2024/08/06/go-structs-copied-on-assignment/"/>
    <updated>2024-08-06T08:38:35+00:00</updated>
    <id>https://jvns.ca/blog/2024/08/06/go-structs-copied-on-assignment/</id>
    <content type="html"><![CDATA[<p>I&rsquo;ve been writing Go pretty casually for years &ndash; the backends for all of my
playgrounds (<a href="https://nginx-playground.wizardzines.com/">nginx</a>, <a href="https://messwithdns.net/">dns</a>, <a href="https://memory-spy.wizardzines.com/">memory</a>, <a href="https://dns-lookup.jvns.ca/">more DNS</a>) are written in Go, but many of those projects are just a few hundred lines and I don&rsquo;t come back to those codebases much.</p>
<p>I thought I more or less understood the basics of the language, but this week
I&rsquo;ve been writing a lot more Go than usual while working on some upgrades to
<a href="https://messwithdns.net">Mess with DNS</a>, and ran into a bug that revealed I
was missing a very basic concept!</p>
<p>Then I posted about this on Mastodon and someone linked me to this very cool
site (and book) called <a href="https://100go.co">100 Go Mistakes and How To Avoid Them</a> by <a href="https://teivah.dev/">Teiva Harsanyi</a>. It just came out in 2022 so it&rsquo;s relatively new.</p>
<p>I decided to read through the site to see what <em>else</em> I was missing, and found
a couple of other misconceptions I had about Go. I&rsquo;ll talk about some of the
mistakes that jumped out to me the most, but really the whole
<a href="https://100go.co/">100 Go Mistakes</a> site is great and I&rsquo;d recommend reading it.</p>
<p>Here&rsquo;s the initial mistake that started me on this journey:</p>
<h3 id="mistake-1-not-understanding-that-structs-are-copied-on-assignment">mistake 1: not understanding that structs are copied on assignment</h3>
<p>Let&rsquo;s say we have a struct:</p>
<pre><code>type Thing struct {
    Name string
}
</code></pre>
<p>and this code:</p>
<pre><code>thing := Thing{&quot;record&quot;}
other_thing := thing
other_thing.Name = &quot;banana&quot;
fmt.Println(thing)
</code></pre>
<p>This prints &ldquo;record&rdquo; and not &ldquo;banana&rdquo; (<a href="https://go.dev/play/p/kUeP2ocFtXw">play.go.dev link</a>), because <code>thing</code> is copied when you
assign it to <code>other_thing</code>.</p>
<h3 id="the-problem-this-caused-me-ranges">the problem this caused me: ranges</h3>
<p>The bug I spent 2 hours of my life debugging last week was effectively this code (<a href="https://go.dev/play/p/85FnGG86UBP">play.go.dev link</a>):</p>
<pre><code>type Thing struct {
  Name string
}
func findThing(things []Thing, name string) *Thing {
  for _, thing := range things {
    if thing.Name == name {
      return &amp;thing
    }
  }
  return nil
}

func main() {
  things := []Thing{Thing{&quot;record&quot;}, Thing{&quot;banana&quot;}}
  thing := findThing(things, &quot;record&quot;)
  thing.Name = &quot;gramaphone&quot;
  fmt.Println(things)
}
</code></pre>
<p>This prints out <code>[{record} {banana}]</code> &ndash; because <code>findThing</code> returned a copy, we didn&rsquo;t change the name in the original array.</p>
<p>This mistake is <a href="https://100go.co/#ignoring-that-elements-are-copied-in-range-loops-30">#30 in 100 Go Mistakes</a>.</p>
<p>I fixed the bug by changing it to something like this (<a href="https://go.dev/play/p/CKZCRUwv_nG">play.go.dev link</a>), which returns a
reference to the item in the array we&rsquo;re looking for instead of a copy.</p>
<pre><code>func findThing(things []Thing, name string) *Thing {
  for i := range things {
    if things[i].Name == name {
      return &amp;things[i]
    }
  }
  return nil
}
</code></pre>
<h3 id="why-didn-t-i-realize-this">why didn&rsquo;t I realize this?</h3>
<p>When I learned that I was mistaken about how assignment worked in Go I was
really taken aback, like &ndash; it&rsquo;s such a basic fact about the language works!
If I was wrong about that then what ELSE am I wrong about in Go????</p>
<p>My best guess for what happened is:</p>
<ol>
<li>I&rsquo;ve heard for my whole life that when you define a function,
you need to think about whether its arguments are passed by <strong>reference</strong> or
by <strong>value</strong></li>
<li>So I&rsquo;d thought about this in Go, and I knew that if you pass a struct as a
value to a function, it gets copied &ndash; if you want to pass a reference then
you have to pass a pointer</li>
<li>But somehow it never occurred to me that you need to think about the same
thing for <strong>assignments</strong>, perhaps because in most of the other languages I
use (Python, JS, Java) I think everything is a reference anyway. Except for
in Rust, where you do have values that you make copies of but I think most of the time I had to run <code>.clone()</code> explicitly.
(though apparently structs will be automatically copied on assignment if the struct implements the <code>Copy</code> trait)</li>
<li>Also obviously I just don&rsquo;t write that much Go so I guess it&rsquo;s never come
up.</li>
</ol>
<h3 id="mistake-2-side-effects-appending-slices-25-https-100go-co-unexpected-side-effects-using-slice-append-25">mistake 2: side effects appending slices (<a href="https://100go.co/#unexpected-side-effects-using-slice-append-25">#25</a>)</h3>
<p>When you subset a slice with <code>x[2:3]</code>, the original slice and the sub-slice
share the same backing array, so if you append to the new slice, it can
unintentionally change the old slice:</p>
<p>For example, this code prints <code>[1 2 3 555 5]</code> (<a href="https://go.dev/play/p/qssfM_NSXJD">code on play.go.dev</a>)</p>
<pre><code>x := []int{1, 2, 3, 4, 5}
y := x[2:3]
y = append(y, 555)
fmt.Println(x)
</code></pre>
<p>I don&rsquo;t think this has ever actually happened to me, but it&rsquo;s alarming and I&rsquo;m
very happy to know about it.</p>
<p>Apparently you can avoid this problem by changing <code>y := x[2:3]</code> to <code>y := x[2:3:3]</code>, which restricts the new slice&rsquo;s capacity so that appending to it
will re-allocate a new slice. Here&rsquo;s some <a href="https://go.dev/play/p/aE78JUL4-Iv">code on play.go.dev</a> that does that.</p>
<h3 id="mistake-3-not-understanding-the-different-types-of-method-receivers-42">mistake 3: not understanding the different types of method receivers (#42)</h3>
<p>This one isn&rsquo;t a &ldquo;mistake&rdquo; exactly, but it&rsquo;s been a source of confusion for me
and it&rsquo;s pretty simple so I&rsquo;m glad to have it cleared up.</p>
<p>In Go you can declare methods in 2 different ways:</p>
<ol>
<li><code>func (t Thing) Function()</code> (a &ldquo;value receiver&rdquo;)</li>
<li><code>func (t *Thing) Function()</code> (a &ldquo;pointer receiver&rdquo;)</li>
</ol>
<p>My understanding now is that basically:</p>
<ul>
<li>If you want the method to mutate the struct <code>t</code>, you need a pointer receiver.</li>
<li>If you want to make sure the method <strong>doesn&rsquo;t</strong> mutate the struct <code>t</code>, use a value receiver.</li>
</ul>
<p><a href="https://100go.co/#not-knowing-which-type-of-receiver-to-use-42">Explanation #42</a> has a
bunch of other interesting details though. There&rsquo;s definitely still something
I&rsquo;m missing about value vs pointer receivers (I got a compile error related to
them a couple of times in the last week that I still don&rsquo;t understand), but
hopefully I&rsquo;ll run into that error again soon and I can figure it out.</p>
<h3 id="more-interesting-things-i-noticed">more interesting things I noticed</h3>
<p>Some more notes from 100 Go Mistakes:</p>
<ul>
<li>apparently you can <a href="https://100go.co/#never-using-named-result-parameters-43">name the outputs of your function (#43)</a>, though that can have <a href="https://100go.co/#unintended-side-effects-with-named-result-parameters-44">issues (#44)</a> and I&rsquo;m not sure I want to</li>
<li><a href="https://100go.co/#not-exploring-all-the-go-testing-features-90">apparently you can put tests in a different package (#90)</a> to
ensure that you only use the package&rsquo;s public interfaces, which seems really
useful</li>
<li>there are a lots of notes about how to use contexts, channels, goroutines,
mutexes, sync.WaitGroup, etc. I&rsquo;m sure I have something to learn about all of
those but today is not the day I&rsquo;m going to learn them.</li>
</ul>
<p>Also there are some things that have tripped me up in the past, like:</p>
<ul>
<li><a href="https://100go.co/#forgetting-the-return-statement-after-replying-to-an-http-request-80">forgetting the return statement after replying to an HTTP request (#80)</a></li>
<li><a href="https://100go.co/#not-using-testing-utility-packages-httptest-and-iotest-88">not realizing the httptest package exists (#88)</a></li>
</ul>
<h3 id="this-100-common-mistakes-format-is-great">this &ldquo;100 common mistakes&rdquo; format is great</h3>
<p>I really appreciated this &ldquo;100 common mistakes&rdquo; format &ndash; it made it really
easy for me to skim through the mistakes and very quickly mentally classify
them into:</p>
<ol>
<li>yep, I know that</li>
<li>not interested in that one right now</li>
<li>WOW WAIT I DID NOT KNOW THAT, THAT IS VERY USEFUL!!!!</li>
</ol>
<p>It looks like &ldquo;100 Common Mistakes&rdquo; is a series of books from Manning and they
also have &ldquo;100 Java Mistakes&rdquo; and an upcoming &ldquo;100 SQL Server Mistakes&rdquo;.</p>
<p>Also I enjoyed what I&rsquo;ve read of <a href="https://effectivepython.com/">Effective Python</a> by Brett Slatkin, which has a similar &ldquo;here are a bunch of
short Python style tips&rdquo; structure where you can quickly skim it and take
what&rsquo;s useful to you. There&rsquo;s also Effective C++, Effective Java, and probably
more.</p>
<h3 id="some-other-go-resources">some other Go resources</h3>
<p>other resources I&rsquo;ve appreciated:</p>
<ul>
<li><a href="https://gobyexample.com/">Go by example</a> for basic syntax</li>
<li><a href="https://go.dev/play/">go.dev/play</a></li>
<li>obviously <a href="https://pkg.go.dev">https://pkg.go.dev</a> for documentation about literally everything</li>
<li><a href="https://staticcheck.dev/">staticcheck</a> seems like a useful linter &ndash; for
example I just started using it to tell me when I&rsquo;ve forgotten to handle an
error</li>
<li>apparently <a href="https://golangci-lint.run/">golangci-lint</a> includes a bunch of different linters</li>
</ul>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Entering text in the terminal is complicated]]></title>
    <link href="https://jvns.ca/blog/2024/07/08/readline/"/>
    <updated>2024-07-08T13:00:15+00:00</updated>
    <id>https://jvns.ca/blog/2024/07/08/readline/</id>
    <content type="html"><![CDATA[<p>The other day I asked what folks on Mastodon find confusing about working in
the terminal, and one thing that stood out to me was &ldquo;editing a command you
already typed in&rdquo;.</p>
<p>This really resonated with me: even though entering some text and editing it is
a very &ldquo;basic&rdquo; task, it took me maybe 15 years of using the terminal every
single day to get used to using <code>Ctrl+A</code> to go to the beginning of the line (or
<code>Ctrl+E</code> for the end &ndash; I think I used <code>Home</code>/<code>End</code> instead).</p>
<p>So let&rsquo;s talk about why entering text might be hard! I&rsquo;ll also share a few tips
that I wish I&rsquo;d learned earlier.</p>
<h3 id="it-s-very-inconsistent-between-programs">it&rsquo;s very inconsistent between programs</h3>
<p>A big part of what makes entering text in the terminal hard is the
inconsistency between how different programs handle entering text. For example:</p>
<ol>
<li>some programs (<code>cat</code>, <code>nc</code>, <code>git commit --interactive</code>, etc) don&rsquo;t support using arrow keys at all: if you press arrow keys, you&rsquo;ll just see <code>^[[D^[[D^[[C^[[C^</code></li>
<li>many programs (like <code>irb</code>, <code>python3</code> on a Linux machine and many many more) use the <code>readline</code> library, which gives you a lot of basic functionality (history, arrow keys, etc)</li>
<li>some programs (like <code>/usr/bin/python3</code> on my Mac) do support very basic features like arrow keys, but not other features like <code>Ctrl+left</code> or reverse searching with <code>Ctrl+R</code></li>
<li>some programs (like the <code>fish</code> shell or <code>ipython3</code> or <code>micro</code> or <code>vim</code>) have their own fancy system for accepting input which is totally custom</li>
</ol>
<p>So there&rsquo;s a lot of variation! Let&rsquo;s talk about each of those a little more.</p>
<h3 id="mode-1-the-baseline">mode 1: the baseline</h3>
<p>First, there&rsquo;s &ldquo;the baseline&rdquo; &ndash; what happens if a program just accepts text by
calling <code>fgets()</code> or whatever and doing absolutely nothing else to provide a
nicer experience. Here&rsquo;s what using these tools typically looks for me &ndash; If I
start the version of <a href="https://wiki.archlinux.org/title/Dash">dash</a> installed on
my machine (a pretty minimal shell) press the left arrow keys, it just prints
<code>^[[D</code> to the terminal.</p>
<pre><code>$ ls l-^[[D^[[D^[[D
</code></pre>
<p>At first it doesn&rsquo;t seem like all of these &ldquo;baseline&rdquo; tools have much in
common, but there are actually a few features that you get for free just from
your terminal, without the program needing to do anything special at all.</p>
<p>The things you get for free are:</p>
<ol>
<li>typing in text, obviously</li>
<li>backspace</li>
<li><code>Ctrl+W</code>, to delete the previous word</li>
<li><code>Ctrl+U</code>, to delete the whole line</li>
<li>a few other things unrelated to text editing (like <code>Ctrl+C</code> to interrupt the process, <code>Ctrl+Z</code> to suspend, etc)</li>
</ol>
<p>This is not <em>great</em>, but it means that if you want to delete a word you
generally can do it with <code>Ctrl+W</code> instead of pressing backspace 15 times, even
if you&rsquo;re in an environment which is offering you absolutely zero features.</p>
<p>You can get a list of all the ctrl codes that your terminal supports with <code>stty -a</code>.</p>
<h3 id="mode-2-tools-that-use-readline">mode 2: tools that use <code>readline</code></h3>
<p>The next group is tools that use readline! Readline is a GNU library to make
entering text more pleasant, and it&rsquo;s very widely used.</p>
<p>My favourite readline keyboard shortcuts are:</p>
<ol>
<li><code>Ctrl+E</code> (or <code>End</code>) to go to the end of the line</li>
<li><code>Ctrl+A</code> (or <code>Home</code>) to go to the beginning of the line</li>
<li><code>Ctrl+left/right arrow</code> to go back/forward 1 word</li>
<li>up arrow to go back to the previous command</li>
<li><code>Ctrl+R</code> to search your history</li>
</ol>
<p>And you can use <code>Ctrl+W</code> / <code>Ctrl+U</code> from the &ldquo;baseline&rdquo; list, though <code>Ctrl+U</code>
deletes from the cursor to the beginning of the line instead of deleting the
whole line. I think <code>Ctrl+W</code> might also have a slightly different definition of
what a &ldquo;word&rdquo; is.</p>
<p>There are a lot more (<a href="https://www.man7.org/linux/man-pages/man3/readline.3.html#EDITING_COMMANDS">here&rsquo;s a full list</a>), but those are the only ones that I personally use.</p>
<p>The <code>bash</code> shell is probably the most famous readline user (when you use
<code>Ctrl+R</code> to search your history in bash, that feature actually comes from
readline), but there are TONS of programs that use it &ndash; for example <code>psql</code>,
<code>irb</code>, <code>python3</code>, etc.</p>
<h3 id="tip-you-can-make-anything-use-readline-with-rlwrap">tip: you can make ANYTHING use readline with <code>rlwrap</code></h3>
<p>One of my absolute favourite things is that if you have a program like <code>nc</code>
without readline support, you can just run <code>rlwrap nc</code> to turn it into a
program with readline support!</p>
<p>This is incredible and makes a lot of tools that are borderline unusable MUCH
more pleasant to use. You can even apparently set up <a href="https://github.com/hanslub42/rlwrap">rlwrap</a> to include your own
custom autocompletions, though I&rsquo;ve never tried that.</p>
<h3 id="some-reasons-tools-might-not-use-readline">some reasons tools might not use readline</h3>
<p>I think reasons tools might not use readline might include:</p>
<ul>
<li>the program is very simple (like <code>cat</code> or <code>nc</code>) and maybe the maintainers don&rsquo;t want to bring in a relatively large dependency</li>
<li>license reasons, if the program&rsquo;s license is not GPL-compatible &ndash; readline is GPL-licensed, not LGPL</li>
<li>only a very small part of the program is interactive, and maybe readline
support isn&rsquo;t seen as important. For example <code>git</code> has a few interactive
features (like <code>git add -p</code>), but not very many, and usually you&rsquo;re just
typing a single character like <code>y</code> or <code>n</code> &ndash; most of the time you need to really
type something significant in git, it&rsquo;ll drop you into a text editor instead.</li>
</ul>
<p>For example idris2 says <a href="https://idris2.readthedocs.io/en/latest/tutorial/interactive.html#editing-at-the-repl">they don&rsquo;t use readline</a>
to keep dependencies minimal and suggest using <code>rlwrap</code> to get better
interactive features.</p>
<h3 id="how-to-know-if-you-re-using-readline">how to know if you&rsquo;re using readline</h3>
<p>The simplest test I can think of is to press <code>Ctrl+R</code>, and if you see:</p>
<pre><code>(reverse-i-search)`':
</code></pre>
<p>then you&rsquo;re probably using readline. This obviously isn&rsquo;t a guarantee (some
other library could use the term <code>reverse-i-search</code> too!), but I don&rsquo;t know of
another system that uses that specific term to refer to searching history.</p>
<h3 id="the-readline-keybindings-come-from-emacs">the readline keybindings come from Emacs</h3>
<p>Because I&rsquo;m a vim user, It took me a very long time to understand where these
keybindings come from (why <code>Ctrl+A</code> to go to the beginning of a line??? so
weird!)</p>
<p>My understanding is these keybindings actually come from Emacs &ndash; <code>Ctrl+A</code> and
<code>Ctrl+E</code> do the same thing in Emacs as they do in Readline and I assume the
other keyboard shortcuts mostly do as well, though I tried out <code>Ctrl+W</code> and
<code>Ctrl+U</code> in Emacs and they don&rsquo;t do the same thing as they do in the terminal
so I guess there are some differences.</p>
<p>There&rsquo;s some more <a href="https://twobithistory.org/2019/08/22/readline.html">history of the Readline project here</a>.</p>
<h3 id="mode-3-another-input-library-like-libedit">mode 3: another input library (like <code>libedit</code>)</h3>
<p>On my Mac laptop, <code>/usr/bin/python3</code> is in a weird middle ground where it
supports <em>some</em> readline features (for example the arrow keys), but not the
other ones. For example when I press <code>Ctrl+left arrow</code>, it prints out <code>;5D</code>,
like this:</p>
<pre><code>$ python3
&gt;&gt;&gt; importt subprocess;5D
</code></pre>
<p>Folks on Mastodon helped me figure out that this is because in the default
Python install on Mac OS, the Python <code>readline</code> module is actually backed by
<code>libedit</code>, which is a similar library which has fewer features, presumably
because Readline is <a href="https://en.wikipedia.org/wiki/GNU_Readline#Choice_of_the_GPL_as_GNU_Readline's_license">GPL licensed</a>.</p>
<p>Here&rsquo;s how I was eventually able to figure out that Python was using libedit on
my system:</p>
<pre><code>$ python3 -c &quot;import readline; print(readline.__doc__)&quot;
Importing this module enables command line editing using libedit readline.
</code></pre>
<p>Generally Python uses readline though if you install it on Linux or through
Homebrew. It&rsquo;s just that the specific version that Apple includes on their
systems doesn&rsquo;t have readline. Also <a href="https://docs.python.org/3.13/whatsnew/3.13.html#a-better-interactive-interpreter">Python 3.13 is going to remove the readline dependency</a>
in favour of a custom library, so &ldquo;Python uses readline&rdquo; won&rsquo;t be true in the
future.</p>
<p>I assume that there are more programs on my Mac that use libedit but I haven&rsquo;t
looked into it.</p>
<h3 id="mode-4-something-custom">mode 4: something custom</h3>
<p>The last group of programs is programs that have their own custom (and sometimes
much fancier!) system for editing text. This includes:</p>
<ul>
<li>most terminal text editors (nano, micro, vim, emacs, etc)</li>
<li>some shells (like fish), for example it seems like fish supports <code>Ctrl+Z</code> for undo when typing in a command. Zsh&rsquo;s line editor is called <a href="https://zsh.sourceforge.io/Guide/zshguide04.html">zle</a>.</li>
<li>some REPLs (like <code>ipython</code>), for example IPython uses the <a href="https://python-prompt-toolkit.readthedocs.io/">prompt_toolkit</a> library instead of readline</li>
<li>lots of other programs (like <code>atuin</code>)</li>
</ul>
<p>Some features you might see are:</p>
<ul>
<li>better autocomplete which is more customized to the tool</li>
<li>nicer history management (for example with syntax highlighting) than the default you get from readline</li>
<li>more keyboard shortcuts</li>
</ul>
<h3 id="custom-input-systems-are-often-readline-inspired">custom input systems are often readline-inspired</h3>
<p>I went looking at how <a href="https://atuin.sh/">Atuin</a> (a wonderful tool for
searching your shell history that I started using recently) handles text input.
Looking at <a href="https://github.com/atuinsh/atuin/blob/a67cfc82fe0dc907a01f07a0fd625701e062a33b/crates/atuin/src/command/client/search/interactive.rs#L382-L430">the code</a>
and some of the discussion around it, their implementation is custom but it&rsquo;s
inspired by readline, which makes sense to me &ndash; a lot of users are used to
those keybindings, and it&rsquo;s convenient for them to work even though atuin
doesn&rsquo;t use readline.</p>
<p><a href="https://python-prompt-toolkit.readthedocs.io/">prompt_toolkit</a> (the library
IPython uses) is similar &ndash; it actually supports a lot of options (including
vi-like keybindings), but the default is to support the readline-style
keybindings.</p>
<p>This is like how you see a lot of programs which support very basic vim
keybindings (like <code>j</code> for down and <code>k</code> for up). For example Fastmail supports
<code>j</code> and <code>k</code> even though most of its other keybindings don&rsquo;t have much
relationship to vim.</p>
<p>I assume that most &ldquo;readline-inspired&rdquo; custom input systems have various subtle
incompatibilities with readline, but this doesn&rsquo;t really bother me at all
personally because I&rsquo;m extremely ignorant of most of readline&rsquo;s features. I only use
maybe 5 keyboard shortcuts, so as long as they support the 5 basic commands I
know (which they always do!) I feel pretty comfortable. And usually these
custom systems have much better autocomplete than you&rsquo;d get from just using
readline, so generally I prefer them over readline.</p>
<h3 id="lots-of-shells-support-vi-keybindings">lots of shells support vi keybindings</h3>
<p>Bash, zsh, and fish all have a &ldquo;vi mode&rdquo; for entering text. In a
<a href="https://social.jvns.ca/@b0rk/112723846172173621">very unscientific poll</a> I ran on
Mastodon, 12% of people said they use it, so it seems pretty popular.</p>
<p>Readline also has a &ldquo;vi mode&rdquo; (which is how Bash&rsquo;s support for it works), so by
extension lots of other programs have it too.</p>
<p>I&rsquo;ve always thought that vi mode seems really cool, but for some reason even
though I&rsquo;m a vim user it&rsquo;s never stuck for me.</p>
<h3 id="understanding-what-situation-you-re-in-really-helps">understanding what situation you&rsquo;re in really helps</h3>
<p>I&rsquo;ve spent a lot of my life being confused about why a command line application
I was using wasn&rsquo;t behaving the way I wanted, and it feels good to be able to
more or less understand what&rsquo;s going on.</p>
<p>I think this is roughly my mental flowchart when I&rsquo;m entering text at a command
line prompt:</p>
<ol>
<li>Do the arrow keys not work? Probably there&rsquo;s no input system at all, but at
least I can use <code>Ctrl+W</code> and <code>Ctrl+U</code>, and I can <code>rlwrap</code> the tool if I
want more features.</li>
<li>Does <code>Ctrl+R</code> print <code>reverse-i-search</code>? Probably it&rsquo;s readline, so I can use
all of the readline shortcuts I&rsquo;m used to, and I know I can get some basic
history and press up arrow to get the previous command.</li>
<li>Does <code>Ctrl+R</code> do something else? This is probably some custom input library:
it&rsquo;ll probably act more or less like readline, and I can check the
documentation if I really want to know how it works.</li>
</ol>
<p>Being able to diagnose what&rsquo;s going on like this makes the command line feel a
more predictable and less chaotic.</p>
<h3 id="some-things-this-post-left-out">some things this post left out</h3>
<p>There are lots more complications related to entering text that we didn&rsquo;t talk
about at all here, like:</p>
<ul>
<li>issues related to ssh / tmux / etc</li>
<li>the <code>TERM</code> environment variable</li>
<li>how different terminals (gnome terminal, iTerm, xterm, etc) have different kinds of support for copying/pasting text</li>
<li>unicode</li>
<li>probably a lot more</li>
</ul>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Reasons to use your shell's job control]]></title>
    <link href="https://jvns.ca/blog/2024/07/03/reasons-to-use-job-control/"/>
    <updated>2024-07-03T08:00:20+00:00</updated>
    <id>https://jvns.ca/blog/2024/07/03/reasons-to-use-job-control/</id>
    <content type="html"><![CDATA[<p>Hello! Today someone on Mastodon asked about job control (<code>fg</code>, <code>bg</code>, <code>Ctrl+z</code>,
<code>wait</code>, etc). It made me think about how I don&rsquo;t use my shell&rsquo;s job
control interactively very often: usually I prefer to just open a new terminal
tab if I want to run multiple terminal programs, or use tmux if it&rsquo;s over ssh.
But I was curious about whether other people used job control more often than me.</p>
<p>So I <a href="https://social.jvns.ca/@b0rk/112716835387523648">asked on Mastodon</a> for
reasons people use job control. There were a lot of great responses, and it
even made me want to consider using job control a little more!</p>
<p>In this post I&rsquo;m only going to talk about using job control interactively (not
in scripts) &ndash; the post is already long enough just talking about interactive
use.</p>
<h3 id="what-s-job-control">what&rsquo;s job control?</h3>
<p>First: what&rsquo;s job control? Well &ndash; in a terminal, your processes can be in one of 3 states:</p>
<ol>
<li>in the <strong>foreground</strong>. This is the normal state when you start a process.</li>
<li>in the <strong>background</strong>. This is what happens when you run <code>some_process &amp;</code>: the process is still running, but you can&rsquo;t interact with it anymore unless you bring it back to the foreground.</li>
<li><strong>stopped</strong>. This is what happens when you start a process and then press <code>Ctrl+Z</code>. This pauses the process: it won&rsquo;t keep using the CPU, but you can restart it if you want.</li>
</ol>
<p>&ldquo;Job control&rdquo; is a set of commands for seeing which processes are running in a terminal and moving processes between these 3 states</p>
<h3 id="how-to-use-job-control">how to use job control</h3>
<ul>
<li><code>fg</code> brings a process to the foreground. It works on both stopped processes and background processes. For example, if you start a background process with <code>cat &lt; /dev/zero &amp;</code>, you can bring it back to the foreground by running <code>fg</code></li>
<li><code>bg</code> restarts a stopped process and puts it in the background.</li>
<li>Pressing <code>Ctrl+z</code> stops the current foreground process.</li>
<li><code>jobs</code> lists all processes that are active in your terminal</li>
<li><code>kill</code> sends a signal (like <code>SIGKILL</code>) to a job (this is the shell builtin <code>kill</code>, not <code>/bin/kill</code>)</li>
<li><code>disown</code> removes the job from the list of running jobs, so that it doesn&rsquo;t get killed when you close the terminal</li>
<li><code>wait</code> waits for all background processes to complete. I only use this in scripts though.</li>
<li>apparently in bash/zsh you can also just type <code>%2</code> instead of <code>fg %2</code></li>
</ul>
<p>I might have forgotten some other job control commands but I think those are all the ones I&rsquo;ve ever used.</p>
<p>You can also give <code>fg</code> or <code>bg</code> a specific job to foreground/background. For example if I see this in the output of <code>jobs</code>:</p>
<pre><code>$ jobs
Job Group State   Command
1   3161  running cat &lt; /dev/zero &amp;
2   3264  stopped nvim -w ~/.vimkeys $argv
</code></pre>
<p>then I can foreground <code>nvim</code> with <code>fg %2</code>. You can also kill it with <code>kill -9 %2</code>, or just <code>kill %2</code> if you want to be more gentle.</p>
<h3 id="how-is-kill-2-implemented">how is <code>kill %2</code> implemented?</h3>
<p>I was curious about how <code>kill %2</code> works &ndash; does <code>%2</code> just get replaced with the
PID of the relevant process when you run the command, the way environment
variables are? Some quick experimentation shows that it isn&rsquo;t:</p>
<pre><code>$ echo kill %2
kill %2
$ type kill
kill is a function with definition
# Defined in /nix/store/vicfrai6lhnl8xw6azq5dzaizx56gw4m-fish-3.7.0/share/fish/config.fish
</code></pre>
<p>So <code>kill</code> is a fish builtin that knows how to interpret <code>%2</code>. Looking at
the source code (which is very easy in fish!), it uses <code>jobs -p %2</code> to expand <code>%2</code>
into a PID, and then runs the regular <code>kill</code> command.</p>
<h3 id="on-differences-between-shells">on differences between shells</h3>
<p>Job control is implemented by your shell. I use fish, but my sense is that the
basics of job control work pretty similarly in bash, fish, and zsh.</p>
<p>There are definitely some shells which don&rsquo;t have job control at all, but I&rsquo;ve
only used bash/fish/zsh so I don&rsquo;t know much about that.</p>
<p>Now let&rsquo;s get into a few reasons people use job control!</p>
<h3 id="reason-1-kill-a-command-that-s-not-responding-to-ctrl-c">reason 1: kill a command that&rsquo;s not responding to Ctrl+C</h3>
<p>I run into processes that don&rsquo;t respond to <code>Ctrl+C</code> pretty regularly, and it&rsquo;s
always a little annoying &ndash; I usually switch terminal tabs to find and kill and
the process. A bunch of people pointed out that you can do this in a faster way
using job control!</p>
<p>How to do this: Press <code>Ctrl+Z</code>, then <code>kill %1</code> (or the appropriate job number
if there&rsquo;s more than one stopped/background job, which you can get from
<code>jobs</code>). You can also <code>kill -9</code> if it&rsquo;s really not responding.</p>
<h3 id="reason-2-background-a-gui-app-so-it-s-not-using-up-a-terminal-tab">reason 2: background a GUI app so it&rsquo;s not using up a terminal tab</h3>
<p>Sometimes I start a GUI program from the command line (for example with
<code>wireshark some_file.pcap</code>), forget to start it in the background, and don&rsquo;t want it eating up my terminal tab.</p>
<p>How to do this:</p>
<ul>
<li>move the GUI program to the background by pressing <code>Ctrl+Z</code> and then running <code>bg</code>.</li>
<li>you can also run <code>disown</code> to remove it from the list of jobs, to make sure that
the GUI program won&rsquo;t get closed when you close your terminal tab.</li>
</ul>
<p>Personally I try to avoid starting GUI programs from the terminal if possible
because I don&rsquo;t like how their stdout pollutes my terminal (on a Mac I use
<code>open -a Wireshark</code> instead because I find it works better but sometimes you
don&rsquo;t have another choice.</p>
<h3 id="reason-2-5-accidentally-started-a-long-running-job-without-tmux">reason 2.5: accidentally started a long-running job without <code>tmux</code></h3>
<p>This is basically the same as the GUI app thing &ndash; you can move the job to the
background and disown it.</p>
<p>I was also curious about if there are ways to redirect a process&rsquo;s output to a
file after it&rsquo;s already started. A quick search turned up <a href="https://github.com/jerome-pouiller/reredirect/">this Linux-only tool</a> which is based on
<a href="https://blog.nelhage.com/">nelhage</a>&rsquo;s <a href="https://github.com/nelhage/reptyr">reptyr</a> (which lets you for example move a
process that you started outside of tmux to tmux) but I haven&rsquo;t tried either of
those.</p>
<h3 id="reason-3-running-a-command-while-using-vim">reason 3: running a command while using <code>vim</code></h3>
<p>A lot of people mentioned that if they want to quickly test something while
editing code in <code>vim</code> or another terminal editor, they like to use <code>Ctrl+Z</code>
to stop vim, run the command, and then run <code>fg</code> to go back to their editor.</p>
<p>You can also use this to check the output of a command that you ran before
starting <code>vim</code>.</p>
<p>I&rsquo;ve never gotten in the habit of this, probably because I mostly use a GUI
version of vim. I feel like I&rsquo;d also be likely to switch terminal tabs and end
up wondering &ldquo;wait&hellip; where did I put my editor???&rdquo; and have to go searching
for it.</p>
<h3 id="reason-4-preferring-interleaved-output">reason 4: preferring interleaved output</h3>
<p>A few people said that they prefer to the output of all of their commands being
interleaved in the terminal. This really surprised me because I usually think
of having the output of lots of different commands interleaved as being a <em>bad</em>
thing, but one person said that they like to do this with tcpdump specifically
and I think that actually sounds extremely useful. Here&rsquo;s what it looks like:</p>
<pre><code># start tcpdump
$ sudo tcpdump -ni any port 1234 &amp;
tcpdump: data link type PKTAP
tcpdump: verbose output suppressed, use -v[v]... for full protocol decode
listening on any, link-type PKTAP (Apple DLT_PKTAP), snapshot length 524288 bytes

# run curl
$ curl google.com:1234
13:13:29.881018 IP 192.168.1.173.49626 &gt; 142.251.41.78.1234: Flags [S], seq 613574185, win 65535, options [mss 1460,nop,wscale 6,nop,nop,TS val 2730440518 ecr 0,sackOK,eol], length 0
13:13:30.881963 IP 192.168.1.173.49626 &gt; 142.251.41.78.1234: Flags [S], seq 613574185, win 65535, options [mss 1460,nop,wscale 6,nop,nop,TS val 2730441519 ecr 0,sackOK,eol], length 0
13:13:31.882587 IP 192.168.1.173.49626 &gt; 142.251.41.78.1234: Flags [S], seq 613574185, win 65535, options [mss 1460,nop,wscale 6,nop,nop,TS val 2730442520 ecr 0,sackOK,eol], length 0
 
# when you're done, kill the tcpdump in the background
$ kill %1 
</code></pre>
<p>I think it&rsquo;s really nice here that you can see the output of tcpdump inline in
your terminal &ndash; when I&rsquo;m using tcpdump I&rsquo;m always switching back and forth and
I always get confused trying to match up the timestamps, so keeping everything
in one terminal seems like it might be a lot clearer. I&rsquo;m going to try it.</p>
<h3 id="reason-5-suspend-a-cpu-hungry-program">reason 5: suspend a CPU-hungry program</h3>
<p>One person said that sometimes they&rsquo;re running a very CPU-intensive program,
for example converting a video with <code>ffmpeg</code>, and they need to use the CPU for
something else, but don&rsquo;t want to lose the work that ffmpeg already did.</p>
<p>You can do this by pressing <code>Ctrl+Z</code> to pause the process, and then run <code>fg</code>
when you want to start it again.</p>
<h3 id="reason-6-you-accidentally-ran-ctrl-z">reason 6: you accidentally ran Ctrl+Z</h3>
<p>Many people replied that they didn&rsquo;t use job control <em>intentionally</em>, but
that they sometimes accidentally ran Ctrl+Z, which stopped whatever program was
running, so they needed to learn how to use <code>fg</code> to bring it back to the
foreground.</p>
<p>The were also some mentions of accidentally running <code>Ctrl+S</code> too (which stops
your terminal and I think can be undone with <code>Ctrl+Q</code>). My terminal totally
ignores <code>Ctrl+S</code> so I guess I&rsquo;m safe from that one though.</p>
<h3 id="reason-7-already-set-up-a-bunch-of-environment-variables">reason 7: already set up a bunch of environment variables</h3>
<p>Some folks mentioned that they already set up a bunch of environment variables
that they need to run various commands, so it&rsquo;s easier to use job control to
run multiple commands in the same terminal than to redo that work in another
tab.</p>
<h3 id="reason-8-it-s-your-only-option">reason 8: it&rsquo;s your only option</h3>
<p>Probably the most obvious reason to use job control to manage multiple
processes is &ldquo;because you have to&rdquo; &ndash; maybe you&rsquo;re in single-user mode, or on a
very restricted computer, or SSH&rsquo;d into a machine that doesn&rsquo;t have tmux or
screen and you don&rsquo;t want to create multiple SSH sessions.</p>
<h3 id="reason-9-some-people-just-like-it-better">reason 9: some people just like it better</h3>
<p>Some people also said that they just don&rsquo;t like using terminal tabs: for
instance a few folks mentioned that they prefer to be able to see all of their
terminals on the screen at the same time, so they&rsquo;d rather have 4 terminals on
the screen and then use job control if they need to run more than 4 programs.</p>
<h3 id="i-learned-a-few-new-tricks">I learned a few new tricks!</h3>
<p>I think my two main takeaways from thos post is I&rsquo;ll probably try out job control a little more for:</p>
<ol>
<li>killing processes that don&rsquo;t respond to Ctrl+C</li>
<li>running <code>tcpdump</code> in the background with whatever network command I&rsquo;m running, so I can see both of their output in the same place</li>
</ol>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[New zine: How Git Works!]]></title>
    <link href="https://jvns.ca/blog/2024/04/25/new-zine--how-git-works-/"/>
    <updated>2024-06-03T09:45:11+00:00</updated>
    <id>https://jvns.ca/blog/2024/04/25/new-zine--how-git-works-/</id>
    <content type="html"><![CDATA[<p>Hello! I&rsquo;ve been writing about git on here nonstop for months, and the git zine
is FINALLY done! It came out on Friday!</p>
<p>You can get it for $12 here:
<a href="https://wizardzines.com/zines/git">https://wizardzines.com/zines/git</a>, or get
an <a href="https://wizardzines.com/zines/all-the-zines/">14-pack of all my zines here</a>.</p>
<p>Here&rsquo;s the cover:</p>
<div align="center">
<a href="https://wizardzines.com/zines/git">
  <img width="600px" src="https://wizardzines.com/zines/git/cover-small.jpg">
  </a>
</div>
<h3 id="the-table-of-contents">the table of contents</h3>
<p>Here&rsquo;s the table of contents:</p>
<a href="https://wizardzines.com/zines/git/toc.png">
  <img width="600px" src="https://wizardzines.com/zines/git/toc.png">
</a>
<h3 id="who-is-this-zine-for">who is this zine for?</h3>
<p>I wrote this zine for people who have been using git for years and are still
afraid of it. As always &ndash; I think it sucks to be afraid of the tools that you
use in your work every day! I want folks to feel confident using git.</p>
<p>My goals are:</p>
<ul>
<li>To explain how some parts of git that initially seem scary (like &ldquo;detached
HEAD state&rdquo;) are pretty straightforward to deal with once you understand
what&rsquo;s going on</li>
<li>To show some parts of git you probably <em>should</em> be careful around.  For
example, the stash is one of the places in git where it&rsquo;s easiest to lose
your work in a way that&rsquo;s incredibly annoying to recover form, and I avoid
using it heavily because of that.</li>
<li>To clear up a few common misconceptions about how the core parts of git (like
commits, branches, and merging) work</li>
</ul>
<h3 id="what-s-the-difference-between-this-and-oh-shit-git">what&rsquo;s the difference between this and Oh Shit, Git!</h3>
<p>You might be wondering – Julia! You already have a zine about git! What’s going
on? <a href="https://wizardzines.com/zines/oh-shit-git">Oh Shit, Git!</a> is a set of tricks for fixing git messes. <a href="https://wizardzines.com/zines/git/">&ldquo;How Git Works&rdquo;</a>
explains how Git <strong>actually</strong> works.</p>
<p>Also, Oh Shit, Git! is the amazing <a href="https://sylormiller.com/">Katie Sylor Miller</a>&rsquo;s <a href="https://ohshitgit.com/">concept</a>: we made it
into a zine because I was such a huge fan of her work on it.</p>
<p>I think they go really well together.</p>
<h3 id="what-s-so-confusing-about-git-anyway">what&rsquo;s so confusing about git, anyway?</h3>
<p>This zine was really hard for me to write because when I started writing it,
I&rsquo;d been using git pretty confidently for 10 years. I had no real memory of
what it was <em>like</em> to struggle with git.</p>
<p>But thanks to a huge amount of help from <a href="https://marieflanagan.com/">Marie</a> as
well as everyone who talked to me about git on Mastodon, eventually I was able
to see that there are a lot of things about git that are counterintuitive,
misleading, or just plain confusing. These include:</p>
<ul>
<li><a href="https://jvns.ca/blog/2023/11/01/confusing-git-terminology/">confusing terminology</a> (for example &ldquo;fast-forward&rdquo;, &ldquo;reference&rdquo;, or &ldquo;remote-tracking branch&rdquo;)</li>
<li>misleading messages (for example how <code>Your branch is up to date with 'origin/main'</code> doesn&rsquo;t necessary mean that your branch is up to date with the <code>main</code> branch on the origin)</li>
<li>uninformative output (for example how I <em>STILL</em> can&rsquo;t reliably figure out which code comes from which branch when I&rsquo;m looking at a merge conflict)</li>
<li>a lack of guidance around handling diverged branches (for example how when you run <code>git pull</code> and your branch has diverged from the origin, it doesn&rsquo;t give you great guidance how to handle the situation)</li>
<li>inconsistent behaviour (for example how git&rsquo;s reflogs are almost always append-only, EXCEPT for the stash, where git will delete entries when you run <code>git stash drop</code>)</li>
</ul>
<p>The more I heard from people how about how confusing they find git, the more it
became clear that git really does not make it easy to figure out what its
internal logic is just by using it.</p>
<h3 id="handling-git-s-weirdnesses-becomes-pretty-routine">handling git&rsquo;s weirdnesses becomes pretty routine</h3>
<p>The previous section made git sound really bad, like &ldquo;how can anyone possibly
use this thing?&rdquo;.</p>
<p>But my experience is that after I learned what git actually means by all of its
weird error messages, dealing with it became pretty routine! I&rsquo;ll see an
<code>error: failed to push some refs to 'github.com:jvns/wizard-zines-site'</code>,
realize &ldquo;oh right, probably a coworker made some changes to <code>main</code> since I last
ran <code>git pull</code>&rdquo;, run <code>git pull --rebase</code> to incorporate their changes, and move
on with my day. The whole thing takes about 10 seconds.</p>
<p>Or if I see a <code>You are in 'detached HEAD' state</code> warning, I&rsquo;ll just make sure
to run <code>git checkout mybranch</code> before continuing to write code. No big deal.</p>
<p>For me (and for a lot of folks I talk to about git!), dealing with git&rsquo;s weird
language can become so normal that you totally forget why anybody would even
find it weird.</p>
<h3 id="a-little-bit-of-internals">a little bit of internals</h3>
<p>One of my biggest questions when writing this zine was how much to focus on
what&rsquo;s in the <code>.git</code> directory. We ended up deciding to include a couple of
pages about internals (&ldquo;inside .git&rdquo;, pages 14-15), but otherwise focus more on
git&rsquo;s <em>behaviour</em> when you use it and why sometimes git behaves in unexpected
ways.</p>
<p>This is partly because there are lots of great guides to git&rsquo;s internals
out there already (<a href="https://maryrosecook.com/blog/post/git-from-the-inside-out">1</a>, <a href="https://shop.jcoglan.com/building-git/">2</a>), and partly because I think even if you <em>have</em> read one
of these guides to git&rsquo;s internals, it isn&rsquo;t totally obvious how to connect
that information to what you actually see in git&rsquo;s user interface.</p>
<p>For example: it&rsquo;s easy to find documentation about remotes in git &ndash;
for example <a href="https://git-scm.com/book/en/v2/Git-Branching-Remote-Branches">this page</a> says:</p>
<blockquote>
<p>Remote-tracking branches [&hellip;] remind you where the branches in your remote
repositories were the last time you connected to them.</p>
</blockquote>
<p>But even if you&rsquo;ve read that, you might not realize that the statement <code>Your branch is up to date with 'origin/main'&quot;</code> in <code>git status</code> doesn&rsquo;t necessarily
mean that you&rsquo;re actually up to date with the remote <code>main</code> branch.</p>
<p>So in general in the zine we focus on the behaviour you see in Git&rsquo;s UI, and
then explain how that relates to what&rsquo;s happening internally in Git.</p>
<h3 id="the-cheat-sheet">the cheat sheet</h3>
<p>The zine also comes with a free printable cheat sheet: (click to get a PDF version)</p>
<a href="https://wizardzines.com/git-cheat-sheet.pdf">
  <img width="600px" src="https://wizardzines.com/images/cheat-sheet-smaller.png">
</a>
<h3 id="it-comes-with-an-html-transcript">it comes with an HTML transcript!</h3>
<p>The zine also comes with an HTML transcript, to (hopefully) make it easier to
read on a screen reader! Our Operations Manager, Lee, transcribed all of the
pages and wrote image descriptions. I&rsquo;d love feedback about the experience of
reading the zine on a screen reader if you try it.</p>
<h3 id="i-really-do-love-git">I really do love git</h3>
<p>I&rsquo;ve been pretty critical about git in this post, but I only write zines about
technologies I love, and git is no exception.</p>
<p>Some reasons I love git:</p>
<ul>
<li>it&rsquo;s fast!</li>
<li>it&rsquo;s backwards compatible! I learned how to use it 10 years ago and
everything I learned then is still true</li>
<li>there&rsquo;s tons of great free Git hosting available out there (GitHub! Gitlab! a
million more!), so I can easily back up all my code</li>
<li>simple workflows are REALLY simple (if I&rsquo;m working on a project on my own, I
can just run <code>git commit -am 'whatever'</code> and <code>git push</code> over and over again and it
works perfectly)</li>
<li>Almost every internal file in git is a pretty simple text file (or has a
version which is a text file), which makes me feel like I can always
understand exactly what&rsquo;s going on under the hood if I want to.</li>
</ul>
<p>I hope this zine helps some of you love it too.</p>
<h3 id="people-who-helped-with-this-zine">people who helped with this zine</h3>
<p>I don&rsquo;t make these zines by myself!</p>
<p>I worked with <a href="https://marieflanagan.com/">Marie Claire LeBlanc Flanagan</a> every
morning for 8 months to write clear explanations of git.</p>
<p>The cover is by Vladimir Kašiković,
Gersande La Flèche did copy editing,
James Coglan (of the great <a href="https://shop.jcoglan.com/building-git/">Building
Git</a>) did technical review, our
Operations Manager Lee did the transcription as well as a million other
things, my partner Kamal read the zine and told me which parts were off (as he
always does), and I had a million great conversations with Marco Rogers about
git.</p>
<p>And finally, I want to thank all the beta readers! There were 66 this time
which is a record! They left hundreds of comments about what was confusing,
what they learned, and which of my jokes were funny. It&rsquo;s always hard to hear
from beta readers that a page I thought made sense is actually extremely
confusing, and fixing those problems before the final version makes the zine so
much better.</p>
<h3 id="get-the-zine">get the zine</h3>
<p>Here are some links to get the zine again:</p>
<ul>
<li>get <a href="https://wizardzines.com/zines/git">How Git Works</a></li>
<li>get an <a href="https://wizardzines.com/zines/all-the-zines/">14-pack of all my zines here</a>.</li>
</ul>
<p>As always, you can get either a PDF version to print at home or a print version
shipped to your house. The only caveat is print orders will ship in <strong>July</strong> &ndash; I
need to wait for orders to come in to get an idea of how many I should print
before sending it to the printer.</p>
<h3 id="thank-you">thank you</h3>
<p>As always: if you&rsquo;ve bought zines in the past, thank you for all your support
over the years. And thanks to all of you (1000+ people!!!) who have already
bought the zine in the first 3 days. It&rsquo;s already set a record for most zines
sold in a single day and I&rsquo;ve been really blown away.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Notes on git's error messages]]></title>
    <link href="https://jvns.ca/blog/2024/04/10/notes-on-git-error-messages/"/>
    <updated>2024-04-10T12:43:14+00:00</updated>
    <id>https://jvns.ca/blog/2024/04/10/notes-on-git-error-messages/</id>
    <content type="html"><![CDATA[<p>While writing about Git, I&rsquo;ve noticed that a lot of folks struggle with Git&rsquo;s
error messages. I&rsquo;ve had many years to get used to these error messages so it
took me a really long time to understand <em>why</em> folks were confused, but having
thought about it much more, I&rsquo;ve realized that:</p>
<ol>
<li>sometimes I actually <em>am</em> confused by the error messages, I&rsquo;m just used to
being confused</li>
<li>I have a bunch of strategies for getting more information when the error
message git gives me isn&rsquo;t very informative</li>
</ol>
<p>So in this post, I&rsquo;m going to go through a bunch of Git&rsquo;s error messages,
list a few things that I think are confusing about them for each one, and talk
about what I do when I&rsquo;m confused by the message.</p>
<h3 id="improving-error-messages-isn-t-easy">improving error messages isn&rsquo;t easy</h3>
<p>Before we start, I want to say that trying to think about why these error
messages are confusing has given me a lot of respect for how difficult
maintaining Git is. I&rsquo;ve been thinking about Git for months, and for some of
these messages I really have no idea how to improve them.</p>
<p>Some things that seem hard to me about improving error messages:</p>
<ul>
<li>if you come up with an idea for a new message, it&rsquo;s hard to tell if it&rsquo;s actually better!</li>
<li>work like improving error messages often <a href="https://lwn.net/Articles/959768/">isn&rsquo;t funded</a></li>
<li>the error messages have to be translated (git&rsquo;s error messages are translated into <a href="https://github.com/git/git/tree/master/po">19 languages</a>!)</li>
</ul>
<p>That said, if you find these messages confusing, hopefully some of these notes
will help clarify them a bit.</p>
<style>
.error {
  color: #db322e;
}
.warning {
  color: #765900;
}
.bg {
  color: #fdf6e3
}
pre {
  background-color: #fdf6e3;
  padding: 10px;
  border-radius: 5px;
  /* wrap long lines */
  white-space: pre-wrap;
}

h2 a {
  color: black;
  text-decoration: none;
}

article span {
  padding: 0;
}

article a:hover {
  text-decoration: underline;
}
</style>
<h2 id="git-push-on-a-diverged-branch">
  <a href="#git-push-on-a-diverged-branch">
  error: <code>git push</code> on a diverged branch
  </a>
</h2>
<pre>
$ git push
To github.com:jvns/int-exposed
<span class="error">! [rejected]        main -> main (non-fast-forward)</span>
<span class="warning">error: failed to push some refs to 'github.com:jvns/int-exposed'
hint: Updates were rejected because the tip of your current branch is behind
hint: its remote counterpart. Integrate the remote changes (e.g.
hint: 'git pull ...') before pushing again.
hint: See the 'Note about fast-forwards' in 'git push --help' for details.</span>

$ git status
On branch main
Your branch and 'origin/main' have diverged,
and have 2 and 1 different commits each, respectively.
</pre>
<p>Some things I find confusing about this:</p>
<ol>
<li>You get the exact same error message whether the branch is just <strong>behind</strong>
or the branch has <strong>diverged</strong>. There&rsquo;s no way to tell which it is from this
message: you need to run <code>git status</code> or <code>git pull</code> to find out.</li>
<li>It says <code>failed to push some refs</code>, but it&rsquo;s not totally clear <em>which</em> references it
failed to push. I believe everything that failed to push is listed with <code>! [rejected]</code> on the previous line&ndash; in this case just the <code>main</code> branch.</li>
</ol>
<p><strong>What I like to do if I&rsquo;m confused:</strong></p>
<ul>
<li>I&rsquo;ll run <code>git status</code> to figure out what the state of my current branch is.</li>
<li>I think I almost never try to push more than one branch at a time, so I
usually totally ignore git&rsquo;s notes about which specific branch failed to push
&ndash; I just assume that it&rsquo;s my current branch</li>
</ul>
<h2 id="git-pull-on-a-diverged-branch">
  <a href="#git-pull-on-a-diverged-branch">
  error: <code>git pull</code> on a diverged branch
  </a>
</h2>
<pre>
$ git pull
<span class="warning">hint: You have divergent branches and need to specify how to reconcile them.
hint: You can do so by running one of the following commands sometime before
hint: your next pull:
hint:
hint:   git config pull.rebase false  # merge
hint:   git config pull.rebase true   # rebase
hint:   git config pull.ff only       # fast-forward only
hint:
hint: You can replace "git config" with "git config --global" to set a default
hint: preference for all repositories. You can also pass --rebase, --no-rebase,
hint: or --ff-only on the command line to override the configured default per
hint: invocation.</span>
fatal: Need to specify how to reconcile divergent branches.
</pre>
<p>The main thing I think is confusing here is that git is presenting you with a
kind of overwhelming number of options: it&rsquo;s saying that you can either:</p>
<ol>
<li>configure <code>pull.rebase false</code>, <code>pull.rebase true</code>, or <code>pull.ff only</code> locally</li>
<li>or configure them globally</li>
<li>or run <code>git pull --rebase</code> or <code>git pull --no-rebase</code></li>
</ol>
<p>It&rsquo;s very hard to imagine how a beginner to git could easily use this hint to
sort through all these options on their own.</p>
<p>If I were explaining this to a friend, I&rsquo;d say something like &ldquo;you can use <code>git pull --rebase</code>
or <code>git pull --no-rebase</code> to resolve this with a rebase or merge
<em>right now</em>, and if you want to set a permanent preference, you can do that
with <code>git config pull.rebase false</code> or <code>git config pull.rebase true</code>.</p>
<p><code>git config pull.ff only</code> feels a little redundant to me because that&rsquo;s git&rsquo;s
default behaviour anyway (though it wasn&rsquo;t always).</p>
<p><strong>What I like to do here:</strong></p>
<ul>
<li>run <code>git status</code> to see the state of my current branch</li>
<li>maybe run <code>git log origin/main</code> or <code>git log</code> to see what the diverged commits are</li>
<li>usually run <code>git pull --rebase</code> to resolve it</li>
<li>sometimes I&rsquo;ll run <code>git push --force</code> or <code>git reset --hard origin/main</code> if I
want to throw away my local work or remote work (for example because I
accidentally commited to the wrong branch, or because I ran <code>git commit --amend</code> on a personal branch that only I&rsquo;m using and want to force push)</li>
</ul>
<h2 id="git-checkout-asdf">
  <a href="#git-checkout-asdf">
  error: <code>git checkout asdf</code> (a branch that doesn't exist)
  </a>
</h2>
<pre>
$ git checkout asdf
error: pathspec 'asdf' did not match any file(s) known to git
</pre>
<p>This is a little weird because we my intention was to check out a <strong>branch</strong>,
but <code>git checkout</code> is complaining about a <strong>path</strong> that doesn&rsquo;t exist.</p>
<p>This is happening because <code>git checkout</code>&rsquo;s first argument can be either a
branch or a path, and git has no way of knowing which one you intended. This
seems tricky to improve, but I might expect something like &ldquo;No such branch,
commit, or path: asdf&rdquo;.</p>
<p><strong>What I like to do here:</strong></p>
<ul>
<li>in theory it would be good to use <code>git switch</code> instead, but I keep using <code>git checkout</code> anyway</li>
<li>generally I just remember that I need to decode this as &ldquo;branch <code>asdf</code> doesn&rsquo;t exist&rdquo;</li>
</ul>
<h2 id="git-switch-asdf">
  <a href="#git-switch-asdf">
  error: <code>git switch asdf</code> (a branch that doesn't exist)
  </a>
</h2>
<pre>
$ git switch asdf
fatal: invalid reference: asdf
</pre>
<p><code>git switch</code> only accepts a branch as an argument (unless you pass <code>-d</code>), so why is it saying <code>invalid reference: asdf</code> instead of <code>invalid branch: asdf</code>?</p>
<p>I think the reason is that internally, <code>git switch</code> is trying to be helpful in its error messages: if you run <code>git switch v0.1</code> to switch to a tag, it&rsquo;ll say:</p>
<pre><code>$ git switch v0.1
fatal: a branch is expected, got tag 'v0.1'`
</code></pre>
<p>So what git is trying to communicate with <code>fatal: invalid reference: asdf</code> is
&ldquo;<code>asdf</code> isn&rsquo;t a branch, but it&rsquo;s not a tag either, or any other reference&rdquo;. From my various <a href="https://jvns.ca/blog/2024/03/28/git-poll-results/">git polls</a> my impression is that
a lot of git users have literally no idea what a &ldquo;reference&rdquo; is in git, so I&rsquo;m not sure if that&rsquo;s coming across.</p>
<p><strong>What I like to do here:</strong></p>
<p>90% of the time when a git error message says <code>reference</code> I just mentally
replace it with <code>branch</code> in my head.</p>
<h2 id="detached-head">
  error: <a href="#detached-head"><code>git checkout HEAD^</code></a>
</h2>
<pre>$ git checkout HEAD^
Note: switching to 'HEAD^'.

You are in 'detached HEAD' state. You can look around, make experimental
changes and commit them, and you can discard any commits you make in this
state without impacting any branches by switching back to a branch.

If you want to create a new branch to retain commits you create, you may
do so (now or later) by using -c with the switch command. Example:

  git switch -c <new-branch-name>

Or undo this operation with:

  git switch -

Turn off this advice by setting config variable advice.detachedHead to false

HEAD is now at 182cd3f add "swap byte order" button
</pre>
<p>
This is a tough one. Definitely a lot of people are confused about this
message, but obviously there's been a lot of effort to improve it too. I don't
have anything smart to say about this one.
</p>
<p><strong>What I like to do here:</strong></p>
<ul>
<li>my shell prompt tells me if I&rsquo;m in detached HEAD state, and generally I can remember not to make new commits while in that state</li>
<li>when I&rsquo;m done looking at whatever old commits I wanted to look at, I&rsquo;ll run <code>git checkout main</code> or something to go back to a branch</li>
</ul>
<h2 id="rebase-in-progress">
  <a href="#rebase-in-progress">
  message: <code>git status</code> when a rebase is in progress
  </a>  
</h2>
<p>This isn&rsquo;t an error message, but I still find it a little confusing on its own:</p>
<pre>
$ git status
<span class="error">interactive rebase in progress;</span> onto c694cf8
Last command done (1 command done):
   pick 0a9964d wip
No commands remaining.
You are currently rebasing branch 'main' on 'c694cf8'.
  (fix conflicts and then run "git rebase --continue")
  (use "git rebase --skip" to skip this patch)
  (use "git rebase --abort" to check out the original branch)

Unmerged paths:
  (use "git restore --staged <file>..." to unstage)
  (use "git add <file>..." to mark resolution)
  <span class="error">both modified:   index.html</span>

no changes added to commit (use "git add" and/or "git commit -a")
</pre>
<p>Two things I think could be clearer here:</p>
<ol>
<li>I think it would be nice if <code>You are currently rebasing branch 'main' on 'c694cf8'.</code> were on the first line instead of the 5th line &ndash; right now the first line doesn&rsquo;t say which branch you&rsquo;re rebasing.</li>
<li>In this case, <code>c694cf8</code> is actually <code>origin/main</code>, so I feel like <code>You are currently rebasing branch 'main' on 'origin/main'</code> might be even clearer.</li>
</ol>
<p><strong>What I like to do here:</strong></p>
<p>My shell prompt includes the branch that I&rsquo;m currently rebasing, so I rely on that instead of the output of <code>git status</code>.</p>
<h2 id="merge-deleted">
  <a href="#merge-deleted">
  error: <code>git rebase</code> when a file has been deleted
  </a>
</h2>
<pre>
$ git rebase main
CONFLICT (modify/delete): index.html deleted in 0ce151e (wip) and modified in HEAD.  Version HEAD of index.html left in tree.
error: could not apply 0ce151e... wip
</pre>
<p>The thing I still find confusing about this is &ndash; <code>index.html</code> was modified in
<code>HEAD</code>. But what is <code>HEAD</code>? Is it the commit I was working on when I started
the merge/rebase, or is it the commit from the other branch? (the answer is
&ldquo;<code>HEAD</code> is your branch if you&rsquo;re doing a merge, and it&rsquo;s the &ldquo;other branch&rdquo; if
you&rsquo;re doing a rebase, but I always find that hard to remember)</p>
<p>I think I would personally find it easier to understand if the message listed the branch names if possible, something like this:</p>
<pre><code>CONFLICT (modify/delete): index.html deleted on `main` and modified on `mybranch`
</code></pre>
<h2 id="merge-ours">
  <a href="#merge-ours">
  error: <code>git status</code> during a merge or rebase (who is "them"?)
  </a>
</h2>
<pre>
$ git status 
On branch master
You have unmerged paths.
  (fix conflicts and run "git commit")
  (use "git merge --abort" to abort the merge)
<p>Unmerged paths:
(use &ldquo;git add/rm <file>&hellip;&rdquo; as appropriate to mark resolution)
deleted by them: the_file</p>
<p>no changes added to commit (use &ldquo;git add&rdquo; and/or &ldquo;git commit -a&rdquo;)
</pre></p>
<p>I find this one confusing in exactly the same way as the previous message: it
says <code>deleted by them:</code>, but what &ldquo;them&rdquo; refers to depends on whether you did a merge or rebase or cherry-pick.</p>
<ul>
<li>for a merge, <code>them</code> is the other branch you merged in</li>
<li>for a rebase, <code>them</code> is the branch that you were on when you ran <code>git rebase</code></li>
<li>for a cherry-pick, I guess it&rsquo;s the commit you cherry-picked</li>
</ul>
<p><strong>What I like to do if I&rsquo;m confused:</strong></p>
<ul>
<li>try to remember what I did</li>
<li>run <code>git show main --stat</code> or something to see what I did on the <code>main</code> branch if I can&rsquo;t remember</li>
</ul>
<h2 id="git clean">
  <a href="#git-clean">
  error: <code>git clean</code>
  </a>
</h2>
<pre>
$ git clean
fatal: clean.requireForce defaults to true and neither -i, -n, nor -f given; refusing to clean
</pre>
<p>I just find it a bit confusing that you need to look up what <code>-i</code>, <code>-n</code> and
<code>-f</code> are to be able to understand this error message. I&rsquo;m personally way too
lazy to do that so even though I&rsquo;ve probably been using <code>git clean</code> for 10
years I still had no idea what <code>-i</code> stood for (<code>interactive</code>) until I was
writing this down.</p>
<p><strong>What I like to do if I&rsquo;m confused:</strong></p>
<p>Usually I just chaotically run <code>git clean -f</code> to delete all my untracked files
and hope for the best, though I might actually switch to <code>git clean -i</code>  now
that I know what <code>-i</code> stands for. Seems a lot safer.</p>
<h3 id="that-s-all">that&rsquo;s all!</h3>
<p>Hopefully some of this is helpful!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Making crochet cacti]]></title>
    <link href="https://jvns.ca/blog/2024/04/01/making-crochet-cacti/"/>
    <updated>2024-04-01T07:37:00+00:00</updated>
    <id>https://jvns.ca/blog/2024/04/01/making-crochet-cacti/</id>
    <content type="html"><![CDATA[<p>I noticed some tech bloggers I follow have been making <a href="https://www.aprilcools.club/">April Cools Day</a> posts about topics they don&rsquo;t normally write
about (like <a href="https://ntietz.com/blog/decaf-is-good-actually/">decaf</a> or <a href="https://www.hillelwayne.com/post/microscopy/">microscopes</a>). The goal isn&rsquo;t to
trick anyone, just to write about something different for a day.</p>
<p>I thought those posts were fun so here is a post with some notes on learning to crochet tiny cacti.</p>
<h3 id="first-the-cacti">first, the cacti</h3>
<p>I&rsquo;ve been trying to do some non-computer hobbies, without putting a lot of
pressure on myself to be &ldquo;good&rdquo; at them. Here are some cacti I crocheted:</p>
<img src="https://jvns.ca/images/cacti.png">
<p>They are a little wonky and I like them.</p>
<h3 id="a-couple-of-other-critters">a couple of other critters</h3>
<p>Here are a couple of other things I made: an elephant, an orange guy, a
much earlier attempt at a cactus, and an in-progress cactus</p>
<img src="https://jvns.ca/images/elephant.png" width="200px">
<img src="https://jvns.ca/images/orange-guy.png" width="200px">
<img src="https://jvns.ca/images/cactus2.png" width="200px">
<img src="https://jvns.ca/images/cactus3.png" width="200px">
<p>Some of these are also pretty wonky, but sometimes it adds to the charm: for
example the elephant&rsquo;s head is attached at an angle which was not on purpose
but I think adds to the effect. (<a href="https://www.etsy.com/ca/listing/789349199/mr-orange-monster-amigurumi-crochet">orange guy pattern</a>, <a href="https://hellostitchesxo.com.au/amigurumi-elephant-crochet-free-pattern/">elephant pattern</a>)</p>
<p>I haven&rsquo;t really been making clothing: I like working in a pretty chaotic way
and I think you need to be a lot more careful when you make clothing so that it
will actually fit.</p>
<h3 id="the-first-project-a-mouse">the first project: a mouse</h3>
<p>The first project I made was this little <a href="https://www.yarnhild.com/crochet-amigurumi-mouse/">mouse</a>. It took me a few
hours (maybe 3 hours?) and I made a lot of mistakes and it definitely was not
as cute as it was in the pictures in the pattern, but it was still good! I
can&rsquo;t find a picture right now though.</p>
<h3 id="buying-patterns-is-great">buying patterns is great</h3>
<p>Originally I started out using free patterns, but I found some cacti patterns I really liked in an ebook called <a href="https://knotmonsters.com/products/12-crochet-mini-cactus-garden-patterns-ebook-pdf-knotmonsters-amigurumi-crochet-patterns-beginner-easy-simple-basic-plant-cacti-project-lot">Knotmonsters: Cactus Gardens Edition</a>, so I bought it.</p>
<p>I like the patterns in that book and also buying patterns seems like a nice way
to support people who are making fun patterns. I found <a href="https://www.youtube.com/watch?v=KTvHB9HTPQI">this guide to designing your own patterns</a> through
searching on Ravelry and it seems like a lot of work! Maybe I will do it one
day but for now I appreciate the
work of other people who make the patterns.</p>
<h3 id="modifying-patterns-chaotically-is-great-too">modifying patterns chaotically is great too</h3>
<p>I&rsquo;ve been modifying all of the patterns I make in a somewhat chaotic way, often
just because I made a mistake somewhere along the way and then decide to move
forward and change the pattern to adjust for the mistake instead of undoing my
work. Some of of the changes I&rsquo;ve made are:</p>
<ul>
<li>remove rows</li>
<li>put fewer stitches in a row</li>
<li>use a different stitch</li>
</ul>
<p>This doesn&rsquo;t always work but often it works well enough, and I think all of the
mistakes help me learn.</p>
<h3 id="no-safety-eyes">no safety eyes</h3>
<p>A lot of the patterns I&rsquo;ve been seeing for animals suggest using &ldquo;safety eyes&rdquo;
(plastic eyes). I didn&rsquo;t really feel like buying those , so I&rsquo;ve been
embroidering eyes on instead. &ldquo;Embroidering&rdquo; might not be accurate, really I
just sew some black yarn on in a haphazard way and hope it doesn&rsquo;t come out
looking too weird.</p>
<p>My crochet kit came with a big plastic yarn needle that I&rsquo;ve been using to
embroider and also</p>
<h3 id="no-stitch-markers">no stitch markers</h3>
<p>My crochet kit came with some plastic &ldquo;stitch markers&rdquo; which you can use to
figure out where the beginning of your row is, so you know when you&rsquo;re done.
I&rsquo;ve been finding it easier to just use a short piece of scrap yarn instead.</p>
<h3 id="on-dealing-with-all-the-counting">on dealing with all the counting</h3>
<p>In crochet there is a LOT of counting. Like &ldquo;single crochet 3 times, then
double crochet 1 time, then repeat that 6 times&rdquo;. I find it hard to do that
accurately without making mistakes, and all of the counting is not that fun! A
few things that have helped:</p>
<ul>
<li>go back and look at my stitches to see what I did (&ldquo;have I done 1 single
crochet, or 2?&rdquo;). I&rsquo;m not actually very good at doing this, but I find it
easier to see my stitches with wool/cotton yarn than with acrylic yarn for
some reason.</li>
<li>count how many stitches in total I&rsquo;ve done since the last row, and make sure
it seems approximately right (&ldquo;well, I&rsquo;m supposed to have 20 stitches and I
have 19, that&rsquo;s pretty close!&rdquo;). Then I&rsquo;ll maybe just add an extra stitch in
the wrong place to adjust, or maybe just leave it the way it is.</li>
</ul>
<h3 id="notes-on-yarn">notes on yarn</h3>
<p>So far I&rsquo;ve tried three kinds of yarn: merino (for the elephant), cotton (for
the cacti), and acrylic (for the orange dude). I still don&rsquo;t know
which one I like best, but since I&rsquo;m doing small projects it feels like the
right move is still to just buy small amounts of yarn and experiment. I think I
like the cotton and merino more than the acrylic.</p>
<p>For the cacti I used <a href="https://www.artisanthropy.ca/products/rico-ricorumi-dk">Ricorumi</a> cotton yarn,
which comes in tiny balls (which is good for me because if I don&rsquo;t end up
liking it, I don&rsquo;t have a lot of extra!) and in a lot of different colours.</p>
<p>There are a lot of yarn weights (lace! sock! sport! DK! worsted! bulky! and
more!). I don&rsquo;t really underestand them yet but I think so far I&rsquo;ve been mostly
using DK and worsted yarn.</p>
<h3 id="hook-size-who-knows">hook size? who knows!</h3>
<p>I&rsquo;ve mostly been using a 3.5mm hook, probably because I read a tutorial that
said to use a 3.5mm hook. It seems to work fine! I used a larger hook size when
making a hat, and that also worked.</p>
<p>I still don&rsquo;t really know how to choose hook sizes but that doesn&rsquo;t seem to
have a lot of consequences when making cacti.</p>
<h3 id="every-stitch-i-ve-learned">every stitch I&rsquo;ve learned</h3>
<p>I think I&rsquo;ve probably only learned how to do 5 things in crochet so far:</p>
<ul>
<li>magic ring (mr)</li>
<li>single crochet (sc)</li>
<li>half double crochet (hdc)</li>
<li>front post half double crochet (fphdc)</li>
<li>double crochet (dc)</li>
<li>back loops only/front loops only (flo/blo)</li>
<li>increase/decrease</li>
</ul>
<p>The way I&rsquo;ve been approaching learning new crochet stitches is:</p>
<ol>
<li>find a pattern I want to make</li>
<li>start it without reviewing it very much at all</li>
<li>when I get to a stitch I don&rsquo;t know, watch youtube videos</li>
<li>don&rsquo;t watch it very carefully and get it wrong</li>
<li>eventually realize that it doesn&rsquo;t look right at all, rewatch the video, and continue</li>
</ol>
<p>I&rsquo;ve been using <a href="https://sarahmaker.com/half-double-crochet/">Sarah Maker</a>&rsquo;s pages a lot, except for the magic ring where I used <a href="https://www.youtube.com/watch?v=p298HxgsO1s">this 3-minute youtube video</a>.</p>
<p>The magic ring took me a very long time to learn to do correctly, I didn&rsquo;t pay
attention very closely to the 3-minute youtube video so I did it wrong in maybe
4 projects before I figured out how to do it right.</p>
<h3 id="every-single-thing-i-ve-bought">every single thing I&rsquo;ve bought</h3>
<p>So far I&rsquo;ve only needed:</p>
<ol>
<li>a crochet kit (which I got as a gift). it came with yarn, a bunch of crochet needles in different sizes, big sewing needles, and some other things I haven&rsquo;t needed yet.</li>
<li>some Ricorumi cotton (for the cacti)</li>
<li>1 ball of gray yarn (for the elephant)</li>
</ol>
<p>I&rsquo;ve been trying to not buy too much stuff, because I never know if I&rsquo;ll get
bored with a new hobby, and if I get bored it&rsquo;s annoying to have a bunch of
stuff lying around. Some examples of things I&rsquo;ve avoided buying so far:</p>
<ul>
<li>Instead of buying polyester fiberfill, to fill all of the critters I&rsquo;ve just
been cutting up an old sweater I have that was falling apart.</li>
<li>I&rsquo;ve been embroidering the eyes instead of buying safety eyes</li>
</ul>
<p>Everything I have right now fits in a the box the crochet kit came in (which is
about the size of a large shoebox), and my plan is to keep it that way for a
while.</p>
<h3 id="that-s-all">that&rsquo;s all!</h3>
<p>Mainly what I like about crochet so far is that:</p>
<ul>
<li>it&rsquo;s a way to not be on the computer, and you can chat with people while doing it</li>
<li>you can do it without buying too much stuff, it&rsquo;s pretty compact</li>
<li>I end up with cacti in our living room which is great (I also have a bunch of real succulents, so they go with those)</li>
<li>it seems extremely forgiving of mistakes and experimentation</li>
</ul>
<p>There are definitely still a lot of things I&rsquo;m doing &ldquo;wrong&rdquo; but it&rsquo;s fun to
learn through trial and error.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Some Git poll results]]></title>
    <link href="https://jvns.ca/blog/2024/03/28/git-poll-results/"/>
    <updated>2024-03-28T08:35:56+00:00</updated>
    <id>https://jvns.ca/blog/2024/03/28/git-poll-results/</id>
    <content type="html"><![CDATA[<p>A new thing I&rsquo;ve been trying while writing this Git zine is doing a bunch of polls on Mastodon to learn about:</p>
<ul>
<li>which git commands/workflows people use (like &ldquo;do you use merge or rebase more?&rdquo; or &ldquo;do you put your current git branch in your shell prompt?&rdquo;)</li>
<li>what kinds of problems people run into with git (like &ldquo;have you lost work because of a git problem in the last year or two?&rdquo;)</li>
<li>which terminology people find confusing (like &ldquo;how confident do you feel that you know what HEAD means in git?&rdquo;)</li>
<li>how people think about various git concepts (&ldquo;how do you think about git branches?&rdquo;)</li>
<li>in what ways my usage of git is &ldquo;normal&rdquo; and in what ways it&rsquo;s &ldquo;weird&rdquo;. Where am I pretty similar to the majority of people, and where am I different?</li>
</ul>
<p>It&rsquo;s been a lot of fun and some of the results have been surprising to me, so
here are some of the results. I&rsquo;m partly just posting these so that I can have
them all in one place for myself to refer to, but maybe some of you will find
them interesting too.</p>
<h3 id="these-polls-are-highly-unscientific">these polls are highly unscientific</h3>
<p>Polls on social media that I thought about for approximately 45 seconds before
posting are not the most rigorous way of doing user research, so I&rsquo;m pretty
cautious about drawing conclusions from them. Potential problems include: I
phrased the poll badly, the set of possible responses aren&rsquo;t chosen very
carefully, some of the poll responses I just picked because I thought they were
funny, and the set of people who follow me on Mastodon is not representative of
all git users.</p>
<p>But here are a couple of examples of why I still find these poll results useful:</p>
<ul>
<li>The first poll is &ldquo;what&rsquo;s your approach to merge commits and rebase in git&rdquo;?
600 people (30% of responders) replied &ldquo;I usually use merge, rarely/never
rebase&rdquo;. It&rsquo;s helpful for me to know that there are a lot of people
out there who rarely/never use rebase, because I use rebase all the time &ndash;
it&rsquo;s a good reminder that my experiences isn&rsquo;t necessarily representative.</li>
<li>For the poll &ldquo;how confident do you feel that you know what HEAD means in
git?&rdquo;, 14% of people replied &ldquo;literally no idea&rdquo;. That tells me to be careful
about assuming that people know what <code>HEAD</code> means in my writing.</li>
</ul>
<h3 id="where-to-read-more">where to read more</h3>
<p>If you want to read more about any given poll, you can click at the date at the
bottom &ndash; there&rsquo;s usually a bunch of interesting follow-up discussion.</p>
<p>Also this post has a lot of CSS so it might not work well in a feed reader.</p>
<p>Now! Here are the polls! I&rsquo;m mostly just going to post the results without
commenting on them.</p>
<h3 id="merge-and-rebase">merge and rebase</h3>
<div class="poll-wrapper" lang="en"><p>poll: what's your approach to merge commits and rebase in git?</p><div data-component="Poll" data-props='{"disabled":true,"poll":{"id":"2964","expires_at":"2023-12-15T21:06:54.095Z","expired":true,"multiple":false,"votes_count":1872,"voters_count":1872,"options":[{"title":"usually rebase, rarely/never create merge commits","votes_count":771},{"title":"usually merge, rarely/never rebase","votes_count":553},{"title":"i do both all the time","votes_count":455},{"title":"other / show results","votes_count":93}],"emojis":[]}}'><div class="poll"><ul><li><label class="poll_option"><span class="poll_number">41%</span><span class="poll_option_text">usually rebase, rarely/never create merge commits</span></label><progress aria-hidden="true" max="100" value="41"><span class="poll_chart"></span></progress></li><li><label class="poll_option"><span class="poll_number">29%</span><span class="poll_option_text">usually merge, rarely/never rebase</span></label><progress aria-hidden="true" max="100" value="29"><span class="poll_chart"></span></progress></li><li><label class="poll_option"><span class="poll_number">24%</span><span class="poll_option_text">i do both all the time</span></label><progress aria-hidden="true" max="100" value="24"><span class="poll_chart"></span></progress></li><li><label class="poll_option"><span class="poll_number">4%</span><span class="poll_option_text">other / show results</span></label><progress aria-hidden="true" max="100" value="4"><span class="poll_chart"></span></progress></li></ul><div class="poll_footer"><span>1872 people</span> · <a class="detailed-status_datetime u-url u-uid" href="https://social.jvns.ca/@b0rk/111580808091928044" rel="noopener noreferrer" target="_blank"><time class="formatted" datetime="2023-12-14T21:06:54Z" title="Dec 14, 2023, 21:06">Dec 14, 2023, 21:06</time></a></div></div></div></div>
<h3 id="merge-conflicts">merge conflicts</h3>
<div class="poll-wrapper" lang="en"><p>poll: if you use git, how often do you deal with nontrivial merge conflicts? (like where 2 people were really editing the same code at the same time and you need to take time to think about how to reconcile the edits)</p><div data-component="Poll" data-props='{"disabled":true,"poll":{"id":"3063","expires_at":"2024-01-04T18:43:50.229Z","expired":true,"multiple":false,"votes_count":2009,"voters_count":2009,"options":[{"title":"~every week or so","votes_count":212},{"title":"~every month or so","votes_count":664},{"title":"very rarely/never (a few times a year at most)","votes_count":1047},{"title":"other/show results","votes_count":86}],"emojis":[]}}'><div class="poll"><ul><li><label class="poll_option"><span class="poll_number">10%</span><span class="poll_option_text">~every week or so</span></label><progress aria-hidden="true" max="100" value="10"><span class="poll_chart"></span></progress></li><li><label class="poll_option"><span class="poll_number">33%</span><span class="poll_option_text">~every month or so</span></label><progress aria-hidden="true" max="100" value="33"><span class="poll_chart"></span></progress></li><li><label class="poll_option"><span class="poll_number">52%</span><span class="poll_option_text">very rarely/never (a few times a year at most)</span></label><progress aria-hidden="true" max="100" value="52"><span class="poll_chart"></span></progress></li><li><label class="poll_option"><span class="poll_number">4%</span><span class="poll_option_text">other/show results</span></label><progress aria-hidden="true" max="100" value="4"><span class="poll_chart"></span></progress></li></ul><div class="poll_footer"><span>2009 people</span> · <a class="detailed-status_datetime u-url u-uid" href="https://social.jvns.ca/@b0rk/111693491747888221" rel="noopener noreferrer" target="_blank"><time class="formatted" datetime="2024-01-03T18:43:50Z" title="Jan 03, 2024, 18:43">Jan 03, 2024, 18:43</time></a></div></div></div></div>
<div class="poll-wrapper" lang="en"><p>another merge conflict poll:</p><p>have you ever seen a bug in production caused by an incorrect merge conflict resolution? I've heard about this as a reason to prefer merges over rebase (because it makes the merge conflict resolution easier to audit) and I'm curious about how common it is</p><div data-component="Poll" data-props='{"disabled":true,"poll":{"id":"3064","expires_at":"2024-01-04T19:00:03.339Z","expired":true,"multiple":false,"votes_count":1482,"voters_count":1482,"options":[{"title":"yes, many times","votes_count":214},{"title":"yes, but only once or twice","votes_count":701},{"title":"no","votes_count":479},{"title":"other/show results","votes_count":88}],"emojis":[]}}'><div class="poll"><ul><li><label class="poll_option"><span class="poll_number">14%</span><span class="poll_option_text">yes, many times</span></label><progress aria-hidden="true" max="100" value="14"><span class="poll_chart"></span></progress></li><li><label class="poll_option"><span class="poll_number">47%</span><span class="poll_option_text">yes, but only once or twice</span></label><progress aria-hidden="true" max="100" value="47"><span class="poll_chart"></span></progress></li><li><label class="poll_option"><span class="poll_number">32%</span><span class="poll_option_text">no</span></label><progress aria-hidden="true" max="100" value="32"><span class="poll_chart"></span></progress></li><li><label class="poll_option"><span class="poll_number">5%</span><span class="poll_option_text">other/show results</span></label><progress aria-hidden="true" max="100" value="5"><span class="poll_chart"></span></progress></li></ul><div class="poll_footer"><span>1482 people</span> · <a class="detailed-status_datetime u-url u-uid" href="https://social.jvns.ca/@b0rk/111693554375140434" rel="noopener noreferrer" target="_blank"><time class="formatted" datetime="2024-01-03T18:59:45Z" title="Jan 03, 2024, 18:59">Jan 03, 2024, 18:59</time></a></div></div></div></div>
<p>I thought it was interesting in the next one that &ldquo;edit the weird text file by hand&rdquo; was most people&rsquo;s preference:</p>
<div class="poll-wrapper" lang="en"><p>poll: when you have a merge conflict, how do you prefer to handle it?</p><div data-component="Poll" data-props='{"disabled":true,"poll":{"id":"3293","expires_at":"2024-02-23T15:17:33.601Z","expired":true,"multiple":false,"votes_count":2380,"voters_count":2380,"options":[{"title":"edit the weird text file by hand","votes_count":1400},{"title":"use a merge conflict tool","votes_count":815},{"title":"delete your work and start over","votes_count":123},{"title":"other","votes_count":42}],"emojis":[]}}'><div class="poll"><ul><li><label class="poll_option"><span class="poll_number">58%</span><span class="poll_option_text">edit the weird text file by hand</span></label><progress aria-hidden="true" max="100" value="58"><span class="poll_chart"></span></progress></li><li><label class="poll_option"><span class="poll_number">34%</span><span class="poll_option_text">use a merge conflict tool</span></label><progress aria-hidden="true" max="100" value="34"><span class="poll_chart"></span></progress></li><li><label class="poll_option"><span class="poll_number">5%</span><span class="poll_option_text">delete your work and start over</span></label><progress aria-hidden="true" max="100" value="5"><span class="poll_chart"></span></progress></li><li><label class="poll_option"><span class="poll_number">1%</span><span class="poll_option_text">other</span></label><progress aria-hidden="true" max="100" value="1"><span class="poll_chart"></span></progress></li></ul><div class="poll_footer"><span>2380 people</span> · <a class="detailed-status_datetime u-url u-uid" href="https://social.jvns.ca/@b0rk/111975796153138514" rel="noopener noreferrer" target="_blank"><time class="formatted" datetime="2024-02-22T15:17:33Z" title="Feb 22, 2024, 15:17">Feb 22, 2024, 15:17</time></a></div></div></div></div>
<div class="poll-wrapper" lang="en"><p>merge conflict follow up: if you prefer to edit the weird text file by hand instead of using a dedicated merge conflict tool, why is that?</p><div data-component="Poll" data-props="{&quot;disabled&quot;:true,&quot;poll&quot;:{&quot;id&quot;:&quot;3300&quot;,&quot;expires_at&quot;:&quot;2024-02-24T20:23:15.110Z&quot;,&quot;expired&quot;:true,&quot;multiple&quot;:false,&quot;votes_count&quot;:1093,&quot;voters_count&quot;:1093,&quot;options&quot;:[{&quot;title&quot;:&quot;most merge conflicts are simple&quot;,&quot;votes_count&quot;:263},{&quot;title&quot;:&quot;it's infrequent, not worth learning another tool&quot;,&quot;votes_count&quot;:256},{&quot;title&quot;:&quot;prefer to use my usual text editor&quot;,&quot;votes_count&quot;:425},{&quot;title&quot;:&quot;other&quot;,&quot;votes_count&quot;:149}],&quot;emojis&quot;:[]}}"><div class="poll"><ul><li><label class="poll_option"><span class="poll_number">24%</span><span class="poll_option_text">most merge conflicts are simple</span></label><progress aria-hidden="true" max="100" value="24"><span class="poll_chart"></span></progress></li><li><label class="poll_option"><span class="poll_number">23%</span><span class="poll_option_text">it's infrequent, not worth learning another tool</span></label><progress aria-hidden="true" max="100" value="23"><span class="poll_chart"></span></progress></li><li><label class="poll_option"><span class="poll_number">38%</span><span class="poll_option_text">prefer to use my usual text editor</span></label><progress aria-hidden="true" max="100" value="38"><span class="poll_chart"></span></progress></li><li><label class="poll_option"><span class="poll_number">13%</span><span class="poll_option_text">other</span></label><progress aria-hidden="true" max="100" value="13"><span class="poll_chart"></span></progress></li></ul><div class="poll_footer"><span>1093 people</span> · <a class="detailed-status_datetime u-url u-uid" href="https://social.jvns.ca/@b0rk/111982657794956944" rel="noopener noreferrer" target="_blank"><time class="formatted" datetime="2024-02-23T20:22:33Z" title="Feb 23, 2024, 20:22">Feb 23, 2024, 20:22</time></a></div></div></div></div>
<div class="poll-wrapper" lang="en"><p>poll: did you know that in a git merge conflict, the order of the code is different when you do a merge/rebase?</p><p>merge:</p><p>&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD<br/>    YOUR CODE<br/>=======<br/>    OTHER BRANCH'S CODE<br/>&gt;&gt;&gt;&gt;&gt;&gt;&gt; c694cf8aabe</p><p>rebase:</p><p>&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD<br/>    OTHER BRANCH'S CODE<br/>=======<br/>    YOUR CODE<br/>&gt;&gt;&gt;&gt;&gt;&gt;&gt; d945752 (your commit message)</p><p>(where "YOUR CODE" is the code from the branch you were on when you ran `git merge` or `git rebase`)</p><div data-component="Poll" data-props='{"disabled":true,"poll":{"id":"3674","expires_at":"2024-03-12T14:17:12.043Z","expired":true,"multiple":false,"votes_count":1511,"voters_count":1511,"options":[{"title":"yes","votes_count":232},{"title":"yes, mostly","votes_count":221},{"title":"no","votes_count":739},{"title":"what?","votes_count":319}],"emojis":[]}}'><div class="poll"><ul><li><label class="poll_option"><span class="poll_number">15%</span><span class="poll_option_text">yes</span></label><progress aria-hidden="true" max="100" value="15"><span class="poll_chart"></span></progress></li><li><label class="poll_option"><span class="poll_number">14%</span><span class="poll_option_text">yes, mostly</span></label><progress aria-hidden="true" max="100" value="14"><span class="poll_chart"></span></progress></li><li><label class="poll_option"><span class="poll_number">48%</span><span class="poll_option_text">no</span></label><progress aria-hidden="true" max="100" value="48"><span class="poll_chart"></span></progress></li><li><label class="poll_option"><span class="poll_number">21%</span><span class="poll_option_text">what?</span></label><progress aria-hidden="true" max="100" value="21"><span class="poll_chart"></span></progress></li></ul><div class="poll_footer"><span>1511 people</span> · <a class="detailed-status_datetime u-url u-uid" href="https://social.jvns.ca/@b0rk/112077480397781920" rel="noopener noreferrer" target="_blank"><time class="formatted" datetime="2024-03-11T14:17:12Z" title="Mar 11, 2024, 14:17">Mar 11, 2024, 14:17</time></a></div></div></div></div>
<h3 id="git-pull">git pull</h3>
<div class="poll-wrapper" lang="en"><p>poll: do you prefer `git fetch` or `git pull`?</p><p>(no lectures about why you think `git pull` is bad please but if you use both I'd be curious to hear in what cases you use fetch!)</p><div data-component="Poll" data-props='{"disabled":true,"poll":{"id":"3704","expires_at":"2024-03-19T20:09:34.706Z","expired":true,"multiple":false,"votes_count":2036,"voters_count":2036,"options":[{"title":"only `git fetch`","votes_count":252},{"title":"only `git pull`","votes_count":761},{"title":"mix of both","votes_count":995},{"title":"other","votes_count":28}],"emojis":[]}}'><div class="poll"><ul><li><label class="poll_option"><span class="poll_number">12%</span><span class="poll_option_text">only `git fetch`</span></label><progress aria-hidden="true" max="100" value="12"><span class="poll_chart"></span></progress></li><li><label class="poll_option"><span class="poll_number">37%</span><span class="poll_option_text">only `git pull`</span></label><progress aria-hidden="true" max="100" value="37"><span class="poll_chart"></span></progress></li><li><label class="poll_option"><span class="poll_number">48%</span><span class="poll_option_text">mix of both</span></label><progress aria-hidden="true" max="100" value="48"><span class="poll_chart"></span></progress></li><li><label class="poll_option"><span class="poll_number">1%</span><span class="poll_option_text">other</span></label><progress aria-hidden="true" max="100" value="1"><span class="poll_chart"></span></progress></li></ul><div class="poll_footer"><span>2036 people</span> · <a class="detailed-status_datetime u-url u-uid" href="https://social.jvns.ca/@b0rk/112118493083676573" rel="noopener noreferrer" target="_blank"><time class="formatted" datetime="2024-03-18T20:07:15Z" title="Mar 18, 2024, 20:07">Mar 18, 2024, 20:07</time></a></div></div></div></div>
<h3 id="commits">commits</h3>
<div class="poll-wrapper" lang="en"><p>[poll] how do you think of a git commit?</p><p>(sorry, you can't pick “it’s all 3”, I'm curious about which one feels most true to you)</p><div data-component="Poll" data-props='{"disabled":true,"poll":{"id":"2949","expires_at":"2023-12-12T18:18:26.015Z","expired":true,"multiple":false,"votes_count":2466,"voters_count":2466,"options":[{"title":"a **diff** from the previous commit","votes_count":1254},{"title":"a **snapshot** of the current state","votes_count":1046},{"title":"a **history** of every past commit","votes_count":94},{"title":"other/show results","votes_count":72}],"emojis":[]}}'><div class="poll"><ul><li><label class="poll_option"><span class="poll_number">50%</span><span class="poll_option_text">a **diff** from the previous commit</span></label><progress aria-hidden="true" max="100" value="50"><span class="poll_chart"></span></progress></li><li><label class="poll_option"><span class="poll_number">42%</span><span class="poll_option_text">a **snapshot** of the current state</span></label><progress aria-hidden="true" max="100" value="42"><span class="poll_chart"></span></progress></li><li><label class="poll_option"><span class="poll_number">3%</span><span class="poll_option_text">a **history** of every past commit</span></label><progress aria-hidden="true" max="100" value="3"><span class="poll_chart"></span></progress></li><li><label class="poll_option"><span class="poll_number">2%</span><span class="poll_option_text">other/show results</span></label><progress aria-hidden="true" max="100" value="2"><span class="poll_chart"></span></progress></li></ul><div class="poll_footer"><span>2466 people</span> · <a class="detailed-status_datetime u-url u-uid" href="https://social.jvns.ca/@b0rk/111563158717698550" rel="noopener noreferrer" target="_blank"><time class="formatted" datetime="2023-12-11T18:18:26Z" title="Dec 11, 2023, 18:18">Dec 11, 2023, 18:18</time></a></div></div></div></div>
<h3 id="branches">branches</h3>
<div class="poll-wrapper" lang="en"><p>poll: how do you think about git branches? (I'll put an image in a reply with pictures for the 3 options)</p><p>as with all of these polls obviously all 3 are valid, I'm curious which one feels the most true to you</p><div data-component="Poll" data-props='{"disabled":true,"poll":{"id":"3083","expires_at":"2024-01-07T14:28:23.877Z","expired":true,"multiple":false,"votes_count":1966,"voters_count":1966,"options":[{"title":"1. just the commits that \"branch\" off","votes_count":1151},{"title":"2. the history of every previous commit","votes_count":436},{"title":"3. just the commit at the end (\"branch = pointer\")","votes_count":311},{"title":"other / show results","votes_count":68}],"emojis":[]}}'><div class="poll"><ul><li><label class="poll_option"><span class="poll_number">58%</span><span class="poll_option_text">1. just the commits that "branch" off</span></label><progress aria-hidden="true" max="100" value="58"><span class="poll_chart"></span></progress></li><li><label class="poll_option"><span class="poll_number">22%</span><span class="poll_option_text">2. the history of every previous commit</span></label><progress aria-hidden="true" max="100" value="22"><span class="poll_chart"></span></progress></li><li><label class="poll_option"><span class="poll_number">15%</span><span class="poll_option_text">3. just the commit at the end ("branch = pointer")</span></label><progress aria-hidden="true" max="100" value="15"><span class="poll_chart"></span></progress></li><li><label class="poll_option"><span class="poll_number">3%</span><span class="poll_option_text">other / show results</span></label><progress aria-hidden="true" max="100" value="3"><span class="poll_chart"></span></progress></li></ul><div class="poll_footer"><span>1966 people</span> · <a class="detailed-status_datetime u-url u-uid" href="https://social.jvns.ca/@b0rk/111709458396281239" rel="noopener noreferrer" target="_blank"><time class="formatted" datetime="2024-01-06T14:24:21Z" title="Jan 06, 2024, 14:24">Jan 06, 2024, 14:24</time></a></div></div></div></div>
<h3 id="git-environment">git environment</h3>
<div class="poll-wrapper" lang="en"><p>poll: do you put your current git branch in your shell prompt?</p><div data-component="Poll" data-props="{&quot;disabled&quot;:true,&quot;poll&quot;:{&quot;id&quot;:&quot;3145&quot;,&quot;expires_at&quot;:&quot;2024-01-19T15:38:52.396Z&quot;,&quot;expired&quot;:true,&quot;multiple&quot;:false,&quot;votes_count&quot;:2365,&quot;voters_count&quot;:2365,&quot;options&quot;:[{&quot;title&quot;:&quot;yes&quot;,&quot;votes_count&quot;:1697},{&quot;title&quot;:&quot;no&quot;,&quot;votes_count&quot;:533},{&quot;title&quot;:&quot;no, but I don't use git on the command line&quot;,&quot;votes_count&quot;:94},{&quot;title&quot;:&quot;other/show results&quot;,&quot;votes_count&quot;:41}],&quot;emojis&quot;:[]}}"><div class="poll"><ul><li><label class="poll_option"><span class="poll_number">71%</span><span class="poll_option_text">yes</span></label><progress aria-hidden="true" max="100" value="71"><span class="poll_chart"></span></progress></li><li><label class="poll_option"><span class="poll_number">22%</span><span class="poll_option_text">no</span></label><progress aria-hidden="true" max="100" value="22"><span class="poll_chart"></span></progress></li><li><label class="poll_option"><span class="poll_number">3%</span><span class="poll_option_text">no, but I don't use git on the command line</span></label><progress aria-hidden="true" max="100" value="3"><span class="poll_chart"></span></progress></li><li><label class="poll_option"><span class="poll_number">1%</span><span class="poll_option_text">other/show results</span></label><progress aria-hidden="true" max="100" value="1"><span class="poll_chart"></span></progress></li></ul><div class="poll_footer"><span>2365 people</span> · <a class="detailed-status_datetime u-url u-uid" href="https://social.jvns.ca/@b0rk/111777697732765132" rel="noopener noreferrer" target="_blank"><time class="formatted" datetime="2024-01-18T15:38:31Z" title="Jan 18, 2024, 15:38">Jan 18, 2024, 15:38</time></a></div></div></div></div>
<div class="poll-wrapper" lang="en"><p>poll: do you use git on the command line or in a GUI? </p><p>(you can pick more than one option if it’s a mix of both, sorry magit users I didn't have space for you in this poll)</p><div data-component="Poll" data-props='{"disabled":true,"poll":{"id":"3617","expires_at":"2024-03-01T13:22:00.512Z","expired":true,"multiple":true,"votes_count":3689,"voters_count":2661,"options":[{"title":"command line, regularly","votes_count":2129},{"title":"GUI, regularly","votes_count":773},{"title":"command line, occasionally","votes_count":349},{"title":"GUI, occasionally","votes_count":438}],"emojis":[]}}'><div class="poll"><ul><li><label class="poll_option"><span class="poll_number">80%</span><span class="poll_option_text">command line, regularly</span></label><progress aria-hidden="true" max="100" value="80"><span class="poll_chart"></span></progress></li><li><label class="poll_option"><span class="poll_number">29%</span><span class="poll_option_text">GUI, regularly</span></label><progress aria-hidden="true" max="100" value="29"><span class="poll_chart"></span></progress></li><li><label class="poll_option"><span class="poll_number">13%</span><span class="poll_option_text">command line, occasionally</span></label><progress aria-hidden="true" max="100" value="13"><span class="poll_chart"></span></progress></li><li><label class="poll_option"><span class="poll_number">16%</span><span class="poll_option_text">GUI, occasionally</span></label><progress aria-hidden="true" max="100" value="16"><span class="poll_chart"></span></progress></li></ul><div class="poll_footer"><span>2661 people</span> · <a class="detailed-status_datetime u-url u-uid" href="https://social.jvns.ca/@b0rk/112014805256252757" rel="noopener noreferrer" target="_blank"><time class="formatted" datetime="2024-02-29T12:38:05Z" title="Feb 29, 2024, 12:38">Feb 29, 2024, 12:38</time></a></div></div></div></div>
<h3 id="losing-work">losing work</h3>
<div class="poll-wrapper" lang="en"><p>poll: have you lost work because of a git problem in the last year or two? (it counts even if it was "your fault" :))</p><div data-component="Poll" data-props='{"disabled":true,"poll":{"id":"3263","expires_at":"2024-02-15T15:00:00.750Z","expired":true,"multiple":false,"votes_count":1475,"voters_count":1475,"options":[{"title":"yes","votes_count":262},{"title":"no","votes_count":1127},{"title":"no, but git did something else unforgivable","votes_count":70},{"title":"other","votes_count":16}],"emojis":[]}}'><div class="poll"><ul><li><label class="poll_option"><span class="poll_number">17%</span><span class="poll_option_text">yes</span></label><progress aria-hidden="true" max="100" value="17"><span class="poll_chart"></span></progress></li><li><label class="poll_option"><span class="poll_number">76%</span><span class="poll_option_text">no</span></label><progress aria-hidden="true" max="100" value="76"><span class="poll_chart"></span></progress></li><li><label class="poll_option"><span class="poll_number">4%</span><span class="poll_option_text">no, but git did something else unforgivable</span></label><progress aria-hidden="true" max="100" value="4"><span class="poll_chart"></span></progress></li><li><label class="poll_option"><span class="poll_number">1%</span><span class="poll_option_text">other</span></label><progress aria-hidden="true" max="100" value="1"><span class="poll_chart"></span></progress></li></ul><div class="poll_footer"><span>1475 people</span> · <a class="detailed-status_datetime u-url u-uid" href="https://social.jvns.ca/@b0rk/111930248586728989" rel="noopener noreferrer" target="_blank"><time class="formatted" datetime="2024-02-14T14:14:12Z" title="Feb 14, 2024, 14:14">Feb 14, 2024, 14:14</time></a></div></div></div></div>
<h3 id="meaning-of-various-git-terms">meaning of various git terms</h3>
<p>These polls gave me the impression that for a lot of git terms (fast-forward,
reference, HEAD), there are a lot of git users who have &ldquo;literally no idea&rdquo;
what they mean. That makes me want to be careful about using and defining those
terms.</p>
<div class="poll-wrapper" lang="en"><p>poll: how confident do you feel that you know what HEAD means in git?</p><div data-component="Poll" data-props='{"disabled":true,"poll":{"id":"3650","expires_at":"2024-03-07T15:02:59.867Z","expired":true,"multiple":false,"votes_count":1783,"voters_count":1783,"options":[{"title":"100%","votes_count":187},{"title":"pretty confident","votes_count":645},{"title":"somewhat confident?","votes_count":690},{"title":"literally no idea","votes_count":261}],"emojis":[]}}'><div class="poll"><ul><li><label class="poll_option"><span class="poll_number">10%</span><span class="poll_option_text">100%</span></label><progress aria-hidden="true" max="100" value="10"><span class="poll_chart"></span></progress></li><li><label class="poll_option"><span class="poll_number">36%</span><span class="poll_option_text">pretty confident</span></label><progress aria-hidden="true" max="100" value="36"><span class="poll_chart"></span></progress></li><li><label class="poll_option"><span class="poll_number">38%</span><span class="poll_option_text">somewhat confident?</span></label><progress aria-hidden="true" max="100" value="38"><span class="poll_chart"></span></progress></li><li><label class="poll_option"><span class="poll_number">14%</span><span class="poll_option_text">literally no idea</span></label><progress aria-hidden="true" max="100" value="14"><span class="poll_chart"></span></progress></li></ul><div class="poll_footer"><span>1783 people</span> · <a class="detailed-status_datetime u-url u-uid" href="https://social.jvns.ca/@b0rk/112049348927204770" rel="noopener noreferrer" target="_blank"><time class="formatted" datetime="2024-03-06T15:02:59Z" title="Mar 06, 2024, 15:02">Mar 06, 2024, 15:02</time></a></div></div></div></div>
<div class="poll-wrapper" lang="en"><p>another poll: how do you think of HEAD in git?</p><div data-component="Poll" data-props='{"disabled":true,"poll":{"id":"3651","expires_at":"2024-03-07T17:57:24.734Z","expired":true,"multiple":false,"votes_count":1386,"voters_count":1386,"options":[{"title":"a pointer to the current commit","votes_count":939},{"title":"a pointer to the current branch (usually)","votes_count":357},{"title":"other","votes_count":90}],"emojis":[]}}'><div class="poll"><ul><li><label class="poll_option"><span class="poll_number">67%</span><span class="poll_option_text">a pointer to the current commit</span></label><progress aria-hidden="true" max="100" value="67"><span class="poll_chart"></span></progress></li><li><label class="poll_option"><span class="poll_number">25%</span><span class="poll_option_text">a pointer to the current branch (usually)</span></label><progress aria-hidden="true" max="100" value="25"><span class="poll_chart"></span></progress></li><li><label class="poll_option"><span class="poll_number">6%</span><span class="poll_option_text">other</span></label><progress aria-hidden="true" max="100" value="6"><span class="poll_chart"></span></progress></li></ul><div class="poll_footer"><span>1386 people</span> · <a class="detailed-status_datetime u-url u-uid" href="https://social.jvns.ca/@b0rk/112050034752815560" rel="noopener noreferrer" target="_blank"><time class="formatted" datetime="2024-03-06T17:57:24Z" title="Mar 06, 2024, 17:57">Mar 06, 2024, 17:57</time></a></div></div></div></div>
<div class="poll-wrapper" lang="en"><p>poll: when you see this message in `git status`:</p><p>”Your branch is up to date with 'origin/main’.”</p><p>do you know that your branch may not actually be up to date with the `main` branch on the remote?</p><div data-component="Poll" data-props='{"disabled":true,"poll":{"id":"3663","expires_at":"2024-03-09T19:04:23.709Z","expired":true,"multiple":false,"votes_count":2332,"voters_count":2332,"options":[{"title":"yes","votes_count":1482},{"title":"mostly yes","votes_count":365},{"title":"no","votes_count":174},{"title":"what?","votes_count":311}],"emojis":[]}}'><div class="poll"><ul><li><label class="poll_option"><span class="poll_number">63%</span><span class="poll_option_text">yes</span></label><progress aria-hidden="true" max="100" value="63"><span class="poll_chart"></span></progress></li><li><label class="poll_option"><span class="poll_number">15%</span><span class="poll_option_text">mostly yes</span></label><progress aria-hidden="true" max="100" value="15"><span class="poll_chart"></span></progress></li><li><label class="poll_option"><span class="poll_number">7%</span><span class="poll_option_text">no</span></label><progress aria-hidden="true" max="100" value="7"><span class="poll_chart"></span></progress></li><li><label class="poll_option"><span class="poll_number">13%</span><span class="poll_option_text">what?</span></label><progress aria-hidden="true" max="100" value="13"><span class="poll_chart"></span></progress></li></ul><div class="poll_footer"><span>2332 people</span> · <a class="detailed-status_datetime u-url u-uid" href="https://social.jvns.ca/@b0rk/112061622761219585" rel="noopener noreferrer" target="_blank"><time class="formatted" datetime="2024-03-08T19:04:23Z" title="Mar 08, 2024, 19:04">Mar 08, 2024, 19:04</time></a></div></div></div></div>
<div class="poll-wrapper" lang="en"><p>poll: how confident do you feel that you know what the term "fast-forward" means in git, for example in this error message:</p><p>`! [rejected]        main -&gt; main (non-fast-forward)`</p><p>or this one:</p><p>fatal: Not possible to fast-forward, aborting.</p><p>(I promise this is not a trick question, I'm just writing a blog post about git terminology and I'm trying to gauge how people feel about various core git terms)</p><div data-component="Poll" data-props='{"disabled":true,"poll":{"id":"3678","expires_at":"2024-03-12T18:00:38.867Z","expired":true,"multiple":false,"votes_count":1629,"voters_count":1629,"options":[{"title":"100%","votes_count":421},{"title":"pretty confident","votes_count":515},{"title":"somewhat confident?","votes_count":342},{"title":"literally no idea","votes_count":351}],"emojis":[]}}'><div class="poll"><ul><li><label class="poll_option"><span class="poll_number">25%</span><span class="poll_option_text">100%</span></label><progress aria-hidden="true" max="100" value="25"><span class="poll_chart"></span></progress></li><li><label class="poll_option"><span class="poll_number">31%</span><span class="poll_option_text">pretty confident</span></label><progress aria-hidden="true" max="100" value="31"><span class="poll_chart"></span></progress></li><li><label class="poll_option"><span class="poll_number">20%</span><span class="poll_option_text">somewhat confident?</span></label><progress aria-hidden="true" max="100" value="20"><span class="poll_chart"></span></progress></li><li><label class="poll_option"><span class="poll_number">21%</span><span class="poll_option_text">literally no idea</span></label><progress aria-hidden="true" max="100" value="21"><span class="poll_chart"></span></progress></li></ul><div class="poll_footer"><span>1629 people</span> · <a class="detailed-status_datetime u-url u-uid" href="https://social.jvns.ca/@b0rk/112078355085525822" rel="noopener noreferrer" target="_blank"><time class="formatted" datetime="2024-03-11T17:59:38Z" title="Mar 11, 2024, 17:59">Mar 11, 2024, 17:59</time></a></div></div></div></div>
<div class="poll-wrapper" lang="en"><p>poll: how confident do you feel that you know what a "ref" or "reference" is in git? (“ref” and “reference” are the same thing)</p><p>for example in this error message (from `git push`)</p><p>error: failed to push some refs to 'github.com:jvns/int-exposed'</p><p>or this one:  (from `git switch mybranch`)</p><p>fatal: invalid reference: mybranch</p><div data-component="Poll" data-props='{"disabled":true,"poll":{"id":"3683","expires_at":"2024-03-14T13:41:22.022Z","expired":true,"multiple":false,"votes_count":1117,"voters_count":1117,"options":[{"title":"100%","votes_count":111},{"title":"pretty confident","votes_count":323},{"title":"somewhat confident?","votes_count":356},{"title":"literally no idea","votes_count":327}],"emojis":[]}}'><div class="poll"><ul><li><label class="poll_option"><span class="poll_number">9%</span><span class="poll_option_text">100%</span></label><progress aria-hidden="true" max="100" value="9"><span class="poll_chart"></span></progress></li><li><label class="poll_option"><span class="poll_number">28%</span><span class="poll_option_text">pretty confident</span></label><progress aria-hidden="true" max="100" value="28"><span class="poll_chart"></span></progress></li><li><label class="poll_option"><span class="poll_number">31%</span><span class="poll_option_text">somewhat confident?</span></label><progress aria-hidden="true" max="100" value="31"><span class="poll_chart"></span></progress></li><li><label class="poll_option"><span class="poll_number">29%</span><span class="poll_option_text">literally no idea</span></label><progress aria-hidden="true" max="100" value="29"><span class="poll_chart"></span></progress></li></ul><div class="poll_footer"><span>1117 people</span> · <a class="detailed-status_datetime u-url u-uid" href="https://social.jvns.ca/@b0rk/112088664114767341" rel="noopener noreferrer" target="_blank"><time class="formatted" datetime="2024-03-13T13:41:22Z" title="Mar 13, 2024, 13:41">Mar 13, 2024, 13:41</time></a></div></div></div></div>
<div class="poll-wrapper" lang="en"><p>another git terminology poll: how confident do you feel that you know what a git commit is?</p><p>(not a trick question, I'm mostly curious how this one relates to people's reported confidence about more "advanced" terms like reference/fast-forward/HEAD)</p><div data-component="Poll" data-props='{"disabled":true,"poll":{"id":"3693","expires_at":"2024-03-16T13:21:13.403Z","expired":true,"multiple":false,"votes_count":1294,"voters_count":1294,"options":[{"title":"100%","votes_count":427},{"title":"pretty confident","votes_count":649},{"title":"somewhat confident?","votes_count":198},{"title":"literally no idea","votes_count":20}],"emojis":[]}}'><div class="poll"><ul><li><label class="poll_option"><span class="poll_number">32%</span><span class="poll_option_text">100%</span></label><progress aria-hidden="true" max="100" value="32"><span class="poll_chart"></span></progress></li><li><label class="poll_option"><span class="poll_number">50%</span><span class="poll_option_text">pretty confident</span></label><progress aria-hidden="true" max="100" value="50"><span class="poll_chart"></span></progress></li><li><label class="poll_option"><span class="poll_number">15%</span><span class="poll_option_text">somewhat confident?</span></label><progress aria-hidden="true" max="100" value="15"><span class="poll_chart"></span></progress></li><li><label class="poll_option"><span class="poll_number">1%</span><span class="poll_option_text">literally no idea</span></label><progress aria-hidden="true" max="100" value="1"><span class="poll_chart"></span></progress></li></ul><div class="poll_footer"><span>1294 people</span> · <a class="detailed-status_datetime u-url u-uid" href="https://social.jvns.ca/@b0rk/112099886480664238" rel="noopener noreferrer" target="_blank"><time class="formatted" datetime="2024-03-15T13:15:21Z" title="Mar 15, 2024, 13:15">Mar 15, 2024, 13:15</time></a></div></div></div></div>
<div class="poll-wrapper" lang="en"><p>poll: in git, do you think of "detached HEAD state" and "not having any branch checked out" as being the same thing?</p><div data-component="Poll" data-props='{"disabled":true,"poll":{"id":"3723","expires_at":"2024-03-22T18:35:27.580Z","expired":true,"multiple":false,"votes_count":1278,"voters_count":1278,"options":[{"title":"yes","votes_count":676},{"title":"no","votes_count":346},{"title":"what?","votes_count":223},{"title":"other","votes_count":33}],"emojis":[]}}'><div class="poll"><ul><li><label class="poll_option"><span class="poll_number">52%</span><span class="poll_option_text">yes</span></label><progress aria-hidden="true" max="100" value="52"><span class="poll_chart"></span></progress></li><li><label class="poll_option"><span class="poll_number">27%</span><span class="poll_option_text">no</span></label><progress aria-hidden="true" max="100" value="27"><span class="poll_chart"></span></progress></li><li><label class="poll_option"><span class="poll_number">17%</span><span class="poll_option_text">what?</span></label><progress aria-hidden="true" max="100" value="17"><span class="poll_chart"></span></progress></li><li><label class="poll_option"><span class="poll_number">2%</span><span class="poll_option_text">other</span></label><progress aria-hidden="true" max="100" value="2"><span class="poll_chart"></span></progress></li></ul><div class="poll_footer"><span>1278 people</span> · <a class="detailed-status_datetime u-url u-uid" href="https://social.jvns.ca/@b0rk/112135116065832096" rel="noopener noreferrer" target="_blank"><time class="formatted" datetime="2024-03-21T18:34:42Z" title="Mar 21, 2024, 18:34">Mar 21, 2024, 18:34</time></a></div></div></div></div>
<div class="poll-wrapper" lang="en"><p>poll: how confident do you feel that you know what the term "current branch" means in git?</p><p>(deleted &amp; reposted to clarify that I'm asking about the meaning of the term)</p><div data-component="Poll" data-props='{"disabled":true,"poll":{"id":"3725","expires_at":"2024-03-22T19:25:55.325Z","expired":true,"multiple":false,"votes_count":1282,"voters_count":1282,"options":[{"title":"100%","votes_count":346},{"title":"pretty confident","votes_count":640},{"title":"somewhat confident?","votes_count":235},{"title":"literally no idea","votes_count":61}],"emojis":[]}}'><div class="poll"><ul><li><label class="poll_option"><span class="poll_number">26%</span><span class="poll_option_text">100%</span></label><progress aria-hidden="true" max="100" value="26"><span class="poll_chart"></span></progress></li><li><label class="poll_option"><span class="poll_number">49%</span><span class="poll_option_text">pretty confident</span></label><progress aria-hidden="true" max="100" value="49"><span class="poll_chart"></span></progress></li><li><label class="poll_option"><span class="poll_number">18%</span><span class="poll_option_text">somewhat confident?</span></label><progress aria-hidden="true" max="100" value="18"><span class="poll_chart"></span></progress></li><li><label class="poll_option"><span class="poll_number">4%</span><span class="poll_option_text">literally no idea</span></label><progress aria-hidden="true" max="100" value="4"><span class="poll_chart"></span></progress></li></ul><div class="poll_footer"><span>1282 people</span> · <a class="detailed-status_datetime u-url u-uid" href="https://social.jvns.ca/@b0rk/112135312540813733" rel="noopener noreferrer" target="_blank"><time class="formatted" datetime="2024-03-21T19:24:40Z" title="Mar 21, 2024, 19:24">Mar 21, 2024, 19:24</time></a></div></div></div></div>
<h3 id="other-version-control-systems">other version control systems</h3>
<p>I occasionally hear &ldquo;SVN was better than git!&rdquo; but this &ldquo;svn vs git&rdquo; poll makes
me think that&rsquo;s a minority opinion. I&rsquo;m much more cautious about concluding anything from the hg-vs-git poll but it does seem like some people prefer git
and some people prefer Mercurial.</p>
<div class="poll-wrapper" lang="en"><p>poll 2: if you've used both svn and git, which do you prefer?</p><p>(no replies please, i have already read 300 comments about git vs other version control systems today and they were great but i can't read more)</p><div data-component="Poll" data-props='{"disabled":true,"poll":{"id":"3707","expires_at":"2024-03-20T21:16:21.033Z","expired":true,"multiple":false,"votes_count":1642,"voters_count":1642,"options":[{"title":"svn","votes_count":58},{"title":"git","votes_count":1507},{"title":"depends","votes_count":53},{"title":"other","votes_count":24}],"emojis":[]}}'><div class="poll"><ul><li><label class="poll_option"><span class="poll_number">3%</span><span class="poll_option_text">svn</span></label><progress aria-hidden="true" max="100" value="3"><span class="poll_chart"></span></progress></li><li><label class="poll_option"><span class="poll_number">91%</span><span class="poll_option_text">git</span></label><progress aria-hidden="true" max="100" value="91"><span class="poll_chart"></span></progress></li><li><label class="poll_option"><span class="poll_number">3%</span><span class="poll_option_text">depends</span></label><progress aria-hidden="true" max="100" value="3"><span class="poll_chart"></span></progress></li><li><label class="poll_option"><span class="poll_number">1%</span><span class="poll_option_text">other</span></label><progress aria-hidden="true" max="100" value="1"><span class="poll_chart"></span></progress></li></ul><div class="poll_footer"><span>1642 people</span> · <a class="detailed-status_datetime u-url u-uid" href="https://social.jvns.ca/@b0rk/112124427045371322" rel="noopener noreferrer" target="_blank"><time class="formatted" datetime="2024-03-19T21:16:21Z" title="Mar 19, 2024, 21:16">Mar 19, 2024, 21:16</time></a></div></div></div></div>
<div class="poll-wrapper" lang="en"><p>gonna do a short thread of git vs other version control systems polls just to get an overall vibe </p><p>poll 1: if you've used both hg and git, which do you prefer?</p><p>(no replies please though, i have already read 300 comments about git vs other version control systems today and i can't read more)</p><div data-component="Poll" data-props='{"disabled":true,"poll":{"id":"3706","expires_at":"2024-03-20T21:15:27.134Z","expired":true,"multiple":false,"votes_count":684,"voters_count":684,"options":[{"title":"hg","votes_count":146},{"title":"git","votes_count":448},{"title":"depends","votes_count":53},{"title":"other","votes_count":37}],"emojis":[]}}'><div class="poll"><ul><li><label class="poll_option"><span class="poll_number">21%</span><span class="poll_option_text">hg</span></label><progress aria-hidden="true" max="100" value="21"><span class="poll_chart"></span></progress></li><li><label class="poll_option"><span class="poll_number">65%</span><span class="poll_option_text">git</span></label><progress aria-hidden="true" max="100" value="65"><span class="poll_chart"></span></progress></li><li><label class="poll_option"><span class="poll_number">7%</span><span class="poll_option_text">depends</span></label><progress aria-hidden="true" max="100" value="7"><span class="poll_chart"></span></progress></li><li><label class="poll_option"><span class="poll_number">5%</span><span class="poll_option_text">other</span></label><progress aria-hidden="true" max="100" value="5"><span class="poll_chart"></span></progress></li></ul><div class="poll_footer"><span>684 people</span> · <a class="detailed-status_datetime u-url u-uid" href="https://social.jvns.ca/@b0rk/112124423512955698" rel="noopener noreferrer" target="_blank"><time class="formatted" datetime="2024-03-19T21:15:27Z" title="Mar 19, 2024, 21:15">Mar 19, 2024, 21:15</time></a></div></div></div></div>
<h3 id="that-s-all">that&rsquo;s all!</h3>
<p>It&rsquo;s been very fun to run all of these polls and I&rsquo;ve learned a lot about how
people use and think about git.</p>
<style>
.poll-wrapper {
  background-color: #ecedf0;
  border-radius: 5px;
  padding: 1rem;
  margin: 1rem 0;
}
.poll p, .poll_footer p {
  margin: 0;
}
.poll-wrapper a {
  color: #444b5d;
  font-size: 14px;
}
.poll-wrapper a:hover {
  text-decoration: underline;
}
progress {
  width: 100%;
}
.poll ul {
  list-style: none;
  margin: 0;
}
.poll-wrapper span {
  padding: 0;
}
.poll li {
  margin-bottom: 10px;
  position: relative;
}
.poll_option_text {
  word-wrap: break-word;
  display: inline-block;
  max-width: calc(100% - 70px);
  overflow-wrap: break-word;
}
.poll_number {
  display: inline-block;
  flex: 0 0 45px;
  font-weight: 700;
  width: 45px;
}
.poll_option {
  cursor: default;
  display: flex;
  line-height: 18px;
  overflow: hidden;
  padding: 6px 0;
  position: relative;
}
.poll_chart {
  background: #b1d6f1;
  border-radius: 4px;
  display: block;
  height: 5px;
  min-width: 1%;
}
.poll_chart.leading {
  background: #858afa;
}
.poll {
  font-size: 14px;
  margin-top: 16px;
}
.poll_footer {
  color: #444b5d;
  padding-bottom: 5px;
  padding-top: 6px;
}
</style>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The "current branch" in git]]></title>
    <link href="https://jvns.ca/blog/2024/03/22/the-current-branch-in-git/"/>
    <updated>2024-03-22T08:15:02+00:00</updated>
    <id>https://jvns.ca/blog/2024/03/22/the-current-branch-in-git/</id>
    <content type="html"><![CDATA[<p>Hello! I know I just wrote <a href="https://jvns.ca/blog/2024/03/08/how-head-works-in-git/">a blog post about HEAD in git</a>, but I&rsquo;ve been
thinking more about what the term &ldquo;current branch&rdquo; means in git and it&rsquo;s a
little weirder than I thought.</p>
<h3 id="four-possible-definitions-for-current-branch">four possible definitions for &ldquo;current branch&rdquo;</h3>
<ol>
<li>It&rsquo;s what&rsquo;s in the file <strong><code>.git/HEAD</code></strong>. This is how the <a href="https://git-scm.com/docs/gitglossary#def_HEAD">git glossary</a> defines it.</li>
<li>It&rsquo;s what <strong><code>git status</code></strong> says on the first line</li>
<li>It&rsquo;s what you most recently <strong>checked out</strong> with <code>git checkout</code> or <code>git switch</code></li>
<li>It&rsquo;s what&rsquo;s in your shell&rsquo;s <strong>git prompt</strong>. I use <a href="https://fishshell.com/docs/current/cmds/fish_git_prompt.html">fish_git_prompt</a> so that&rsquo;s what I&rsquo;ll be talking about.</li>
</ol>
<p>I originally thought that these 4 definitions were all more or less the
same, but after chatting with some people on Mastodon, I realized that they&rsquo;re
more different from each other than I thought.</p>
<p>So let&rsquo;s talk about a few git scenarios and how each of these definitions plays
out in each of them. I used git version <code>2.39.2 (Apple Git-143)</code> for all of these experiments.</p>
<h3 id="scenario-1-right-after-git-checkout-main">scenario 1: right after <code>git checkout main</code></h3>
<p>Here&rsquo;s the most normal situation: you check out a branch.</p>
<ol>
<li><code>.git/HEAD</code> contains <code>ref: refs/heads/main</code></li>
<li><code>git status</code> says <code>On branch main</code></li>
<li>The thing I most recently checked out was: <code>main</code></li>
<li>My shell&rsquo;s git prompt says: <code>(main)</code></li>
</ol>
<p>In this case the 4 definitions all match up: they&rsquo;re all <code>main</code>. Simple enough.</p>
<h3 id="scenario-2-right-after-git-checkout-775b2b399">scenario 2: right after <code>git checkout 775b2b399</code></h3>
<p>Now let&rsquo;s imagine I check out a specific commit ID (so that we&rsquo;re in &ldquo;detached HEAD state&rdquo;).</p>
<ol>
<li><code>.git/HEAD</code> contains <code>775b2b399fb8b13ee3341e819f2aaa024a37fa92</code></li>
<li><code>git status</code> says <code>HEAD detached at 775b2b39</code></li>
<li>The thing I most recently checked out was <code>775b2b399</code></li>
<li>My shell&rsquo;s git prompt says <code>((775b2b39))</code></li>
</ol>
<p>Again, these all basically match up &ndash; some of them have truncated the commit
ID and some haven&rsquo;t, but that&rsquo;s it. Let&rsquo;s move on.</p>
<h3 id="scenario-3-right-after-git-checkout-v1-0-13">scenario 3: right after <code>git checkout v1.0.13</code></h3>
<p>What if we&rsquo;ve checked out a tag, instead of a branch or commit ID?</p>
<ol>
<li><code>.git/HEAD</code> contains <code>ca182053c7710a286d72102f4576cf32e0dafcfb</code></li>
<li><code>git status</code> says <code>HEAD detached at v1.0.13</code></li>
<li>The thing I most recently checked out was <code>v1.0.13</code></li>
<li>My shell&rsquo;s git prompt says <code>((v1.0.13))</code></li>
</ol>
<p>Now things start to get a bit weirder! <code>.git/HEAD</code> disagrees with the other 3
indicators: <code>git status</code>, the git prompt, and what I checked out are all the
same (<code>v1.0.13</code>), but <code>.git/HEAD</code> contains a commit ID.</p>
<p>The reason for this is that git is trying to help us out: commit IDs are kind
of opaque, so if there&rsquo;s a tag that corresponds to the current commit, <code>git status</code> will show us that instead.</p>
<p>Some notes about this:</p>
<ul>
<li>If we check out the commit by its ID (<code>git checkout ca182053c7710a286d72</code>)
instead of by its tag, what shows up in <code>git status</code> and in my shell prompt
are exactly the same &ndash; git doesn&rsquo;t actually &ldquo;know&rdquo; that we checked out a
tag.</li>
<li>it looks like you can find the tags matching <code>HEAD</code> by running <code>git describe HEAD --tags --exact-match</code> (here&rsquo;s the <a href="https://github.com/fish-shell/fish-shell/blob/a5156e9e0e89bff2bd81ac945a019bad34f14346/share/functions/fish_git_prompt.fish#L521-L527">fish git prompt code</a>)</li>
<li>You can see where <code>git-prompt.sh</code> added support for describing a commit by a
tag in this way in commit <a href="https://github.com/git/git/commit/27c578885a0b8f56430c5a24f558e2b45cf04a38">27c578885 in 2008</a>.</li>
<li>I don&rsquo;t know if it makes a difference whether the tag is annotated or not.</li>
<li>If there are 2 tags with the same commit ID, it gets a little weird. For
example, if I add the tag <code>v1.0.12</code> to this commit so that it&rsquo;s with both <code>v1.0.12</code> and <code>v1.0.13</code>, you can
see here that my git prompt changes, and then the prompt and <code>git status</code>
disagree about which tag to display:</li>
</ul>
<pre><code>bork@grapefruit ~/w/int-exposed ((v1.0.12))&gt; git status
HEAD detached at v1.0.13
</code></pre>
<p>(my prompt shows <code>v1.0.12</code> and <code>git status</code> shows <code>v1.0.13</code>)</p>
<h3 id="scenario-4-in-the-middle-of-a-rebase">scenario 4: in the middle of a rebase</h3>
<p>Now: what if I check out the <code>main</code> branch, do a rebase, but then there was a
merge conflict in the middle of the rebase? Here&rsquo;s the situation:</p>
<ol>
<li><code>.git/HEAD</code> contains <code>c694cf8aabe2148b2299a988406f3395c0461742</code> (the commit ID of the commit that I&rsquo;m rebasing onto, <code>origin/main</code> in this case)</li>
<li><code>git status</code> says <code>interactive rebase in progress; onto c694cf8</code></li>
<li>The thing I most recently checked out was <code>main</code></li>
<li>My shell&rsquo;s git prompt says <code>(main|REBASE-i 1/1)</code></li>
</ol>
<p>Some notes about this:</p>
<ul>
<li>I think that in some sense the &ldquo;current branch&rdquo; is <code>main</code> here &ndash; it&rsquo;s what I most recently checked out, it&rsquo;s what we&rsquo;ll go back to after the rebase is done, and it&rsquo;s where we&rsquo;d go back to if I run <code>git rebase --abort</code></li>
<li>in another sense, we&rsquo;re in a detached HEAD state at <code>c694cf8aabe2</code>. But it doesn&rsquo;t have the usual implications of being in &ldquo;detached HEAD state&rdquo; &ndash; if you make a commit, it won&rsquo;t get orphaned! Instead, assuming you finish the rebase, it&rsquo;ll get absorbed into the rebase and put somewhere in the middle of your branch.</li>
<li>it looks like during the rebase, the old &ldquo;current branch&rdquo; (<code>main</code>) is stored in <code>.git/rebase-merge/head-name</code>. Not totally sure about this though.</li>
</ul>
<h3 id="scenario-5-right-after-git-init">scenario 5: right after <code>git init</code></h3>
<p>What about when we create an empty repository with <code>git init</code>?</p>
<ol>
<li><code>.git/HEAD</code> contains <code>ref: refs/heads/main</code></li>
<li><code>git status</code> says <code>On branch main</code> (and &ldquo;No commits yet&rdquo;)</li>
<li>The thing I most recently checked out was, well, nothing</li>
<li>My shell&rsquo;s git prompt says: <code>(main)</code></li>
</ol>
<p>So here everything mostly lines up, except that we&rsquo;ve never run <code>git checkout</code> or <code>git switch</code>. Basically Git automatically switches to whatever
branch was configured in <code>init.defaultBranch</code>.</p>
<h3 id="scenario-6-a-bare-git-repository">scenario 6: a bare git repository</h3>
<p>What if we clone a bare repository with <code>git clone --bare https://github.com/rbspy/rbspy</code>?</p>
<ol>
<li><code>HEAD</code> contains <code>ref: refs/heads/main</code></li>
<li><code>git status</code> says <code>fatal: this operation must be run in a work tree</code></li>
<li>The thing I most recently checked out was, well, nothing, <code>git checkout</code> doesn&rsquo;t even work in bare repositories</li>
<li>My shell&rsquo;s git prompt says: <code>(BARE:main)</code></li>
</ol>
<p>So #1 and #4 match (they both agree that the current branch is &ldquo;main&rdquo;), but <code>git status</code> and <code>git checkout</code> don&rsquo;t even work.</p>
<p>Some notes about this one:</p>
<ul>
<li>I think <code>HEAD</code> in a bare repository mainly only really affects 1 thing: it&rsquo;s the
branch that gets checked out when you clone the repository. It&rsquo;s also used when you run <code>git log</code>.</li>
<li>if you really want to, you can update <code>HEAD</code> in a bare repository to a
different branch with <code>git symbolic-ref HEAD refs/heads/whatever</code>. I&rsquo;ve never
needed to do that though and it seems weird because <code>git symbolic ref</code> doesn&rsquo;t check if the thing you&rsquo;re pointing <code>HEAD</code> at is
actually a branch that exists. Not sure if there&rsquo;s a better way.</li>
</ul>
<h3 id="all-the-results">all the results</h3>
<p>Here&rsquo;s a table with all of the results:</p>
<style>
table {
    border-collapse: collapse;
    width: 100%;
    font-size: 0.7rem;
}

th, td {
    border: 1px solid #dddddd;
    text-align: left;
    padding: 8px;
}

th {
    background-color: #dddddd;
  font-weight: bold;
}

tr:nth-child(even) {
    background-color: #f2f2f2;
}

tr td:first-child {
  font-weight: bold;
}
</style>
<table>
  <thead>
      <tr>
          <th style="text-align: left"></th>
          <th style="text-align: left"><code>.git/HEAD</code></th>
          <th style="text-align: left">git status</th>
          <th style="text-align: left">checked out</th>
          <th style="text-align: left">prompt</th>
      </tr>
  </thead>
  <tbody>
      <tr>
          <td style="text-align: left">1. <code>checkout main</code></td>
          <td style="text-align: left"><code>ref: refs/heads/main</code></td>
          <td style="text-align: left"><code>On branch main</code></td>
          <td style="text-align: left">main</td>
          <td style="text-align: left"><code>(main)</code></td>
      </tr>
      <tr>
          <td style="text-align: left">2. <code>checkout 775b2b</code></td>
          <td style="text-align: left"><code>775b2b399...</code></td>
          <td style="text-align: left"><code>HEAD detached at 775b2b39</code></td>
          <td style="text-align: left">775b2b399</td>
          <td style="text-align: left"><code>((775b2b39))</code></td>
      </tr>
      <tr>
          <td style="text-align: left">3. <code>checkout v1.0.13</code></td>
          <td style="text-align: left"><code>ca182053c...</code></td>
          <td style="text-align: left"><code>HEAD detached at v1.0.13</code></td>
          <td style="text-align: left">v1.0.13</td>
          <td style="text-align: left"><code>((v1.0.13))</code></td>
      </tr>
      <tr>
          <td style="text-align: left">4. inside rebase</td>
          <td style="text-align: left"><code>c694cf8aa...</code></td>
          <td style="text-align: left"><code>interactive rebase in progress; onto c694cf8</code></td>
          <td style="text-align: left">main</td>
          <td style="text-align: left"><code>(main|REBASE-i 1/1)</code></td>
      </tr>
      <tr>
          <td style="text-align: left">5. after <code>git init</code></td>
          <td style="text-align: left"><code>ref: refs/heads/main</code></td>
          <td style="text-align: left"><code>On branch main</code></td>
          <td style="text-align: left">n/a</td>
          <td style="text-align: left"><code>(main)</code></td>
      </tr>
      <tr>
          <td style="text-align: left">6. bare repository</td>
          <td style="text-align: left"><code>ref: refs/heads/main</code></td>
          <td style="text-align: left"><code>fatal: this operation must be run in a work tree</code></td>
          <td style="text-align: left">n/a</td>
          <td style="text-align: left"><code>(BARE:main)</code></td>
      </tr>
  </tbody>
</table>
<h3 id="current-branch-doesn-t-seem-completely-well-defined">&ldquo;current branch&rdquo; doesn&rsquo;t seem completely well defined</h3>
<p>My original instinct when talking about git was to agree with the git glossary
and say that <code>HEAD</code> and the &ldquo;current branch&rdquo; mean the exact same thing.</p>
<p>But this doesn&rsquo;t seem as ironclad as I used to think anymore! Some thoughts:</p>
<ul>
<li><code>.git/HEAD</code> is definitely the one with the most consistent format &ndash; it&rsquo;s
always either a branch or a commit ID. The others are all much messier</li>
<li>I have a lot more sympathy than I used to for the definition &ldquo;the current
branch is whatever you last checked out&rdquo;. Git does a lot of work to remember
which branch you last checked out (even if you&rsquo;re currently doing a bisect or
a merge or something else that temporarily moves HEAD off of that branch) and
it feels weird to ignore that.</li>
<li><code>git status</code> gives a lot of helpful context &ndash; these 5 status messages say a
lot more than just what <code>HEAD</code> is set to currently
<ol>
<li><code>on branch main</code></li>
<li><code>HEAD detached at 775b2b39</code></li>
<li><code>HEAD detached at v1.0.13</code></li>
<li><code>interactive rebase in progress; onto c694cf8</code></li>
<li><code>on branch main, no commits yet</code></li>
</ol>
</li>
</ul>
<h3 id="some-more-current-branch-definitions">some more &ldquo;current branch&rdquo; definitions</h3>
<p>I&rsquo;m going to try to collect some other definitions of the term <code>current branch</code> that I heard from people on Mastodon here and write some notes on them.</p>
<ol>
<li>&ldquo;the branch that would be updated if i made a commit&rdquo;</li>
</ol>
<ul>
<li>Most of the time this is the same as <code>.git/HEAD</code></li>
<li>Arguably if you&rsquo;re in the middle of a rebase, it&rsquo;s different from <code>HEAD</code>,  because ultimately that new commit will end up on the branch in <code>.git/rebase-merge/head-name</code></li>
</ul>
<ol start="2">
<li>&ldquo;the branch most git operations work against&rdquo;</li>
</ol>
<ul>
<li>This is sort of the same as what&rsquo;s in <code>.git/HEAD</code>, except that some
operations (like <code>git status</code>) will behave differently in some situations,
like how <code>git status</code> won&rsquo;t tell you the current branch if you&rsquo;re in a bare
repository</li>
</ul>
<h3 id="on-orphaned-commits">on orphaned commits</h3>
<p>One thing I noticed that wasn&rsquo;t captured in any of this is whether the
current commit is <strong>orphaned</strong> or not &ndash; the <code>git status</code> message (<code>HEAD detached from c694cf8</code>) is the same whether or not your current commit is
orphaned.</p>
<p>I imagine this is because figuring out whether or not a given commit is
orphaned might take a long time in a large repository: you can find out if
the current commit is orphaned with <code>git branch --contains HEAD</code>, and that
command takes about 500ms in a repository with 70,000 commits.</p>
<p>Git will warn you if the commit is orphaned (&ldquo;Warning: you are leaving 1 commit
behind, not connected to any of your branches&hellip;&rdquo;) when you switch to a
different branch though.</p>
<h3 id="that-s-all">that&rsquo;s all!</h3>
<p>I don&rsquo;t have anything particularly smart to say about any of this. The more I
think about git the more I can understand why people get confused.</p>
]]></content>
  </entry>
  
</feed>